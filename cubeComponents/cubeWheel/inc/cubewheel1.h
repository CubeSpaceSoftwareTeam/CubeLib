/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef __CWHEEL11_H
#define __CWHEEL11_H

#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>

#include "cubelib.h"

#ifdef __cplusplus
extern "C" {
#endif

/***************************************************************************//**
* @addtogroup CubeComponents
* @{
******************************************************************************/

/***************************************************************************//**
* @addtogroup CWheel1
* @brief CubeWheel Interface API
* @{
******************************************************************************/

/// ControlModeVal enumeration
typedef enum {
    CubeWheel1_Idle = 0, ///< Idle mode
    CubeWheel1_NoControl = 1, ///< No control mode
    CubeWheel1_DutyCycleInput = 2, ///< Duty cycle input mode
    CubeWheel1_SpeedController = 3, ///< Speed controller mode
} CWHEEL1_ControlModeVal_t;

/*******************************************************************************
 *******************************   STRUCTS   ***********************************
 ******************************************************************************/

/***************************************************************************//**
 * @brief
 *   CubeWheel Backup Gain message structure.
 * @details
 *   Backup speed controller gain values
 ******************************************************************************/
typedef struct{
    uint16_t ki; ///< Integrator gain
    uint8_t kiMultiplier; ///< Multiplier for integrator gain
    uint16_t kd; ///< Feedback gain
    uint8_t kdMultiplier; ///< Multiplier for feedback gain
} CUBEWHEEL1_BackupGain_t;

/***************************************************************************//**
 * @brief
 *   CubeWheel Extended Identification message structure.
 * @details
 *   Extended Identification information on this node
 ******************************************************************************/
typedef struct{
    uint16_t serialNumber; ///< Serial number of this unit
    uint8_t i2CAddress; ///< I2C address of this unit
    uint8_t cANAddress; ///< CAN mask of this unit
} CUBEWHEEL1_ExtendedIdentification_t;

/***************************************************************************//**
 * @brief
 *   CubeWheel Identification message structure.
 * @details
 *   Identification information for this node
 ******************************************************************************/
typedef struct{
    uint8_t nodeType; ///< Node type identifier. For CubeControl Motor, this field will always have the value 4
    uint8_t interfaceVersion; ///< Interface version. This field should have a value of 1
    uint8_t firmwareMajorVersion; ///< Firmware major version
    uint8_t firmwareMinorVersion; ///< Firmware minor version
    uint16_t runtimeSeconds; ///< Number of seconds since processor start-up (measurment unit is [s])
    uint16_t runtimeMilliseconds; ///< Number of milliseconds (after the integer second) since processor start-up (measurment unit is [ms])
} CUBEWHEEL1_Identification_t;

/***************************************************************************//**
 * @brief
 *   CubeWheel Main Gain message structure.
 * @details
 *   Main speed controller gain values
 ******************************************************************************/
typedef struct{
    uint16_t ki; ///< Integrator gain
    uint8_t kiMultiplier; ///< Multiplier for integrator gain
    uint16_t kd; ///< Feedback gain
    uint8_t kdMultiplier; ///< Multiplier for feedback gain
} CUBEWHEEL1_MainGain_t;

/***************************************************************************//**
 * @brief
 *   CubeWheel PWM Gain message structure.
 * @details
 *   General PWM gain
 ******************************************************************************/
typedef struct{
    int16_t k; ///< Main gain
    uint8_t kmultiplier; ///< Multiplier for main gain
} CUBEWHEEL1_PWMGain_t;

/***************************************************************************//**
 * @brief
 *   CubeWheel Status and Error Flags message structure.
 * @details
 *   Processor status and error flags
 ******************************************************************************/
typedef struct{
    bool invalidTelemetry; ///< An invalid telemetry request was received
    bool invalidTelecommand; ///< An invalid telecommand was received
    bool encoderError; ///< Encoder indicates an error
    bool uARTError; ///< Error in UART protocol
    bool i2CError; ///< Error in I2C protocol
    bool cANError; ///< Error in CAN protocol
    bool configError; ///< Configuration load error
    bool speedError; ///< Speed measurements indicates an error
} CUBEWHEEL1_StatusErrorFlags_t;

/***************************************************************************//**
 * @brief
 *   CubeWheel Wheel Data message structure.
 * @details
 *   Complete wheel data
 ******************************************************************************/
typedef struct{
    double wheelSpeed; ///< Wheel speed measurement in rpm (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM)
    double wheelReference; ///< Wheel reference speed in rpm (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM)
    double wheelCurrent; ///< Wheel current measurement (measurment unit is [mA])
} CUBEWHEEL1_WheelData_t;

/***************************************************************************//**
 * @brief
 *   CubeWheel Wheel Data Additional message structure.
 * @details
 *   Additional wheel data
 ******************************************************************************/
typedef struct{
    int16_t wheelDuty; ///< Current duty cycle command to motor
    double wheelBackupSpeed; ///< Backup wheel speed measurement in rpm (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM)
} CUBEWHEEL1_WheelDataAdditional_t;

/***************************************************************************//**
 * @brief
 *   CubeWheel Wheel Status message structure.
 * @details
 *   Current status telemetry of wheel electronics
 ******************************************************************************/
typedef struct{
    uint16_t runtimeSeconds; ///< Number of seconds since processor start-up (measurment unit is [s])
    uint16_t runtimeMilliseconds; ///< Number of milliseconds (after the integer second) since processor start-up (measurment unit is [ms])
    uint16_t temperature; ///< Current temperature of MCU
    CWHEEL1_ControlModeVal_t controlMode; ///< Current control mode
    bool backupMode; ///< Backup-mode state
    bool motorSwitch; ///< Motor switch state
    bool hallSwitch; ///< Hall sensor switch state
    bool encoderSwitch; ///< Encoder switch state
    bool errorFlag; ///< Indicates whether an error has occurred
} CUBEWHEEL1_WheelStatus_t;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

CUBELIB_Result_t CUBEWHEEL1_ReqBackupGainTlm(uint8_t nodeid, CUBEWHEEL1_BackupGain_t* backupGain);
CUBELIB_Result_t CUBEWHEEL1_SendBackupGainCmd(uint8_t nodeid, uint16_t ki, uint8_t kiMultiplier, uint16_t kd, uint8_t kdMultiplier);

CUBELIB_Result_t CUBEWHEEL1_SendBackupWheelModeCmd(uint8_t nodeid, bool backupMode);

CUBELIB_Result_t CUBEWHEEL1_SendCANMaskCmd(uint8_t nodeid, uint8_t cANAddress);

CUBELIB_Result_t CUBEWHEEL1_SendClearErrorsCmd(uint8_t nodeid, uint8_t clearErrorParam);

CUBELIB_Result_t CUBEWHEEL1_SendControlModeCmd(uint8_t nodeid, CWHEEL1_ControlModeVal_t controlMode);

CUBELIB_Result_t CUBEWHEEL1_SendEncoderPowerCmd(uint8_t nodeid, bool encoderPowerOn);

CUBELIB_Result_t CUBEWHEEL1_ReqExtendedIdentificationTlm(uint8_t nodeid, CUBEWHEEL1_ExtendedIdentification_t* extendedIdentification);

CUBELIB_Result_t CUBEWHEEL1_SendHallPowerCmd(uint8_t nodeid, bool hallSensorPowerOn);

CUBELIB_Result_t CUBEWHEEL1_SendI2CAddressCmd(uint8_t nodeid, uint8_t i2CAddress);

CUBELIB_Result_t CUBEWHEEL1_ReqIdentificationTlm(uint8_t nodeid, CUBEWHEEL1_Identification_t* identification);

CUBELIB_Result_t CUBEWHEEL1_ReqMainGainTlm(uint8_t nodeid, CUBEWHEEL1_MainGain_t* mainGain);
CUBELIB_Result_t CUBEWHEEL1_SendMainGainCmd(uint8_t nodeid, uint16_t ki, uint8_t kiMultiplier, uint16_t kd, uint8_t kdMultiplier);

CUBELIB_Result_t CUBEWHEEL1_SendMotorPowerCmd(uint8_t nodeid, bool motorPowerOn);

CUBELIB_Result_t CUBEWHEEL1_ReqPWMGainTlm(uint8_t nodeid, CUBEWHEEL1_PWMGain_t* pWMGain);
CUBELIB_Result_t CUBEWHEEL1_SendPWMGainCmd(uint8_t nodeid, int16_t k, uint8_t kmultiplier);

CUBELIB_Result_t CUBEWHEEL1_SendResetCmd(uint8_t nodeid, uint8_t resetParam);

CUBELIB_Result_t CUBEWHEEL1_SendSerialCmd(uint8_t nodeid, uint16_t serialNumber);

CUBELIB_Result_t CUBEWHEEL1_ReqStatusErrorFlagsTlm(uint8_t nodeid, CUBEWHEEL1_StatusErrorFlags_t* statusErrorFlags);

CUBELIB_Result_t CUBEWHEEL1_ReqWheelCurrentTlm(uint8_t nodeid, double* wheelCurrent);

CUBELIB_Result_t CUBEWHEEL1_ReqWheelDataTlm(uint8_t nodeid, CUBEWHEEL1_WheelData_t* wheelData);

CUBELIB_Result_t CUBEWHEEL1_ReqWheelDataAdditionalTlm(uint8_t nodeid, CUBEWHEEL1_WheelDataAdditional_t* wheelDataAdditional);

CUBELIB_Result_t CUBEWHEEL1_ReqWheelReferenceTlm(uint8_t nodeid, double* wheelReference);

CUBELIB_Result_t CUBEWHEEL1_ReqWheelSpeedTlm(uint8_t nodeid, double* wheelSpeed);

CUBELIB_Result_t CUBEWHEEL1_SendWheelSpeedRefCmd(uint8_t nodeid, double speedRef);

CUBELIB_Result_t CUBEWHEEL1_ReqWheelStatusTlm(uint8_t nodeid, CUBEWHEEL1_WheelStatus_t* wheelStatus);

CUBELIB_Result_t CUBEWHEEL1_SendWheelTorqueCmd(uint8_t nodeid, int16_t dutyCycle);


#endif  // define __CWHEEL11_H

/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef __CUBESTAR33_H
#define __CUBESTAR33_H

#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>

#include "cubelib.h"

#ifdef __cplusplus
extern "C" {
#endif

/***************************************************************************//**
* @addtogroup CubeComponents
* @{
******************************************************************************/

/***************************************************************************//**
* @addtogroup CubeStar3
* @brief CubeStar Interface API
* @{
******************************************************************************/

/// TestPatternType enumeration
typedef enum {
    CubeStar3_Moving = 0, ///< Test pattern changes from line to line and from frame to frame
    CubeStar3_Fixed = 1, ///< Ramp generator always starting at first pixel
    CubeStar3_Ramping = 2, ///< All output values in smallest possible region
} CUBESTAR3_TestPatternType_t;

/// BlockSize enumeration
typedef enum {
    CubeStar3_Bytes32 = 0, ///< Bytes in one image block
    CubeStar3_Bytes64 = 1, ///< Bytes in one image block
    CubeStar3_Bytes128 = 2, ///< Bytes in one image block
    CubeStar3_Bytes256 = 3, ///< Bytes in one image block
} CUBESTAR3_BlockSize_t;

/// Mode enumeration
typedef enum {
    CubeStar3_TrackingMode = 0, ///< ID tracking mode
    CubeStar3_LostMode = 1, ///< ID lost in space mode
} CUBESTAR3_Mode_t;

/// ResetCause enumeration
typedef enum {
    CubeStar3_PoRst = 1, ///< Power on reset
    CubeStar3_BodUnregRst = 2, ///< Brown out triggered reset
    CubeStar3_BodRegRst = 3, ///< Brown out triggered reset
    CubeStar3_ExtRstOrWdogRst = 4, ///< External reset or watchdog reset
    CubeStar3_ExtRst = 5, ///< External (Reset pin) reset
    CubeStar3_WdoRst = 6, ///< Reset caused by watchdog
    CubeStar3_LockupSysReqRst = 7, ///< Lockup reset or system requested reset
    CubeStar3_LockupRst = 8, ///< Lockup reset
    CubeStar3_SysReqRst = 9, ///< System request reset
    CubeStar3_Unknown = 10, ///< Undetermined reset cause
} CUBESTAR3_ResetCause_t;

/// TaskStatusVal enumeration
typedef enum {
    CubeStar3_PoweringUp = 0, ///< CubeStar is initializing
    CubeStar3_PoweredUp = 1, ///< CubeStar is initialized and ready
    CubeStar3_InitializingCamera = 2, ///< Initializing the image sensor
    CubeStar3_CameraInitializationFailed = 3, ///< Camera Initialization failed
    CubeStar3_CameraInitialized = 4, ///< Image sensor ready
    CubeStar3_SettingExposure = 5, ///< Setting new exposure value
    CubeStar3_ExposureSetFailed = 6, ///< Setting new Exposure failed
    CubeStar3_ExposureSet = 7, ///< New Exposure set
    CubeStar3_WritingToImageSensor = 8, ///< Writing to image sensor
    CubeStar3_WritingToImageSensorComplete = 9, ///< Complete write operation to image sensor
    CubeStar3_ReadingFromImageSensor = 10, ///< Reading from image sensor
    CubeStar3_ReadFromImageSensorComplete = 11, ///< Read from image sensor complete
    CubeStar3_ReceivingImage = 12, ///< Receiving image being uploaded over UART
    CubeStar3_ImageReceived = 13, ///< Received image uploaded from UART
    CubeStar3_ImageReceivedFailed = 14, ///< Image was not successfully received
    CubeStar3_CapturingImage = 15, ///< Capturing new image
    CubeStar3_ImageCaptureFailed = 16, ///< Image Capture Failed
    CubeStar3_ImageCaptured = 17, ///< New image captured
    CubeStar3_SettingImageBlock = 18, ///< Setting new image block
    CubeStar3_ImageBlockSet = 19, ///< Image block selected
    CubeStar3_ImageBlockSetFailed = 20, ///< Failed to set the image block
    CubeStar3_DetectingStars = 21, ///< Detecting stars
    CubeStar3_StarDetectionFailed = 22, ///< Detection failed
    CubeStar3_StarsDetected = 23, ///< Stars detected
    CubeStar3_IdentifyingStars = 24, ///< Identifying stars
    CubeStar3_StarIdentificationFailed = 25, ///< Star ID failed
    CubeStar3_StarsIdentified = 26, ///< Stars identified
    CubeStar3_CalculatingAttitude = 27, ///< Calculating attitude
    CubeStar3_AttitudeCalculationFailed = 28, ///< Attitude calculation failed
    CubeStar3_AttitudeCalculated = 29, ///< Attitude calculated
    CubeStar3_TestSRAM = 30, ///< Testing the SRAM
    CubeStar3_SRAMtestComplete = 31, ///< SRAM test complete
    CubeStar3_CapturingTestPattern = 32, ///< Capturing image sensor test pattern
    CubeStar3_TestPatternCaptured = 33, ///< Image sensor test pattern captured
    CubeStar3_TestPatternCaptureFailed = 34, ///< The test patern could not be captured
    CubeStar3_FindingBestStars = 35, ///< Finding best stars
    CubeStar3_BestStarsSearchFailed = 36, ///< Best stars search failed
    CubeStar3_BestStarsFound = 37, ///< Best star found
    CubeStar3_StreamingImageDown = 38, ///< Stream image down
    CubeStar3_ImageDownloadComplete = 39, ///< Image download complete
} CUBESTAR3_TaskStatusVal_t;

/// IDModeVal enumeration
typedef enum {
    CubeStar3_Tracking = 0, ///< 
    CubeStar3_Lost = 1, ///< 
} CUBESTAR3_IDModeVal_t;

/*******************************************************************************
 *******************************   STRUCTS   ***********************************
 ******************************************************************************/

/***************************************************************************//**
 * @brief
 *   CubeStar All attitude data message structure.
 * @details
 *   All attitude data
 ******************************************************************************/
typedef struct{
    double qbar0; ///< Q0 (valid range is between -1  and 1 )
    double qbar1; ///< Q1 (valid range is between -1  and 1 )
    double qbar2; ///< Q2 (valid range is between -1  and 1 )
    double qbar3; ///< Q3 (valid range is between -1  and 1 )
    double rightAscension; ///< Right Ascension (measurment unit is [radians])
    double declination; ///< Declination (measurment unit is [radians])
    double bSVX; ///< Boresight vector X-component (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double bSVY; ///< Boresight vectore Y-component (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double bSVZ; ///< Boresight vector Z-Component (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
} CUBESTAR3_AttitudeData_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Attitude determination timing message structure.
 * @details
 *   Attitude determination timing
 ******************************************************************************/
typedef struct{
    uint16_t latestTime; ///< Current attitude estimation time (measurment unit is [ms])
    uint16_t maxTime; ///< Max attitude estimation time (measurment unit is [ms])
} CUBESTAR3_AttitudeTiming_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Index of best stars message structure.
 * @details
 *   Index of best stars
 ******************************************************************************/
typedef struct{
    uint8_t star1Index; ///< Index of 1st star (measurment unit is [star mumber])
    uint8_t star2Index; ///< Index of second star (measurment unit is [star number])
    uint8_t star3Index; ///< Index of third star (measurment unit is [star number])
} CUBESTAR3_BestStarIndex_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Best star selection time message structure.
 * @details
 *   Best star selection time
 ******************************************************************************/
typedef struct{
    uint16_t latestTime; ///< Best star selection time (measurment unit is [ms])
    uint16_t maxTime; ///< Best star selection max time (measurment unit is [ms])
} CUBESTAR3_BestStarSelectionTime_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Body unit vectors message structure.
 * @details
 *   Unit vectors to stars in body coordinates 
 ******************************************************************************/
typedef struct{
    double vbX; ///< Body unit vector x-component (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double vbY; ///< Body unit vector y-component (measurment unit is [unit vector componnet]. valid range is between -1 unit vector componnet and 1 unit vector componnet)
    double vbZ; ///< Body unit vector z-component (measurment unit is [unit vector compnent]. valid range is between -1 unit vector compnent and 1 unit vector compnent)
    uint8_t starNumber; ///< Number of the detected star (measurment unit is [star number])
} CUBESTAR3_BodyUnitVectors_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Image sensor setup details message structure.
 * @details
 *   Image sensor setup details 
 ******************************************************************************/
typedef struct{
    uint16_t line; ///< Line configuration register (measurment unit is [register])
    uint16_t misc1; ///< Misc 1 register (measurment unit is [register])
    uint16_t misc2; ///< Misc 2 register (measurment unit is [register])
    uint16_t clock; ///< Clock configuration register (measurment unit is [register])
    uint16_t chain; ///< Chain configuration register (measurment unit is [register])
    uint16_t ctrl; ///< Ctrl configuration register (measurment unit is [register])
    uint16_t clamp; ///< Clamp configuration register (measurment unit is [register])
} CUBESTAR3_CameraSetup_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Camera timing info message structure.
 * @details
 *   Camera timing info
 ******************************************************************************/
typedef struct{
    uint16_t setupTime; ///< Camera setup time (measurment unit is [ms])
    uint16_t exposureUpdateTime; ///< Exposure update time (measurment unit is [ms])
    uint16_t captureTime; ///< Image capture time (measurment unit is [ms])
} CUBESTAR3_CameraTiming_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Search region message structure.
 * @details
 *   Search region
 ******************************************************************************/
typedef struct{
    uint8_t stepSize; ///< Step size (measurment unit is [pixel position])
    uint16_t xstart; ///< Start of x-axis search region (measurment unit is [pixel position])
    uint16_t xend; ///< End of x-axis search region (measurment unit is [pixel position])
    uint16_t ystart; ///< Start of y-axis search region (measurment unit is [pixel position])
    uint16_t yend; ///< End of y-axis search region (measurment unit is [pixel position])
} CUBESTAR3_DetectionRegion_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Detection Summary message structure.
 * @details
 *   Detection Summary
 ******************************************************************************/
typedef struct{
    uint8_t numStarsDetected; ///< Number of stars detected (measurment unit is [stars])
    uint8_t numInvalidStars; ///< Number of invalid stars detected (measurment unit is [invalid stars])
    uint8_t amountOfNoise; ///< Amount of noise detected (measurment unit is [noise])
    uint8_t imageDarkValue; ///< Image dark value (measurment unit is [8-bit pixel])
} CUBESTAR3_DetectionSummary_t;

/***************************************************************************//**
 * @brief
 *   CubeStar  Detection Threshold values message structure.
 * @details
 *   Detection threshold values
 ******************************************************************************/
typedef struct{
    uint8_t darkThreshold; ///< Dark threshold pixel value (measurment unit is [8-bit pixel])
    uint8_t detectionThreshold; ///< Detection pixel threshold value (measurment unit is [8-bit pixel])
    uint8_t starThreshold; ///< Star pixel threshold value (measurment unit is [8-bit pixel])
} CUBESTAR3_DetectionThresholdValues_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Detection timing one message structure.
 * @details
 *   Detection timing one
 ******************************************************************************/
typedef struct{
    uint16_t maxStarSearchTime; ///< Max time spent on finding a star (measurment unit is [ms])
    uint16_t maxCentroidFindTime; ///< Max time spent on finding the center of a star (measurment unit is [ms])
    uint16_t maxCorrectionTime; ///< Max time spent on distortion correction (measurment unit is [ms])
    uint16_t maxVectorCalTime; ///< Max time spent on vector calcuations (measurment unit is [ms])
} CUBESTAR3_DetectionTimingOne_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Detection timing two message structure.
 * @details
 *   Detection timing two
 ******************************************************************************/
typedef struct{
    uint16_t starDetectionTime; ///< The current star detection duration (measurment unit is [ms])
    uint16_t maxStarDetectionTime; ///< The maximum star detection duration (measurment unit is [ms])
} CUBESTAR3_DetectionTimingTwo_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Distortion coefficients message structure.
 * @details
 *   Distortion coefficients 
 ******************************************************************************/
typedef struct{
    float k1; ///< First radial distortion coefficient (measurment unit is [gain])
    float k2; ///< Second radial distortion coefficient (measurment unit is [gain])
    float p1; ///< First tangential distortion coefficient (measurment unit is [gain])
    float p2; ///< Second tangential distortion coefficients (measurment unit is [gain])
} CUBESTAR3_DistortionCoef_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Error Flags message structure.
 * @details
 *   Error Flags
 ******************************************************************************/
typedef struct{
    bool overCurrent; ///< An overcurrent condition has been detected (measurment unit is [Flag])
    bool underCurrent; ///< An under current condition has been detected (measurment unit is [Flag])
    bool uART_ProtocolError; ///< The UART communication protocol was not followed (measurment unit is [Flag])
    bool uART_TcmdBufOfError; ///< The UART telecommand buffer can only store 4 telecommands which must be executed at any given time. Normally this buffer will always be empty since the telecommands are processed quickly (measurment unit is [Flag])
    bool uART_Tcmd_TooManyParm; ///< To many parameters were received for the received telecommand ID. (measurment unit is [Flag])
    bool uART_Tcmd_TooFewParm; ///< The fesw parameters were received (measurment unit is [Flag])
    bool uART_MsgIncomplete; ///< An incomplete message was received (measurment unit is [Flag])
    bool uART_RXTimeout; ///< UART Rx timeout (measurment unit is [Flag])
    bool i2C_WaitForIDReadRequestError; ///< When the I2C is in an idle state it is waiting for a new ID it should not receive a read request, but a write request followed by a repeated start as per the I2C protocol (measurment unit is [Flag])
    bool i2C_TcmdBufOFError; ///< The I2C telecommand buffer can only store 4 telecommands which must be executed at any given time. Normally this buffer will always be empty since the telecommands are processed quickly (measurment unit is [Flag])
    bool i2C_TCMD_TooFewParm; ///< The amount of received parameters are to view for the command ID received. (measurment unit is [Flag])
    bool i2C_TCMD_TooManyparm; ///< The amount of received parameters are to many for the command ID received. (measurment unit is [Flag])
    bool sPICommsError; ///< SPI comunications error (measurment unit is [Flag])
    bool statusError; ///< Status error (measurment unit is [Flag])
    bool iSSetupError; ///< Image sensor setup error (measurment unit is [Flag])
    bool testPatternConfigError; ///< Test pattern configuration error (measurment unit is [Flag])
    bool imageCaptureError; ///< Image capture error (measurment unit is [Flag])
    bool iSDisableError; ///< Image sensor disable error (measurment unit is [Flag])
    bool configChangeError; ///< Configuration change error (measurment unit is [Flag])
    bool iSEnableError; ///< Image sensor enable error (measurment unit is [Flag])
    bool focalLengthRangeError; ///< The new focal length value is too small or to large (measurment unit is [Flag])
    bool principalPointRangeError; ///< The new values for the boresight is too small or to large (measurment unit is [Flag])
    bool imageBlockSizeError; ///< The size for the image block specified is invalid. (measurment unit is [Flag])
    bool mainLoopTimeError; ///< The main loop took longer than one second to execute.  (measurment unit is [Flag])
    bool tcmdIDError; ///< An unknown telecommand ID was received (measurment unit is [Flag])
    bool tlmIDError; ///< An unknown telemetry ID was received (measurment unit is [Flag])
    bool triggerAlreadySet; ///< The capture and process command was received twice and the first capture and process command has not been executed (measurment unit is [Flag])
    bool timerAlreadyRunning; ///< Attempt was made to start image capture timer, but it was already running (measurment unit is [Flag])
    bool timerTimeSetToLong; ///< Attempt was made to set timeout of timer for longer than one second.  (measurment unit is [Flag])
    bool starPixSetError; ///< Attempt was made to set an invalid min or max pixel value (measurment unit is [Flag])
    bool maxStarsSetError; ///< Attempt was made to set an invalid max centroids amount (measurment unit is [Flag])
    bool maxStarsDetection; ///< More than the max number of stars could be detected (measurment unit is [Flag])
    bool maxInvalidStarsDetectionError; ///< Max invalid stars were found (Bright object in FoV) (measurment unit is [Flag])
    bool centroidingGridSizeSetError; ///< Attempt was made to set an invalid grid size value (measurment unit is [Flag])
    bool validImageRangeSetError; ///< Search range error (measurment unit is [Flag])
    bool maxNoiseSetError; ///< Attempt was made to set an invalid max noise value. (measurment unit is [Flag])
    bool maxNoiseDetected; ///< The maximum allowable amount of noise has been detected in the image. Resets for each image captured and detection performed.  (measurment unit is [Flag])
    bool setIDModeError; ///< Invalid ID mode set  (measurment unit is [Flag])
    bool iDModeError; ///< Invalaid ID mode (measurment unit is [Flag])
    bool reducedIDListSizeError; ///< Reduced ID list size error (measurment unit is [Flag])
    bool lessThanThreeStarsInFoV; ///< Less than three stars in catalogue for given attitude (measurment unit is [Flag])
    bool lessThanThreeStarsDetected; ///< less than three stars Detected (measurment unit is [Flag])
    bool lessThanThreeStarsID; ///< Less than three stars ID (measurment unit is [Flag])
    bool iDError; ///< IDError (measurment unit is [Flag])
    bool iDSearchError; ///< ID search error (measurment unit is [Flag])
    bool declinationSetError; ///< Attempt was made to set an invalid declination value (measurment unit is [Flag])
    bool rightAscensionSetError; ///< Attempt was made to set an invalid right ascension value (measurment unit is [Flag])
    bool questindexError; ///< Quest Index error (measurment unit is [Flag])
    bool rateExceeded; ///< Maximum change in atttitude between sequential readings were exceeded (measurment unit is [Flag])
    bool flashInvalidAreaError; ///< FlashInvalidAreError (measurment unit is [Flag])
    bool flashLockedError; ///< FlashLockedError (measurment unit is [Flag])
    bool flashTimeoutError; ///< FlashTimeoutError (measurment unit is [Flag])
    bool flashUnalignedError; ///< FlashUnalignedError (measurment unit is [Flag])
} CUBESTAR3_ErrorFlags_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Extended Identification message structure.
 * @details
 *   Identification details continued
 ******************************************************************************/
typedef struct{
    uint16_t serialNumber; ///< Serial number in format: YYNN (measurment unit is [Serial Number])
    double temperature; ///< MCU temperature (measurment unit is [Degrees Celsius])
    CUBESTAR3_ResetCause_t resetCause; ///< Reset cause (valid range is between 0  and 10 )
    uint16_t wDGResetCount; ///< Watchdog reset counter (measurment unit is [Counter])
    uint16_t tcmdCount; ///< Telecommand counter (measurment unit is [Counter])
    uint16_t tlmCount; ///< Telemetry counter (measurment unit is [Counter])
} CUBESTAR3_ExtendedIdentification_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Focal length message structure.
 * @details
 *   Focal Length
 ******************************************************************************/
typedef struct{
    float focalLength; ///< Focal length (measurment unit is [mm])
    float fx; ///< Focal length in the x component (measurment unit is [pixels])
    float fy; ///< Focal length in the y component (measurment unit is [pixels])
} CUBESTAR3_FocalLengthDetails_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Identification message structure.
 * @details
 *   Identification details 
 ******************************************************************************/
typedef struct{
    uint8_t nodeType; ///< CubeComponent node number (For internal use) (measurment unit is [Node Type])
    uint8_t interfaceVersion; ///< The TLM and TCMD interface version (measurment unit is [Version])
    uint8_t firmwareVersionMajor; ///< The firmware version major number (V major.minor ) (measurment unit is [Version])
    uint8_t firmwareVersionMinor; ///< The firmware version minor version (V major.minor) (measurment unit is [Version])
    uint16_t runtimeMilliseconds; ///< Runtime milliseconds part (measurment unit is [ms])
    uint16_t runtimeSeconds; ///< Runtime seconds part (measurment unit is [s])
} CUBESTAR3_Identification_t;

/***************************************************************************//**
 * @brief
 *   CubeStar ID stars details message structure.
 * @details
 *   Identified stars details
 ******************************************************************************/
typedef struct{
    uint8_t starNumber; ///< Corresponding star number (measurment unit is [star number])
    uint16_t identity; ///< Identity of the star (measurment unit is [catalog number])
    uint8_t validationVotes; ///< Number of validation votes (measurment unit is [votes])
    uint8_t confidence; ///< The confidence of the match (measurment unit is [confidence percentage])
} CUBESTAR3_IDStarsDetails_t;

/***************************************************************************//**
 * @brief
 *   CubeStar ID timing one message structure.
 * @details
 *   ID timing one
 ******************************************************************************/
typedef struct{
    uint16_t maxModeSelectionTime; ///< Max time spent on setting the correct mode (measurment unit is [ms])
    uint16_t maxDistanceCalTime; ///< Max time spent on cal distances (measurment unit is [ms])
    uint16_t maxVoteRoundOneTime; ///< Max time spent on VoteRound (measurment unit is [ms])
    uint16_t maxFindIDTime; ///< Max time spent on determining the ID (measurment unit is [ms])
} CUBESTAR3_IDTimingOne_t;

/***************************************************************************//**
 * @brief
 *   CubeStar ID timing three message structure.
 * @details
 *   ID timing three
 ******************************************************************************/
typedef struct{
    uint16_t starIdentificationTime; ///< The time spent on star identification (measurment unit is [ms])
    uint16_t maxStarIdentificationTime; ///< The max time spent of the identification (measurment unit is [ms])
} CUBESTAR3_IDTimingThree_t;

/***************************************************************************//**
 * @brief
 *   CubeStar ID timing two message structure.
 * @details
 *   ID timing two
 ******************************************************************************/
typedef struct{
    uint16_t maxVoteRoundTwoTime; ///< Max time spent on second vote round (measurment unit is [ms])
    uint16_t maxSelectID; ///< Max time spent on ID determination (measurment unit is [ms])
    uint16_t maxAlgoCompletionTime; ///< Max algorithm completion time (measurment unit is [ms])
} CUBESTAR3_IDTimingTwo_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Image block set message structure.
 * @details
 *   Set image block for download
 ******************************************************************************/
typedef struct{
    uint16_t blockNumber; ///< Block number  (measurment unit is [number])
    CUBESTAR3_BlockSize_t blockSize; ///< Image Block size  (measurment unit is [BlockSize]. valid range is between 0 BlockSize and 3 BlockSize)
} CUBESTAR3_ImageBlockSet_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Image setup message structure.
 * @details
 *   Image setup details
 ******************************************************************************/
typedef struct{
    uint16_t firstLine; ///< The first line of image on pixel array (measurment unit is [Line(Row)])
    uint16_t width; ///< Width of the image (measurment unit is [pixels])
    uint16_t height; ///< Height of the image (measurment unit is [pixels])
} CUBESTAR3_ImageSetup_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Inertial unit vectors message structure.
 * @details
 *   Inertial unit vectors
 ******************************************************************************/
typedef struct{
    double viX; ///< Inertial vector x component (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double viY; ///< Inertial vector y component (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double viZ; ///< Inertial vector z component (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    uint8_t starNumber; ///< Corresponding star number
    uint16_t identity; ///< Identity of the star (measurment unit is [Catalogue number])
    uint8_t confidence; ///< The confidence of the match (measurment unit is [percentage])
} CUBESTAR3_InertialUnitVectors_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Date received from the image sensor message structure.
 * @details
 *   Date received from the image sensor
 ******************************************************************************/
typedef struct{
    uint8_t dataH; ///< Date received from the image sensor High
    uint8_t dataL; ///< Date received from the image sensor Low
} CUBESTAR3_IS_Register_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Status which can be logged message structure.
 * @details
 *   Status which can be logged
 ******************************************************************************/
typedef struct{
    double temp; ///< Temperature (measurment unit is [C])
    uint32_t runtime; ///< Runtime (measurment unit is [ms])
    uint16_t wDGcounter; ///< WDG reset Counter (measurment unit is [counter])
    CUBESTAR3_TaskStatusVal_t status; ///<  (measurment unit is [Status]. valid range is between 0 Status and 39 Status)
    uint8_t sW; ///< Power SW status (measurment unit is [stauts])
    uint16_t current; ///< Current (measurment unit is [mA])
    uint16_t maxCurrent; ///< Max Current (measurment unit is [mA])
    uint16_t minCurrent; ///< Min Current (measurment unit is [mA])
    bool overCurrent; ///< An overcurrent condition has been detected (measurment unit is [flag])
    bool underCurrent; ///< An under current condition has been detected (measurment unit is [flag])
    bool uART_ProtocolError; ///< The UART communication protocol was not followed (measurment unit is [flag])
    bool uART_TcmdBufOfError; ///< The UART telecommand buffer can only store 4 telecommands which must be executed at any given time. Normally this buffer will always be empty since the telecommands are processed quickly (measurment unit is [flag])
    bool uART_Tcmd_TooManyParm; ///< To many parameters were received for the received telecommand ID. (measurment unit is [flag])
    bool uART_Tcmd_TooFewParm; ///< The few parameters were received (measurment unit is [flag])
    bool uART_MsgIncomplete; ///< An incomplete message was received (measurment unit is [flag])
    bool uART_RXTimeout; ///< UART Rx timeout (measurment unit is [flag])
    bool i2C_WaitForIDReadRequestError; ///< When the I2C is in an idle state it is waiting for a new ID it should not receive a read request, but a write request followed by a repeated start as per the I2C protocol (measurment unit is [flag])
    bool i2C_TcmdBufOFError; ///< The I2C telecommand buffer can only store 4 telecommands which must be executed at any given time. Normally this buffer will always be empty since the telecommands are processed quickly (measurment unit is [flag])
    bool i2C_TCMD_TooFewParm; ///< The amount of received parameters are to view for the command ID received. (measurment unit is [flag])
    bool i2C_TCMD_TooManyparm; ///< The amount of received parameters are to many for the command ID received. (measurment unit is [flag])
    bool sPICommsError; ///< An SPI communication error occurred between the MCU and the image sensor. (measurment unit is [flag])
    bool statusError; ///< Image sensor state error received. (measurment unit is [flag])
    bool iSsetupError; ///< Error encountered during image sensor setup. (measurment unit is [flag])
    bool testpatternConfigError; ///< Error occurred while configuring the image sensor for test pattern output. (measurment unit is [flag])
    bool imageCaptureError; ///< An error occurred while an image was being captured. (measurment unit is [flag])
    bool iSDisableError; ///< Error occurred while attempting to disable the image sensor. (measurment unit is [flag])
    bool configChangeError; ///< An error occurred while the image sensor configuration was being changed. (measurment unit is [flag])
    bool iSEnableError; ///< An error occurred while the image sensor was being enabled. (measurment unit is [flag])
    bool focalLengthRangeError; ///< The new focal length value is too small or to large (measurment unit is [flag])
    bool boresightRangeError; ///< The new values for the boresight is too small or to large (measurment unit is [flag])
    bool imageBlockSizeError; ///< The size for the image block specified is invalid. (measurment unit is [flag])
    bool mainLoopTimeError; ///< The main loop took longer than one second to execute.  (measurment unit is [flag])
    bool tcmdIDError; ///< An unknown telecommand ID was received (measurment unit is [flag])
    bool tlmIDError; ///< An unknown telemetry ID was received (measurment unit is [flag])
    bool triggerAlreadySet; ///< The capture and process command was received twice and the first capture and process command has not been executed (measurment unit is [flag])
    bool timerAlreadyRunning; ///< Attempt was made to start image capture timer, but it was already running (measurment unit is [flag])
    bool timerTimeSetToLong; ///< Attempt was made to set timeout of timer for longer than one second.  (measurment unit is [flag])
    bool pixSetError; ///< Attempt was made to set an invalid min or max pixel value (measurment unit is [flag])
    bool maxStarsSetError; ///< Attempt was made to set an invalid max centroids amount (measurment unit is [flag])
    bool maxStarsDetection; ///< More than the max number of stars could be detected (measurment unit is [flag])
    bool maxInvalidStarsDetectionError; ///< Max invalid stars were found (Bright object in FoV) (measurment unit is [flag])
    bool centroidingGridSizeSetError; ///< Attempt was made to set an invalid grid size value (measurment unit is [flag])
    bool validImageRangeSetError; ///< Search Range error (measurment unit is [flag])
    bool maxNoiseSetError; ///< Attempt was made to set an invalid max noise value. (measurment unit is [flag])
    bool maxNoiseDetected; ///< The maximum allowable amount of noise has been detected in the image. Resets for each image captured and detection performed.  (measurment unit is [flag])
    bool setIDModeError; ///< Invalid ID mode set  (measurment unit is [flag])
    bool iDModeError; ///< Invalaid ID mode (measurment unit is [flag])
    bool reducedIDListSizeError; ///< Reduced ID list size error (measurment unit is [flag])
    bool lessThanThreeStarsInFoV; ///< Less than three stars in catalogue for given attitude (measurment unit is [flag])
    bool lessThanThreeStarsDetected; ///< less than three stars Detected (measurment unit is [flag])
    bool lessThanThreeStarsID; ///< Less than three stars ID (measurment unit is [flag])
    bool iDError; ///< IDError (measurment unit is [flag])
    bool iDSearchError; ///< ID search error (measurment unit is [flag])
    bool declinationSetError; ///< Attempt was made to set an invalid declination value (measurment unit is [flag])
    bool rightAscensionSetError; ///< Attempt was made to set an invalid right ascension value (measurment unit is [flag])
    bool questindexError; ///< Set when the Quest algorithm receives invalid data (measurment unit is [flag])
    bool rateExceeded; ///< Maximum change in atttitude between sequential readings were exceeded (measurment unit is [flag])
    bool flashInvalidAreaError; ///< Flash invalid area error (measurment unit is [flag])
    bool flashLockedError; ///< Flash locked error (measurment unit is [flag])
    bool flashTimeoutError; ///< Flash timeout error (measurment unit is [flag])
    bool flashUnalignedError; ///< Flash unaligned error (measurment unit is [flag])
} CUBESTAR3_LogStatus_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Max stars message structure.
 * @details
 *   Max stars
 ******************************************************************************/
typedef struct{
    uint8_t maxStars; ///< Maximum number of stars which can be detected (measurment unit is [stars])
    uint8_t maxInvalidStars; ///< Maximum number of invalid stars which can be detected (measurment unit is [stars])
    uint8_t maxNoise; ///< Max amount of noise which can be detected (measurment unit is [noise])
} CUBESTAR3_MaxStars_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Performance parameters message structure.
 * @details
 *   Performance parameters
 ******************************************************************************/
typedef struct{
    uint8_t numStarsDetected; ///< Number of stars detected (measurment unit is [stars])
    uint8_t starImageNoise; ///< Star image noise (measurment unit is [noise])
    uint8_t invalidStars; ///< Amount of invalid stars detected (measurment unit is [Invalid stars])
    uint8_t numberOfStarsID; ///< Number of stars identified (measurment unit is [stars])
    CUBESTAR3_IDModeVal_t idmode; ///< Identification mode (measurment unit is [ID mode])
    uint8_t imageDarkValue; ///< The avgerage value of center line in image (measurment unit is [8-bit pixel value])
    bool imageCaptureSuccess; ///< Image Capture Success (measurment unit is [flag])
    bool detectionSuccess; ///< Detection Success (measurment unit is [flag])
    bool identificationSuccess; ///< Identification Success (measurment unit is [flag])
    bool attitudeSuccess; ///< Attitude Success (measurment unit is [flag])
    bool processingTimeError; ///< Processing time Error (measurment unit is [flag])
    bool maxStarsDetected; ///< Max Stars Detected (measurment unit is [flag])
    bool lessThanThreeStarsInFoV; ///< Less than three stars in FoV (measurment unit is [flag])
    bool commsError; ///< Comms error (measurment unit is [flag])
} CUBESTAR3_PerformanceParameters_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Power switch status message structure.
 * @details
 *   Status of power switch. 1 = on, 0 = off.
 ******************************************************************************/
typedef struct{
    uint8_t status; ///< Power switch status. 1 = on, 0 = off. (measurment unit is [status])
    uint16_t current; ///< Current (measurment unit is [mA])
    uint16_t maxCurrent; ///< Max Current (measurment unit is [mA])
    uint16_t minCurrent; ///< Min Current (measurment unit is [mA])
} CUBESTAR3_PowerStatus_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Principal point message structure.
 * @details
 *   Principal point
 ******************************************************************************/
typedef struct{
    float cx; ///< X-coordinate pixel coordinates (measurment unit is [pixels])
    float cy; ///< Y-coordinate pixel coordinates (measurment unit is [pixels])
} CUBESTAR3_PrincipalPoint_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Quaternions message structure.
 * @details
 *   Estimated attitude in Quaternions
 ******************************************************************************/
typedef struct{
    double qbar0; ///< First vector component
    double qbar1; ///< Second vector component
    double qbar2; ///< Third vector component
    double qbar3; ///< Fourth vector component
} CUBESTAR3_Quaternion_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Results of important counter message structure.
 * @details
 *   Results of important counter
 ******************************************************************************/
typedef struct{
    uint8_t darkValue; ///< Image dark value (measurment unit is [pixel value])
    uint8_t detected; ///< Number of strars detected (measurment unit is [stars])
    uint8_t invalid; ///< Number of invalid stars detected (measurment unit is [invalid stars])
    uint8_t noise; ///< Amount of Noise detected (measurment unit is [noise])
    uint8_t iDMode; ///< ID mode (measurment unit is [IDmode])
    uint8_t iD; ///< Number of stars identified (measurment unit is [stars])
} CUBESTAR3_Results_t;

/***************************************************************************//**
 * @brief
 *   CubeStar detection region  message structure.
 * @details
 *   Set detection region
 ******************************************************************************/
typedef struct{
    uint8_t stepSize; ///< Step size (measurment unit is [pixels]. valid range is between 0 pixels and 10 pixels)
    uint16_t xstart; ///< Start of x-axis search region (measurment unit is [pixel]. valid range is between 0 pixel and 343 pixel)
    uint16_t xend; ///< End of x-axis search region (measurment unit is [pixel]. valid range is between 936 pixel and 1279 pixel)
    uint16_t ystart; ///< Start of y-axis search region (measurment unit is [pixel]. valid range is between 7 pixel and 96 pixel)
    uint16_t yend; ///< End of y-axis search region (measurment unit is [pixel]. valid range is between 943 pixel and 1030 pixel)
} CUBESTAR3_setDetectionRegion_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Threshold values message structure.
 * @details
 *   Set new threshold values
 ******************************************************************************/
typedef struct{
    uint8_t detectionThreshold; ///< Detection threshold  (measurment unit is [pixel value])
    uint8_t starThreshold; ///< Star threshold  (measurment unit is [pixel value])
} CUBESTAR3_setDetectionThresholds_t;

/***************************************************************************//**
 * @brief
 *   CubeStar detection variables message structure.
 * @details
 *   Set new detection variables
 ******************************************************************************/
typedef struct{
    uint8_t gridSize; ///< Centroiding grid size (valid range is between 0  and 15 )
    uint8_t maxStars; ///< Maximum stars (measurment unit is [stars]. valid range is between 0 stars and 99 stars)
    uint8_t maxInvalidStars; ///< Maximum number of invalid stars (measurment unit is [invalidStars]. valid range is between 0 invalidStars and 15 invalidStars)
    uint8_t maxNoise; ///< Maximum amount of Noise (measurment unit is [noise])
} CUBESTAR3_setDetectionVariables_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Focal length components  message structure.
 * @details
 *   Set new focal length components
 ******************************************************************************/
typedef struct{
    float fx; ///< Fx component (measurment unit is [pixels])
    float fy; ///< Fy component  (measurment unit is [pixels])
} CUBESTAR3_setFocalLengthComponents_t;

/***************************************************************************//**
 * @brief
 *   CubeStar ID mode to tracking message structure.
 * @details
 *   Set Identification mode to tracking
 ******************************************************************************/
typedef struct{
    float rightAscension; ///< Right Ascension (measurment unit is [radians])
    float declination; ///< Declination (measurment unit is [radians])
} CUBESTAR3_setIDModeTracking_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Principal point coordinates message structure.
 * @details
 *   Set Principal point coordinates
 ******************************************************************************/
typedef struct{
    float cx; ///< The Cx component  (measurment unit is [pixels]. valid range is between 0 pixels and 1280 pixels)
    float cy; ///< The Cy component (measurment unit is [pixels]. valid range is between 7 pixels and 1030 pixels)
} CUBESTAR3_setPrincipalPoint_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Radial distortion gains message structure.
 * @details
 *   Set radial distortion gains K1 and K2
 ******************************************************************************/
typedef struct{
    float k1; ///< K1 radial component (measurment unit is [Gain])
    float k2; ///< K2 radial component (measurment unit is [Gain])
} CUBESTAR3_setRadialDistortionGains_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Min and max pixels for a Star  message structure.
 * @details
 *   Set new min and max pixels of a Star 
 ******************************************************************************/
typedef struct{
    uint8_t minPixels; ///< The minimum pixels to form a star (measurment unit is [pixels]. valid range is between 1 pixels and 100 pixels)
    uint8_t maxPixels; ///< The maximum pixels to form a star (measurment unit is [pixels]. valid range is between 1 pixels and 100 pixels)
} CUBESTAR3_setStarPixels_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Tangential distortion gains message structure.
 * @details
 *   Set tangential distortion gains P1 and P2
 ******************************************************************************/
typedef struct{
    float p1; ///< P1 tangential component (measurment unit is [Gain])
    float p2; ///< P2 tangential component (measurment unit is [Gain])
} CUBESTAR3_setTangentalDistortionGains_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Right ascension and declination message structure.
 * @details
 *   Attitude in right ascension and declination
 ******************************************************************************/
typedef struct{
    float declination; ///< Declination (measurment unit is [radians])
    float rightAscension; ///< Right ascension (measurment unit is [radians])
} CUBESTAR3_SphereicalCoordinates_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Star 1 vectors message structure.
 * @details
 *   Star 1 vectors
 ******************************************************************************/
typedef struct{
    uint16_t s1CentX; ///< Star 1 centroid X-coordinate (measurment unit is [pixel position])
    uint16_t s1CentY; ///< Star 1 centroid Y-coordinate (measurment unit is [pixel position])
    uint16_t s1Mag; ///< Star 1 sensor magnitude (measurment unit is [sum of pixels])
    double s1VBX; ///< Star 1 X-component body vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s1VBY; ///< Star 1 Y-component body vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s1VBZ; ///< Star 1 Z-component body vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s1VIX; ///< Star 1 X-component of inertial vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s1VIY; ///< Star 1 Y-component of inertial vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s1VIZ; ///< Star 1 Z-component of inertial vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    uint8_t s1Conf; ///< Star 1 confidence (measurment unit is [percentage])
    uint16_t s1CatNum; ///< Star 1 catalogue number (measurment unit is [Catalogue number])
} CUBESTAR3_Star1Vectors_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Star 2 vectors message structure.
 * @details
 *   Star 2 vectors
 ******************************************************************************/
typedef struct{
    uint16_t s2CentX; ///< Star 2 centroid X-coordinate (measurment unit is [pixel position])
    uint16_t s2CentY; ///< Star 2 centroid Y-coordinate (measurment unit is [pixel position])
    uint16_t s2Mag; ///< Star 2 sensor magnitude (measurment unit is [sum of pixels])
    double s2VBX; ///< Star 2 X-component body vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s2VBY; ///< Star 2 Y-component body vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s2VBZ; ///< Star 2 Z-component body vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s2VIX; ///< Star 2 X-component of inertial vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s2VIY; ///< Star 2 Y-component of inertial vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s2VIZ; ///< Star 2 Z-component of inertial vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    uint8_t s2Conf; ///< Star 2 confidence (measurment unit is [percentage])
    uint16_t s2CatNum; ///< Star 2 catalogue number (measurment unit is [catalogue number])
} CUBESTAR3_Star2Vectors_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Star 3 vectors message structure.
 * @details
 *   Star 3 Vectors
 ******************************************************************************/
typedef struct{
    uint16_t s3CentX; ///< Star 3 centroid X-coordinate (measurment unit is [pixel position])
    uint16_t s3CentY; ///< Star 3 centroid Y-coordinate (measurment unit is [pixel position])
    uint16_t s3Mag; ///< Star 3 sensor magnitude (measurment unit is [sum of pixels])
    double s3VBX; ///< Star 3 X-component body vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s3VBY; ///< Star 3 Y-component body vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s3VBZ; ///< Star 3 Z-component body vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s3VIX; ///< Star 3 X-component of inertial vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s3VIY; ///< Star 3 Y-component of inertial vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    double s3VIZ; ///< Star 3 Z-component of inertial vector (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    uint8_t s3Conf; ///< Star 3 confidence (measurment unit is [percentage])
    uint16_t s3CatNum; ///< Star 3 catalogue number (measurment unit is [Catalogue number])
} CUBESTAR3_Star3Vectors_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Star details message structure.
 * @details
 *   Star details
 ******************************************************************************/
typedef struct{
    uint8_t starNumber; ///< Star Number (measurment unit is [star mumber])
    float cCx; ///< Corrected centroid x-axis (measurment unit is [pixel position])
    float cCy; ///< Corrected centroid y-axis (measurment unit is [pixel position])
    int16_t vbx; ///< Body vector x component (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    int16_t vby; ///< Body vector y component (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    int16_t vbz; ///< Body vector z component (measurment unit is [unit vector component]. valid range is between -1 unit vector component and 1 unit vector component)
    uint16_t iD; ///< Star ID (measurment unit is [catalogue ID])
    uint8_t validationVote; ///< validation vote (measurment unit is [votes])
    float confidance; ///< confidance (measurment unit is [percentage])
} CUBESTAR3_StarDetails_t;

/***************************************************************************//**
 * @brief
 *   CubeStar min and max pixels of star message structure.
 * @details
 *   Min and max pixels of star 
 ******************************************************************************/
typedef struct{
    uint8_t minPixels; ///< The minimum pixels required to be considered a star. (measurment unit is [8-bit pixel])
    uint8_t maxPixels; ///< The maximum pixels which will be considered to be a star.   (measurment unit is [8-bit pixel])
} CUBESTAR3_StarPixels_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Star positions message structure.
 * @details
 *   Star position on image
 ******************************************************************************/
typedef struct{
    float x_Coordinate; ///< The x-axis coordinate of star (measurment unit is [pixels])
    float y_Coordinate; ///< The y-axis coordinate of star (measurment unit is [pixels])
    float x_CorrectedCoordinate; ///< X distortion corrected coordinate (measurment unit is [pixels])
    float y_CorrectedCoordinate; ///< Y distortion corrected coordinate (measurment unit is [pixels])
    uint8_t starNumber; ///< Number of the detected star (measurment unit is [star number])
    uint8_t size; ///< The size of the star in pixels (measurment unit is [pixels])
    uint16_t intensity; ///< The intensity of the star (measurment unit is [sum of pixels])
} CUBESTAR3_StarPositions_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Start-up and main loop time message structure.
 * @details
 *   Start-up and main loop time
 ******************************************************************************/
typedef struct{
    uint16_t startupTime; ///< Start up time (measurment unit is [ms])
    uint16_t loopTime; ///< Main Loop execution time (measurment unit is [ms])
    uint16_t maxLoopTime; ///< Max main loop execution time (measurment unit is [ms])
} CUBESTAR3_StartAndLoopTime_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Timing summary message structure.
 * @details
 *   Timing summary
 ******************************************************************************/
typedef struct{
    uint16_t imageCaptureTime; ///< Image capture time (measurment unit is [ms])
    uint16_t detectionTime; ///< Detection time (measurment unit is [ms])
    uint16_t identificationTime; ///< Identification time (measurment unit is [ms])
} CUBESTAR3_TimingSummary_t;

/***************************************************************************//**
 * @brief
 *   CubeStar Write to image sensor register message structure.
 * @details
 *   Write to Image sensor register
 ******************************************************************************/
typedef struct{
    uint8_t reg; ///< Register
    uint8_t dataH; ///< Data High
    uint8_t dataL; ///< Data Low
} CUBESTAR3_WriteTo_IS_Register_t;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

CUBELIB_Result_t CUBESTAR3_ReqAttitudeDataTlm(uint8_t nodeid, CUBESTAR3_AttitudeData_t* attitudeData);

CUBELIB_Result_t CUBESTAR3_ReqAttitudeTimingTlm(uint8_t nodeid, CUBESTAR3_AttitudeTiming_t* attitudeTiming);

CUBELIB_Result_t CUBESTAR3_ReqBestStarIndexTlm(uint8_t nodeid, CUBESTAR3_BestStarIndex_t* bestStarIndex);

CUBELIB_Result_t CUBESTAR3_ReqBestStarSelectionTimeTlm(uint8_t nodeid, CUBESTAR3_BestStarSelectionTime_t* bestStarSelectionTime);

CUBELIB_Result_t CUBESTAR3_ReqBodyUnitVectorsTlm(uint8_t nodeid, CUBESTAR3_BodyUnitVectors_t* bodyUnitVectors);

CUBELIB_Result_t CUBESTAR3_ReqCameraSetupTlm(uint8_t nodeid, CUBESTAR3_CameraSetup_t* cameraSetup);

CUBELIB_Result_t CUBESTAR3_ReqCameraTimingTlm(uint8_t nodeid, CUBESTAR3_CameraTiming_t* cameraTiming);

CUBELIB_Result_t CUBESTAR3_SendCaptureAndProcessCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendCaptureImageCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendCaptureTestPaternCmd(uint8_t nodeid, CUBESTAR3_TestPatternType_t testPaternType);

CUBELIB_Result_t CUBESTAR3_ReqCentroidGridTlm(uint8_t nodeid, uint8_t* gridSize);

CUBELIB_Result_t CUBESTAR3_SendClearConfigCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendClearErrorFlagsCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendClearWDGResetCounterCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_ReqDetectionRegionTlm(uint8_t nodeid, CUBESTAR3_DetectionRegion_t* detectionRegion);

CUBELIB_Result_t CUBESTAR3_ReqDetectionSummaryTlm(uint8_t nodeid, CUBESTAR3_DetectionSummary_t* detectionSummary);

CUBELIB_Result_t CUBESTAR3_ReqDetectionThresholdValuesTlm(uint8_t nodeid, CUBESTAR3_DetectionThresholdValues_t* detectionThresholdValues);

CUBELIB_Result_t CUBESTAR3_ReqDetectionTimingOneTlm(uint8_t nodeid, CUBESTAR3_DetectionTimingOne_t* detectionTimingOne);

CUBELIB_Result_t CUBESTAR3_ReqDetectionTimingTwoTlm(uint8_t nodeid, CUBESTAR3_DetectionTimingTwo_t* detectionTimingTwo);

CUBELIB_Result_t CUBESTAR3_SendDetectStarsCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_ReqDistortionCoefTlm(uint8_t nodeid, CUBESTAR3_DistortionCoef_t* distortionCoef);

CUBELIB_Result_t CUBESTAR3_ReqErrorFlagsTlm(uint8_t nodeid, CUBESTAR3_ErrorFlags_t* errorFlags);

CUBELIB_Result_t CUBESTAR3_SendEstimateAttitudeCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_ReqExposureTlm(uint8_t nodeid, uint16_t* exposure);

CUBELIB_Result_t CUBESTAR3_ReqExtendedIdentificationTlm(uint8_t nodeid, CUBESTAR3_ExtendedIdentification_t* extendedIdentification);

CUBELIB_Result_t CUBESTAR3_ReqFocalLengthDetailsTlm(uint8_t nodeid, CUBESTAR3_FocalLengthDetails_t* focalLengthDetails);

CUBELIB_Result_t CUBESTAR3_ReqIDDistanceMarginTlm(uint8_t nodeid, double* iDmargin);

CUBELIB_Result_t CUBESTAR3_ReqIdentificationTlm(uint8_t nodeid, CUBESTAR3_Identification_t* identification);

CUBELIB_Result_t CUBESTAR3_ReqIDModeTlm(uint8_t nodeid, CUBESTAR3_IDModeVal_t* iDMode);

CUBELIB_Result_t CUBESTAR3_SendIDStarsCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_ReqIDStarsDetailsTlm(uint8_t nodeid, CUBESTAR3_IDStarsDetails_t* iDStarsDetails);

CUBELIB_Result_t CUBESTAR3_ReqIDTimingOneTlm(uint8_t nodeid, CUBESTAR3_IDTimingOne_t* iDTimingOne);

CUBELIB_Result_t CUBESTAR3_ReqIDTimingThreeTlm(uint8_t nodeid, CUBESTAR3_IDTimingThree_t* iDTimingThree);

CUBELIB_Result_t CUBESTAR3_ReqIDTimingTwoTlm(uint8_t nodeid, CUBESTAR3_IDTimingTwo_t* iDTimingTwo);

CUBELIB_Result_t CUBESTAR3_ReqImageBlockTlm(uint8_t nodeid, uint8_t* imageBlock);

CUBELIB_Result_t CUBESTAR3_SendImageBlockSetCmd(uint8_t nodeid, uint16_t blockNumber, CUBESTAR3_BlockSize_t blockSize);

CUBELIB_Result_t CUBESTAR3_ReqImageSetupTlm(uint8_t nodeid, CUBESTAR3_ImageSetup_t* imageSetup);

CUBELIB_Result_t CUBESTAR3_ReqInertialUnitVectorsTlm(uint8_t nodeid, CUBESTAR3_InertialUnitVectors_t* inertialUnitVectors);

CUBELIB_Result_t CUBESTAR3_ReqIS_RegisterTlm(uint8_t nodeid, CUBESTAR3_IS_Register_t* iS_Register);

CUBELIB_Result_t CUBESTAR3_ReqLogStatusTlm(uint8_t nodeid, CUBESTAR3_LogStatus_t* logStatus);

CUBELIB_Result_t CUBESTAR3_ReqMaxStarsTlm(uint8_t nodeid, CUBESTAR3_MaxStars_t* maxStars);

CUBELIB_Result_t CUBESTAR3_SendMCUResetCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_ReqNumIdStarsTlm(uint8_t nodeid, uint8_t* numIdStars);

CUBELIB_Result_t CUBESTAR3_ReqPerformanceParametersTlm(uint8_t nodeid, CUBESTAR3_PerformanceParameters_t* performanceParameters);

CUBELIB_Result_t CUBESTAR3_ReqPowerStatusTlm(uint8_t nodeid, CUBESTAR3_PowerStatus_t* powerStatus);

CUBELIB_Result_t CUBESTAR3_ReqPrincipalPointTlm(uint8_t nodeid, CUBESTAR3_PrincipalPoint_t* principalPoint);

CUBELIB_Result_t CUBESTAR3_SendProcessImageCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_ReqQuaternionTlm(uint8_t nodeid, CUBESTAR3_Quaternion_t* quaternion);

CUBELIB_Result_t CUBESTAR3_SendReadConfigCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendReadFrom_IS_RegisterCmd(uint8_t nodeid, uint8_t reg);

CUBELIB_Result_t CUBESTAR3_SendResetCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_ReqResultsTlm(uint8_t nodeid, CUBESTAR3_Results_t* results);

CUBELIB_Result_t CUBESTAR3_SendSaveConfigCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendSelectBestStarsCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendsetDetectionRegionCmd(uint8_t nodeid, uint8_t stepSize, uint16_t xstart, uint16_t xend, uint16_t ystart, uint16_t yend);

CUBELIB_Result_t CUBESTAR3_SendsetDetectionThresholdsCmd(uint8_t nodeid, uint8_t detectionThreshold, uint8_t starThreshold);

CUBELIB_Result_t CUBESTAR3_SendsetDetectionVariablesCmd(uint8_t nodeid, uint8_t gridSize, uint8_t maxStars, uint8_t maxInvalidStars, uint8_t maxNoise);

CUBELIB_Result_t CUBESTAR3_SendsetExposureCmd(uint8_t nodeid, uint16_t exposure);

CUBELIB_Result_t CUBESTAR3_SendsetFocalLengthCmd(uint8_t nodeid, float focalLength);

CUBELIB_Result_t CUBESTAR3_SendsetFocalLengthComponentsCmd(uint8_t nodeid, float fx, float fy);

CUBELIB_Result_t CUBESTAR3_SendsetIDDistanceMarginCmd(uint8_t nodeid, double iDMargin);

CUBELIB_Result_t CUBESTAR3_SendsetIDModeCmd(uint8_t nodeid, CUBESTAR3_Mode_t idMode);

CUBELIB_Result_t CUBESTAR3_SendsetIDModeTrackingCmd(uint8_t nodeid, float rightAscension, float declination);

CUBELIB_Result_t CUBESTAR3_SendsetPrincipalPointCmd(uint8_t nodeid, float cx, float cy);

CUBELIB_Result_t CUBESTAR3_SendsetRadialDistortionGainsCmd(uint8_t nodeid, float k1, float k2);

CUBELIB_Result_t CUBESTAR3_SendsetStarPixelsCmd(uint8_t nodeid, uint8_t minPixels, uint8_t maxPixels);

CUBELIB_Result_t CUBESTAR3_SendsetTangentalDistortionGainsCmd(uint8_t nodeid, float p1, float p2);

CUBELIB_Result_t CUBESTAR3_SendsetTimerTimeoutCmd(uint8_t nodeid, uint8_t timeout);

CUBELIB_Result_t CUBESTAR3_ReqSphereicalCoordinatesTlm(uint8_t nodeid, CUBESTAR3_SphereicalCoordinates_t* sphereicalCoordinates);

CUBELIB_Result_t CUBESTAR3_ReqSRAMTestResultsTlm(uint8_t nodeid, uint8_t* sramTestResults);

CUBELIB_Result_t CUBESTAR3_ReqStar1VectorsTlm(uint8_t nodeid, CUBESTAR3_Star1Vectors_t* star1Vectors);

CUBELIB_Result_t CUBESTAR3_ReqStar2VectorsTlm(uint8_t nodeid, CUBESTAR3_Star2Vectors_t* star2Vectors);

CUBELIB_Result_t CUBESTAR3_ReqStar3VectorsTlm(uint8_t nodeid, CUBESTAR3_Star3Vectors_t* star3Vectors);

CUBELIB_Result_t CUBESTAR3_ReqStarDetailsTlm(uint8_t nodeid, CUBESTAR3_StarDetails_t* starDetails);

CUBELIB_Result_t CUBESTAR3_ReqStarPixelsTlm(uint8_t nodeid, CUBESTAR3_StarPixels_t* starPixels);

CUBELIB_Result_t CUBESTAR3_ReqStarPositionsTlm(uint8_t nodeid, CUBESTAR3_StarPositions_t* starPositions);

CUBELIB_Result_t CUBESTAR3_ReqStartAndLoopTimeTlm(uint8_t nodeid, CUBESTAR3_StartAndLoopTime_t* startAndLoopTime);

CUBELIB_Result_t CUBESTAR3_SendStreamDownImageCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_ReqTaskStatusTlm(uint8_t nodeid, CUBESTAR3_TaskStatusVal_t* taskStatus);

CUBELIB_Result_t CUBESTAR3_ReqTcmdProcessedTlm(uint8_t nodeid, uint8_t* processed);

CUBELIB_Result_t CUBESTAR3_SendTestSRAMCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendTestWDGCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_ReqTimerTimeoutTlm(uint8_t nodeid, uint8_t* timeout);

CUBELIB_Result_t CUBESTAR3_ReqTimingSummaryTlm(uint8_t nodeid, CUBESTAR3_TimingSummary_t* timingSummary);

CUBELIB_Result_t CUBESTAR3_SendTogglePowerSWCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendTriggerCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendUploadImageCmd(uint8_t nodeid);

CUBELIB_Result_t CUBESTAR3_SendWriteTo_IS_RegisterCmd(uint8_t nodeid, uint8_t reg, uint8_t dataH, uint8_t dataL);


#endif  // define __CUBESTAR33_H

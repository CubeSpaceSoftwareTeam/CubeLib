/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef __CUBEACP3_H
#define __CUBEACP3_H

#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>

#include "cubelib.h"

#ifdef __cplusplus
extern "C" {
#endif

/***************************************************************************//**
* @addtogroup CubeComponents
* @{
******************************************************************************/

/***************************************************************************//**
* @addtogroup CubeAcp
* @brief CubeAcp Interface API
* @{
******************************************************************************/

/// CubeAcp Telemetry enumeration
typedef enum {
    CubeAcp_AcpLoopState = 220, ///< Returns information about the ACP loop
    CubeAcp_ActuatorCmd = 192, ///< Actuator commands
    CubeAcp_AdcsConfig = 206, ///< Current configuration
    CubeAcp_AdcsExecTimes = 196, ///< Returns information about execution times of ACP functions
    CubeAcp_AdcsMeasure = 191, ///< Calibrated sensor measurements
    CubeAcp_AdcsMiscCurrents = 198, ///< CubeStar and Torquer current measurements
    CubeAcp_AdcsPower = 197, ///< Control power to selected components
    CubeAcp_AdcsPowerMeasure = 195, ///< Power and temperature measurements
    CubeAcp_AdcsState = 190, ///< Current ADCS state
    CubeAcp_AdcsTemperatures1 = 174, ///< Magnetometer + MCU temperature measurements
    CubeAcp_AdcsTemperatures2 = 175, ///< Rate sensor temperatures
    CubeAcp_BlockChecksum = 246, ///< File upload Block CRC16 Checksum
    CubeAcp_BootIndexStatus = 130, ///< Current selected boot index and status of last boot
    CubeAcp_Cache = 131, ///< Cache enabled state
    CubeAcp_CmdAttitude = 199, ///< Commanded attitude angles
    CubeAcp_CmdTrackingTarget = 200, ///< Target reference for tracking control mode
    CubeAcp_CoarseSunVec = 152, ///< Measured coarse sun vector
    CubeAcp_CommsStatus = 144, ///< Communication status - includes command and telemetry counters and error flags
    CubeAcp_ConversionProgress = 133, ///< Conversion progress
    CubeAcp_CubeACPState = 135, ///< Contains flags regarding the state of the ACP
    CubeAcp_CubeControlCurrents = 172, ///< CubeControl current measurements
    CubeAcp_CubeSenseCurrents = 171, ///< CubeSense current measurements
    CubeAcp_CurrentAdcsState = 145, ///< Current state of the Attitude Control Processor
    CubeAcp_DownloadBlockReady = 242, ///< Status about download block preparation
    CubeAcp_EdacErrors = 143, ///< EDAC Error Counters
    CubeAcp_EstimAttitude = 146, ///< Estimated attitude angles
    CubeAcp_EstimData = 193, ///< Estimation meta-data
    CubeAcp_EstimGyroBias = 161, ///< Estimated rate sensor bias
    CubeAcp_EstimQuaternion = 218, ///< Estimated quaternion set
    CubeAcp_EstimRates = 147, ///< Estimated angular rates relative to orbit reference frame
    CubeAcp_ExtendedIdentification = 132, ///< Boot And Running Program Status
    CubeAcp_FileDownload = 241, ///< File Download buffer 20-byte packet
    CubeAcp_FileInfo = 243, ///< File Information
    CubeAcp_FineSunVec = 153, ///< Measured fine sun vector
    CubeAcp_HoleMap1 = 247, ///< File Upload Hole Map 1
    CubeAcp_HoleMap2 = 248, ///< File Upload Hole Map 2
    CubeAcp_HoleMap3 = 249, ///< File Upload Hole Map 3
    CubeAcp_HoleMap4 = 250, ///< File Upload Hole Map 4
    CubeAcp_HoleMap5 = 251, ///< File Upload Hole Map 5
    CubeAcp_HoleMap6 = 252, ///< File Upload Hole Map 6
    CubeAcp_HoleMap7 = 253, ///< File Upload Hole Map 7
    CubeAcp_HoleMap8 = 254, ///< File Upload Hole Map 8
    CubeAcp_Identification = 128, ///< Identification information for this node
    CubeAcp_ImageSaveStatus = 233, ///< Status of Image Capture and Save Operation
    CubeAcp_InitializeUploadComplete = 244, ///< Initialize Upload Complete
    CubeAcp_InnovationVec = 162, ///< Estimation innovation vector
    CubeAcp_LastLogEvent = 141, ///< Last Logged Event (relative to pointer - adjusted via Advance and Reset TCs (3 & 4)
    CubeAcp_LatchupErrors = 142, ///< SRAM Latchup counters
    CubeAcp_LogSdConfig1 = 235, ///< Log selection and period for LOG1
    CubeAcp_LogSdConfig2 = 236, ///< Log selection and period for LOG2
    CubeAcp_LogUartConfig = 237, ///< Log selection and period for UART (unsolicited TLM)
    CubeAcp_MagField = 151, ///< Measured magnetic field vector
    CubeAcp_MagTorquerCmd = 157, ///< Magnetorquer commands
    CubeAcp_ModelMagVec = 159, ///< IGRF modelled magnetic field vector (orbit frame referenced)
    CubeAcp_ModelSunVec = 160, ///< Modelled sun vector (orbit frame referenced)
    CubeAcp_NadirVec = 154, ///< Measured nadir vector
    CubeAcp_OrbitParameters = 207, ///< SGP4 Orbit Parameters
    CubeAcp_PositionECEF = 219, ///< Satellite position in ECEF coordinates
    CubeAcp_PositionECI = 148, ///< Satellite position in ECI frame
    CubeAcp_PositionLLH = 150, ///< Satellite position in WGS-84 coordinate frame
    CubeAcp_QuaternionCovar = 164, ///< Quaternion covariance
    CubeAcp_QuaternionErrVec = 163, ///< Quaternion error vector
    CubeAcp_RateCovar = 165, ///< Angular rate covariance
    CubeAcp_RateSensor = 155, ///< Rate sensor measurements
    CubeAcp_RawCam1Sens = 167, ///< Cam1 sensor capture and detection result
    CubeAcp_RawCam2Sens = 166, ///< Cam2 sensor capture and detection result
    CubeAcp_RawCss1 = 168, ///< Raw CSS measurements 1 to 6
    CubeAcp_RawCss2 = 169, ///< Raw CSS measurements 7 to 10
    CubeAcp_RawGPS = 210, ///< Raw GPS measurements
    CubeAcp_RawGpsStatus = 176, ///< Raw GPS status
    CubeAcp_RawGpsTime = 177, ///< Raw GPS time
    CubeAcp_RawGpsX = 178, ///< Raw GPS X position and velocity (ECI referenced)
    CubeAcp_RawGpsY = 179, ///< Raw GPS Y position and velocity (ECI referenced)
    CubeAcp_RawGpsZ = 180, ///< Raw GPS Z position and velocity (ECI referenced)
    CubeAcp_RawMagnetometer = 170, ///< Raw magnetometer measurements
    CubeAcp_RawSensor = 194, ///< Raw sensor measurements
    CubeAcp_RawStarTracker = 211, ///< Raw Star Tracker Measurement
    CubeAcp_ReduntMagRaw = 215, ///< Redundant Magnetometer raw Measurements, temperature and magnetometer mode
    CubeAcp_SpeedCmd = 158, ///< Wheel speed commands
    CubeAcp_SramScrubSettings = 134, ///< SRAM scrubbing size
    CubeAcp_Star1Body = 181, ///< Star 1 Body Vector
    CubeAcp_Star1Orbit = 184, ///< Star 1 Orbit Vector
    CubeAcp_Star1Raw = 212, ///< Catalogue index and detected coordinates for star 1
    CubeAcp_Star2Body = 182, ///< Star 2 Body Vector
    CubeAcp_Star2Orbit = 185, ///< Star 2 Orbit Vector
    CubeAcp_Star2Raw = 213, ///< Catalogue index and detected coordinates for star 2
    CubeAcp_Star3Body = 183, ///< Star 3 Body Vector
    CubeAcp_Star3Orbit = 186, ///< Star 3 Orbit Vector
    CubeAcp_Star3Raw = 214, ///< Catalogue index and detected coordinates for star 3
    CubeAcp_StarMagnitude = 187, ///< Instrument magnitude of identified stars
    CubeAcp_StarPerformance = 188, ///< Performance parameters of star measurement
    CubeAcp_StarTiming = 189, ///< Timing information of star measurement
    CubeAcp_TelecommandAcknowledge = 240, ///< Telemetry frame with acknowledge status of the previously sent command
    CubeAcp_UnixTime = 140, ///< Current Unix Time
    CubeAcp_UnixTimeSave = 129, ///< Configuration settings for unixtime flash memory persistence
    CubeAcp_UploadBlockComplete = 245, ///< Finalize Upload Block Complete
    CubeAcp_VelocityECI = 149, ///< Satellite velocity in ECI frame
    CubeAcp_WheelCurrents = 173, ///< XYZ Wheel current measurement
    CubeAcp_WheelSpeed = 156, ///< Wheel speed measurement
} CUBEACP_Telemetry_t; 

/// AdcsRunMode enumeration
typedef enum {
    AdcsRunMode_AdcsOff = 0, ///< ADCS loop is inactive
    AdcsRunMode_AdcsEnabled = 1, ///< ADCS 1Hz loop is active
    AdcsRunMode_AdcsTriggered = 2, ///< ADCS will execute control loop only when triggered
    AdcsRunMode_AdcsSimulation = 3, ///< ADCS is in simulation mode
} CUBEACP_AdcsRunMode_t;

/// AxisSelect enumeration
typedef enum {
    AxisSelect_PosX = 0, ///< Positive X
    AxisSelect_NegX = 1, ///< Negative X
    AxisSelect_PosY = 2, ///< Positive Y
    AxisSelect_NegY = 3, ///< Negative Y
    AxisSelect_PosZ = 4, ///< Positive Z
    AxisSelect_NegZ = 5, ///< Negative Z
    AxisSelect_NotUsed = 6, ///< Not Used
} CUBEACP_AxisSelect_t;

/// BootCause enumeration
typedef enum {
    BootCause_Unexpected = 0, ///< Unexpected reset
    BootCause_TrxuvI2cError = 1, ///< 
    BootCause_CommsTimeout = 2, ///< Timeout due to lack of communications
    BootCause_CommandedMcuReset = 3, ///< Software commanded MCU reset
    BootCause_CommandedEpsReset = 4, ///< 
    BootCause_SramLatchup = 5, ///< Latchup detected in SRAM
} CUBEACP_BootCause_t;

/// BootProgramsList enumeration
typedef enum {
    BootProgramsList_RunBootloader = 0, ///< Bootloader
    BootProgramsList_RunInternalFlashProgram = 1, ///< Internal Flash Program
    BootProgramsList_RunEeprom = 2, ///< EEPROM
    BootProgramsList_RunExtFlash1 = 3, ///< External Flash Program 1
    BootProgramsList_RunExtFlash2 = 4, ///< External Flash Program 2
    BootProgramsList_RunExtFlash3 = 5, ///< External Flash Program 3
    BootProgramsList_RunExtFlash4 = 6, ///< External Flash Program 4
    BootProgramsList_RunExtFlash5 = 7, ///< External Flash Program 5
    BootProgramsList_RunExtFlash6 = 8, ///< External Flash Program 6
    BootProgramsList_RunExtFlash7 = 9, ///< External Flash Program 7
} CUBEACP_BootProgramsList_t;

/// BootStatus enumeration
typedef enum {
    BootStatus_BootNew = 0, ///< New Selection
    BootStatus_BootSuccess = 1, ///< Boot Success
    BootStatus_BootTry1 = 2, ///< 1 Failed boot attempt
    BootStatus_BootTry2 = 3, ///< 2 Failed boot attempts
    BootStatus_BootFail = 4, ///< 3 Failed boot attempts
} CUBEACP_BootStatus_t;

/// BusyStatus enumeration
typedef enum {
    BusyStatus_Idle = 0, ///< Idle
    BusyStatus_Waiting = 1, ///< Waiting to capture
    BusyStatus_Capturing = 2, ///< Capturing
    BusyStatus_Detecting = 3, ///< Detecting
} CUBEACP_BusyStatus_t;

/// CamSelect enumeration
typedef enum {
    CamSelect_CamCam1 = 0, ///< Cam1 camera
    CamSelect_CamCam2 = 1, ///< Cam2 camera
    CamSelect_CamStar = 2, ///< Star camera
} CUBEACP_CamSelect_t;

/// CaptureResult enumeration
typedef enum {
    CaptureResult_CaptureStartup = 0, ///< Start-up
    CaptureResult_CapturePending = 1, ///< Capture pending
    CaptureResult_CaptureSuccessOwn = 2, ///< Successfully captured (own SRAM)
    CaptureResult_CaptureSuccessShift = 3, ///< Successfully captured (Other SRAM)
    CaptureResult_CaptureTimout = 4, ///< Camera timout
    CaptureResult_CaptureSRAMErr = 5, ///< SRAM overcurrent
} CUBEACP_CaptureResult_t;

/// ConModeSelect enumeration
typedef enum {
    ConModeSelect_ConNone = 0, ///< No control
    ConModeSelect_ConBdot = 1, ///< Detumbling control
    ConModeSelect_ConYspin = 2, ///< Y-Thomson spin
    ConModeSelect_ConYwheelInit = 3, ///< Y-Wheel momentum stabilized - Initial Pitch Acquisition
    ConModeSelect_ConYwheel = 4, ///< Y-Wheel momentum stabilized - Steady State
    ConModeSelect_ConXYZwheel = 5, ///< XYZ-Wheel control
    ConModeSelect_ConRWSunTrack = 6, ///< Rwheel sun tracking control
    ConModeSelect_ConRWTargetTrack = 7, ///< Rwheel target tracking control
    ConModeSelect_ConVeryFastDetumbling = 8, ///< 10Hz Detumbling control within CubeControl
    ConModeSelect_ConFastDetumbling = 9, ///< Fast Detumbling control
    ConModeSelect_ConUser1 = 10, ///< User defined, or custom control mode 1
    ConModeSelect_ConUser2 = 11, ///< User defined, or custom control mode 2
    ConModeSelect_ConStopRW = 12, ///< Stop all R-wheels
    ConModeSelect_ConUser3 = 13, ///< User defined, or custom control mode 3
} CUBEACP_ConModeSelect_t;

/// DetectResult enumeration
typedef enum {
    DetectResult_DetectStartup = 0, ///< Start-up
    DetectResult_DetectNoDetect = 1, ///< No detection scheduled
    DetectResult_DetectPending = 2, ///< Detection pending
    DetectResult_DetectTooManyEdges = 3, ///< Nadir error - too many detected edges
    DetectResult_DetectTooFewEdges = 4, ///< Nadir error - not enought edges detected
    DetectResult_DetectBadFit = 5, ///< Nadir error - bad fit
    DetectResult_DetectSunNotFound = 6, ///< Sun error - sun not found
    DetectResult_DetectSuccess = 7, ///< Successful detection
} CUBEACP_DetectResult_t;

/// EstimModeSelect enumeration
typedef enum {
    EstimModeSelect_EstNone = 0, ///< No attitude estimation
    EstimModeSelect_EstMemsRate = 1, ///< MEMS rate sensing
    EstimModeSelect_EstMagRkf = 2, ///< Magnetometer rate filter
    EstimModeSelect_EstPitchRkf = 3, ///< Magnetometer rate filter with pitch estimation
    EstimModeSelect_EstTriad = 4, ///< Magnetometer and Fine-sun TRIAD algorithm
    EstimModeSelect_EstFullEkf = 5, ///< Full-state EKF
    EstimModeSelect_EstGyroEkf = 6, ///< MEMS gyro EKF
} CUBEACP_EstimModeSelect_t;

/// ExecutionWaypoints enumeration
typedef enum {
    ExecutionWaypoints_Init = 0, ///< Busy with initialization
    ExecutionWaypoints_Idle = 1, ///< Idle
    ExecutionWaypoints_SensorActuatorComms = 2, ///< Sensor/Actuator Communications
    ExecutionWaypoints_AdcsUpdate = 3, ///< ADCS Estimation & Control Update
    ExecutionWaypoints_PeripheralPowerSet = 4, ///< Perhipheral Power commands (over I2C)
    ExecutionWaypoints_SampleTemperature = 5, ///< CPU Temperature Sampling
    ExecutionWaypoints_ImageDownload = 6, ///< Image Download
    ExecutionWaypoints_ImageCompression = 7, ///< Image Compression
    ExecutionWaypoints_ImageSaveToSd = 8, ///< Saving Image to SD Card
    ExecutionWaypoints_Logging = 9, ///< Logging
    ExecutionWaypoints_LogCompression = 10, ///< Log File Compression
    ExecutionWaypoints_LogSaveToSd = 11, ///< Saving Log to SD Card
    ExecutionWaypoints_WritingToFlash = 12, ///< Writing to flash memory
} CUBEACP_ExecutionWaypoints_t;

/// FileType enumeration
typedef enum {
    FileType_Binary = 0, ///< Binary File
    FileType_EvtLog = 1, ///< Event Log File
    FileType_TlmLog = 2, ///< Telemetry Log File
    FileType_JpgImg = 3, ///< JPG Image File
    FileType_BmpImg = 4, ///< BMP Image File
    FileType_Payload1 = 5, ///< Payload1 File
    FileType_Payload2 = 6, ///< Payload2 File
    FileType_Payload3 = 7, ///< Payload3 File
    FileType_Payload4 = 8, ///< Payload4 File
    FileType_IndexFile = 15, ///< Index File
} CUBEACP_FileType_t;

/// FileUploadDestination enumeration
typedef enum {
    FileUploadDestination_UlEeprom = 2, ///< EEPROM
    FileUploadDestination_UlFlash1 = 3, ///< Flash program 1
    FileUploadDestination_UlFlash2 = 4, ///< Flash program 2
    FileUploadDestination_UlFlash3 = 5, ///< Flash program 3
    FileUploadDestination_UlFlash4 = 6, ///< Flash program 4
    FileUploadDestination_UlFlash5 = 7, ///< Flash program 5
    FileUploadDestination_UlFlash6 = 8, ///< Flash program 6
    FileUploadDestination_UlFlash7 = 9, ///< Flash program 7
    FileUploadDestination_UlSdUser1 = 10, ///< SD User file 1
    FileUploadDestination_UlSdUser2 = 11, ///< SD User file 2
    FileUploadDestination_UlSdUser3 = 12, ///< SD User file 3
    FileUploadDestination_UlSdUser4 = 13, ///< SD User file 4
    FileUploadDestination_UlSdUser5 = 14, ///< SD User file 5
    FileUploadDestination_UlSdUser6 = 15, ///< SD User file 6
    FileUploadDestination_UlSdUser7 = 16, ///< SD User file 7
    FileUploadDestination_UlSdUser8 = 17, ///< SD User file 8
} CUBEACP_FileUploadDestination_t;

/// GpsSolutionStatus enumeration
typedef enum {
    GpsSolutionStatus_SolutionComputed = 0, ///< Solution computed
    GpsSolutionStatus_InsufficientObs = 1, ///< Insufficient observations
    GpsSolutionStatus_NoConvergence = 2, ///< No convergence
    GpsSolutionStatus_Singularity = 3, ///< Singularity at parameters matrix
    GpsSolutionStatus_CovTrace = 4, ///< Covariance trace exceeds maximum
    GpsSolutionStatus_ColdStart = 5, ///< Not yet converged from cold start
    GpsSolutionStatus_VhLimit = 6, ///< Height or velocity limits exceeded
    GpsSolutionStatus_Variance = 7, ///< Variance exceeds limits
    GpsSolutionStatus_IntegrityWarning = 8, ///< Large residuals make position unreliable
    GpsSolutionStatus_Pending = 9, ///< Calculating comparison to user provided
    GpsSolutionStatus_InvalidFix = 10, ///< The fixed position is invalid
    GpsSolutionStatus_Unauthorized = 11, ///< Position type is unauthorized
} CUBEACP_GpsSolutionStatus_t;

/// ImSaveStatus enumeration
typedef enum {
    ImSaveStatus_ImgSaveNoError = 0, ///< No Error
    ImSaveStatus_CameraTimeout = 1, ///< Timeout waiting for sensor to become available
    ImSaveStatus_DownloadTimeout = 2, ///< Timeout waiting for next frame to become ready
    ImSaveStatus_DownloadChecksum = 3, ///< Checksum mismatch between donwloaded frame and unit frame
    ImSaveStatus_SdCardError = 4, ///< Error writing to SD card
} CUBEACP_ImSaveStatus_t;

/// ImSize enumeration
typedef enum {
    ImSize_Size0 = 0, ///< 1024 x 1024 pixels
    ImSize_Size1 = 1, ///< 512 x 512 pixels
    ImSize_Size2 = 2, ///< 256 x 256 pixels
    ImSize_Size3 = 3, ///< 128 x 128 pixels
    ImSize_Size4 = 4, ///< 64 x 64 pixels
} CUBEACP_ImSize_t;

/// JpgConvertResult enumeration
typedef enum {
    JpgConvertResult_NoConversion = 0, ///< Nothing Converted Yet
    JpgConvertResult_ConvertOk = 1, ///< Success
    JpgConvertResult_FileLoadError = 2, ///< File Load Error
    JpgConvertResult_BusyConverting = 3, ///< Busy
} CUBEACP_JpgConvertResult_t;

/// MagModeVal enumeration
typedef enum {
    MagModeVal_MainMagOnly = 0, ///< Only main magnetometer is sampled and used
    MagModeVal_RedMagOnly = 1, ///< Only redundant magnetometer is sampled and used
    MagModeVal_BothMagMainUsed = 2, ///< Both magnetometers are sampled but main is used
    MagModeVal_BothMagRedUsed = 3, ///< Both magnetometers are sampled but redundant is used
} CUBEACP_MagModeVal_t;

/// NadirResult enumeration
typedef enum {
    NadirResult_NadirNoError = 0, ///< No Error
    NadirResult_NadirTimeout = 1, ///< Camera timeout
    NadirResult_NadirOvercurrent = 4, ///< Nadir SRAM Overcurrent detected
    NadirResult_NadirTooManyEdges = 10, ///< Too many edges
    NadirResult_NadirNotEnoughEdges = 11, ///< Not enough edges
    NadirResult_NadirMatrixErr = 12, ///< Matrix Inversion Error
    NadirResult_NadirBadFit = 13, ///< Bad Horizon Fit
    NadirResult_NadirNoDetect = 255, ///< No detection performed
} CUBEACP_NadirResult_t;

/// PowerSelect enumeration
typedef enum {
    PowerSelect_PowOff = 0, ///< Permanently Off
    PowerSelect_PowOn = 1, ///< Permanently On
    PowerSelect_PowAuto = 2, ///< Power state depends on current control mode
    PowerSelect_PowSim = 3, ///< Simulate power control - Nodes are not actually enabled, but the ACP behaves as if they are. This setting is used for HIL simulations
} CUBEACP_PowerSelect_t;

/// ResetCause enumeration
typedef enum {
    ResetCause_PowerOnReset = 0, ///< Power-On Reset
    ResetCause_BrownOutRegulated = 1, ///< Brown-Out Detected on Regulated Power
    ResetCause_BrownOutUnregulated = 2, ///< Brown-Out Detected on Unregulated Power
    ResetCause_ExternalWatchdog = 3, ///< External Watchdog Reset
    ResetCause_ExternalReset = 4, ///< External Reset
    ResetCause_WatchdogReset = 5, ///< Watchdog Reset
    ResetCause_LockupSystemReset = 6, ///< Lockup System Reset
    ResetCause_LockupReset = 7, ///< Lockup Reset
    ResetCause_SystemReqReset = 8, ///< System Request Reset
    ResetCause_BackupBrownOut = 9, ///< Backup domain brown-out reset
    ResetCause_BackupModeRst = 10, ///< Backup mode reset
    ResetCause_BackupModeRST_BackupBrownOutVddRegulated = 11, ///< Backup Mode reset and Backup domain brown-out on VDD regulated
    ResetCause_BackupModeRST_BackupBrownOutVddRegulated_BrownOutRegulated = 12, ///< Backup Mode reset and Backup domain brown-out on VDD regulated and brown out on regulated
    ResetCause_BackupModeRST_WatchdogReset = 13, ///< Backup mode reset and Watchdog reset
    ResetCause_BackupBrownOutBuvin_SystemReqReset = 14, ///< Backup Domain brown-out on BUVIN and System request reset.
    ResetCause_Unknown = 15, ///< Unkown Reset Cause
} CUBEACP_ResetCause_t;

/// SdLogSelect enumeration
typedef enum {
    SdLogSelect_SdLogPrimary = 0, ///< Use Primary (on-board) SD card for log file
    SdLogSelect_SdLogSecondary = 1, ///< Use Secondary SD card for log file
} CUBEACP_SdLogSelect_t;

/// SramBank enumeration
typedef enum {
    SramBank_Sram1 = 1, ///< SRAM bank 1
    SramBank_Sram2 = 2, ///< SRAM bank 2
} CUBEACP_SramBank_t;

/// Stars enumeration
typedef enum {
    Stars_Zero = 0, ///< Zero
    Stars_One = 1, ///< One
    Stars_Two = 2, ///< Two
} CUBEACP_Stars_t;

/// SunResult enumeration
typedef enum {
    SunResult_SunNoError = 0, ///< No Error
    SunResult_SunTimeout = 1, ///< Camera timeout
    SunResult_SunOvercurrent = 4, ///< Sun SRAM Overcurrent detected
    SunResult_SunNotFound = 20, ///< Sun not found
    SunResult_SunNoDetect = 255, ///< No detection performed
} CUBEACP_SunResult_t;

/// TcErrorReason enumeration
typedef enum {
    TcErrorReason_NoError = 0, ///< No error
    TcErrorReason_InvalidTc = 1, ///< Invalid telecommand ID
    TcErrorReason_IncorrectLen = 2, ///< Incorrect TC parameter length
    TcErrorReason_IncorrectParams = 3, ///< Incorrect TC parameter value
} CUBEACP_TcErrorReason_t;

/*******************************************************************************
 *******************************   STRUCTS   ***********************************
 ******************************************************************************/

/***************************************************************************//**
 * @brief
 *    ACP Execution State message structure.
 * @details
 *   Returns information about the ACP loop
 ******************************************************************************/
typedef struct{
    uint16_t timeSinceLoopStart; ///< Time since the start of the current loop iteration (measurment unit is [ms])
    CUBEACP_ExecutionWaypoints_t currentExecutionPoint; ///< Indicates which part of the loop is currently executing
} CUBEACP_AcpLoopState_t;

/***************************************************************************//**
 * @brief
 *    Actuator Commands message structure.
 * @details
 *   Actuator commands
 ******************************************************************************/
typedef struct{
    int16_t torquerCmdX; ///< X Magnetorquer Commanded on-time (measurment unit is [10ms units])
    int16_t torquerCmdY; ///< Y Magnetorquer Commanded on-time (measurment unit is [10ms units])
    int16_t torquerCmdZ; ///< Z Magnetorquer Commanded on-time (measurment unit is [10ms units])
    int16_t speedCmdX; ///< X Wheel Speed (measurment unit is [rpm])
    int16_t speedCmdY; ///< Y Wheel Speed (measurment unit is [rpm])
    int16_t speedCmdZ; ///< Z Wheel Speed (measurment unit is [rpm])
} CUBEACP_ActuatorCmd_t;

/***************************************************************************//**
 * @brief
 *    ADCS Configuration message structure.
 * @details
 *   Current configuration
 ******************************************************************************/
typedef struct{
    CUBEACP_AxisSelect_t magtorq1; ///< Magnetorquer 1 Configuration
    CUBEACP_AxisSelect_t magtorq2; ///< Magnetorquer 2 Configuration
    CUBEACP_AxisSelect_t magtorq3; ///< Magnetorquer 3 Configuration
    CUBEACP_AxisSelect_t rW1Conf; ///< RW1 Configuration
    CUBEACP_AxisSelect_t rW2Conf; ///< RW2 Configuration
    CUBEACP_AxisSelect_t rW3Conf; ///< RW3 Configuration
    CUBEACP_AxisSelect_t rW4Conf; ///< RW4 or Momentum wheel Configuration
    CUBEACP_AxisSelect_t gyro1Conf; ///< Gyro1 Configuration
    CUBEACP_AxisSelect_t gyro2Conf; ///< Gyro2 Configuration
    CUBEACP_AxisSelect_t gyro3Conf; ///< Gyro3 Configuration
    CUBEACP_AxisSelect_t css1Conf; ///< CSS1 Configuration
    CUBEACP_AxisSelect_t css2Conf; ///< CSS2 Configuration
    CUBEACP_AxisSelect_t css3Conf; ///< CSS3 Configuration
    CUBEACP_AxisSelect_t css4Conf; ///< CSS4 Configuration
    CUBEACP_AxisSelect_t css5Conf; ///< CSS5 Configuration
    CUBEACP_AxisSelect_t css6Conf; ///< CSS6 Configuration
    CUBEACP_AxisSelect_t css7Conf; ///< CSS7 Configuration
    CUBEACP_AxisSelect_t css8Conf; ///< CSS8 Configuration
    CUBEACP_AxisSelect_t css9Conf; ///< CSS9 Configuration
    CUBEACP_AxisSelect_t css10Conf; ///< CSS10 Configuration
    double css1Scale; ///< CSS1 Relative Scaling Factor
    double css2Scale; ///< CSS2 Relative Scaling Factor
    double css3Scale; ///< CSS3 Relative Scaling Factor
    double css4Scale; ///< CSS4 Relative Scaling Factor
    double css5Scale; ///< CSS5 Relative Scaling Factor
    double css6Scale; ///< CSS6 Relative Scaling Factor
    double css7Scale; ///< CSS7 Relative Scaling Factor
    double css8Scale; ///< CSS8 Relative Scaling Factor
    double css9Scale; ///< CSS9 Relative Scaling Factor
    double css10Scale; ///< CSS10 Relative Scaling Factor
    uint8_t cssMinimum; ///< CSS Threshold
    double cam1Angle1; ///< Cam1 Sensor Mounting Transform Alpha Angle (measurment unit is [deg])
    double cam1Angle2; ///< Cam1 Sensor Mounting Transform Beta Angle (measurment unit is [deg])
    double cam1Angle3; ///< Cam1 Sensor Mounting Transform Gamma Angle (measurment unit is [deg])
    uint8_t cam1Threshold; ///< 
    bool cam1AutoAdj; ///< 0 = disabled and 1 = enabled
    uint16_t cam1Exposure; ///< exposure time register value
    double cam1BoreX; ///< X Pixel location of Cam1 boresight (measurment unit is [pixels])
    double cam1BoreY; ///< Y Pixel location of Cam1 boresight (measurment unit is [pixels])
    bool cam1Shift; ///< Use Cam2 processing chain for Cam1 detection
    double cam2Angle1; ///< Cam2 Sensor Mounting Transform Alpha Angle (measurment unit is [deg])
    double cam2Angle2; ///< Cam2 Sensor Mounting Transform Beta Angle (measurment unit is [deg])
    double cam2Angle3; ///< Cam2 Sensor Mounting Transform Gamma Angle (measurment unit is [deg])
    uint8_t cam2Threshold; ///< Cam2 detection threshold
    bool cam2AutoAdj; ///< 0 = disabled and 1 = enabled
    uint16_t cam2Exposure; ///< exposure time register value
    double cam2BoreX; ///< X Pixel location of Cam2 boresight (measurment unit is [pixels])
    double cam2BoreY; ///< Y Pixel location of Cam2 boresight (measurment unit is [pixels])
    bool cam2Shift; ///< Use Sun processing chain for Cam2 detection
    uint16_t maskArea1Xmin; ///< Minimum X of Area 1
    uint16_t maskArea1Xmax; ///< Maximum X of Area 1
    uint16_t maskArea1Ymin; ///< Minimum Y of Area 1
    uint16_t maskArea1Ymax; ///< Maximum Y of Area 1
    uint16_t maskArea2Xmin; ///< Minimum X of Area 2
    uint16_t maskArea2Xmax; ///< Maximum X of Area 2
    uint16_t maskArea2Ymin; ///< Minimum Y of Area 2
    uint16_t maskArea2Ymax; ///< Maximum Y of Area 2
    uint16_t maskArea3Xmin; ///< Minimum X of Area 3
    uint16_t maskArea3Xmax; ///< Maximum X of Area 3
    uint16_t maskArea3Ymin; ///< Minimum Y of Area 3
    uint16_t maskArea3Ymax; ///< Maximum Y of Area 3
    uint16_t maskArea4Xmin; ///< Minimum X of Area 4
    uint16_t maskArea4Xmax; ///< Maximum X of Area 4
    uint16_t maskArea4Ymin; ///< Minimum Y of Area 4
    uint16_t maskArea4Ymax; ///< Maximum Y of Area 4
    uint16_t maskArea5Xmin; ///< Minimum X of Area 5
    uint16_t maskArea5Xmax; ///< Maximum X of Area 5
    uint16_t maskArea5Ymin; ///< Minimum Y of Area 5
    uint16_t maskArea5Ymax; ///< Maximum Y of Area 5
    double magmAngle1; ///< Magnetometer Mounting Transform Alpha Angle (measurment unit is [deg])
    double magmAngle2; ///< Magnetometer Mounting Transform Beta Angle (measurment unit is [deg])
    double magmAngle3; ///< Magnetometer Mounting Transform Gamma Angle (measurment unit is [deg])
    double magmOffset1; ///< Magnetometer Channel 1 Offset
    double magmOffset2; ///< Magnetometer Channel 2 Offset
    double magmOffset3; ///< Magnetometer Channel 3 Offset
    double magmSens11; ///< Magnetometer Sensitivity Matrix S11
    double magmSens22; ///< Magnetometer Sensitivity Matrix S22
    double magmSens33; ///< Magnetometer Sensitivity Matrix S33
    double magmSens12; ///< Magnetometer Sensitivity Matrix S12
    double magmSens13; ///< Magnetometer Sensitivity Matrix S13
    double magmSens21; ///< Magnetometer Sensitivity Matrix S21
    double magmSens23; ///< Magnetometer Sensitivity Matrix S23
    double magmSens31; ///< Magnetometer Sensitivity Matrix S31
    double magmSens32; ///< Magnetometer Sensitivity Matrix S32
    double xRateOffset; ///< X-Rate Sensor Offset (measurment unit is [deg/s])
    double yRateOffset; ///< Y-Rate Sensor Offset (measurment unit is [deg/s])
    double zRateOffset; ///< Z-Rate Sensor Offset (measurment unit is [deg/s])
    uint8_t rateSensorMult; ///< Multiplier of rate sensor measurement
    double starAngle1; ///< StarTracker Mounting Transform Alpha Angle (measurment unit is [deg])
    double starAngle2; ///< StarTracker Mounting Transform Beta Angle (measurment unit is [deg])
    double starAngle3; ///< StarTracker Mounting Transform Gamma Angle (measurment unit is [deg])
    uint16_t starExposure; ///< exposure time register value
    uint8_t detectionThreshold; ///< StarTracker detection threshold
    uint8_t starThreshold; ///< StarTracker star threshold
    uint8_t maxStarMatched; ///< Maximum of stars that the star tracker will match
    uint8_t maxStarPixel; ///< Maximum pixels in a star
    uint8_t maxStarNoise; ///< Maximum star pixel noise
    uint8_t minStarPixel; ///< Minimum pixels in a star
    double starErrorMargin; ///< % Error margin of the star identification (measurment unit is [%])
    float starCentX; ///< Pixel centroid X (valid range is between -5000  and 5000 )
    float starCentY; ///< Pixel centroid Y (valid range is between -5000  and 5000 )
    double starFocal; ///< Star Tracker Focal Length (measurment unit is [mm])
    uint8_t syncDelay; ///< Synchronization delay within star Tracker
    float ks; ///< Detumbling Spin Gain (Ks) (valid range is between 0  and 10000 )
    float kd; ///< Detumbling Damping Gain (Kd) (valid range is between 0  and 10000 )
    double wy_ref; ///< Reference spin rate (wy-ref). Must always be smaller than 0 (measurment unit is [deg/s]. valid range is between -100000 deg/s and 0 deg/s)
    float kdf; ///< Fast BDot Detumbling Gain (valid range is between 0  and 100 )
    float kh; ///< Y-Momentum Control Gain (Kh) (valid range is between 0  and 10000 )
    float kn; ///< Y-momentum Nutation Damping Gain (Kn) (valid range is between 0  and 10000 )
    float kp1; ///< Y-momentum Proportional Gain (Kp1) (valid range is between 0  and 100 )
    float kd1; ///< Y-momentum Derivative Gain (Kd1) (valid range is between 0  and 100 )
    float h_ref; ///< Reference Wheel Momentum (H-ref). Must always be smaller than 0 (measurment unit is [Nms]. valid range is between -10 Nms and 0 Nms)
    float kp2; ///< RWheel Proportional Gain (Kp2) (valid range is between 0  and 100 )
    float kd2; ///< RWheel Derivative Gain (Kd2) (valid range is between 0  and 100 )
    float kp3; ///< Tracking Proportional Gain (Kp3) (valid range is between 0  and 100 )
    float kd3; ///< Tracking Derivative Gain (Kd3) (valid range is between 0  and 100 )
    float ki3; ///< Tracking Integral Gain (Ki3) (valid range is between 0  and 100 )
    float ixx; ///< Moment Of Inertia - Ixx (measurment unit is [kg.m^2]. valid range is between 0 kg.m^2 and 10 kg.m^2)
    float iyy; ///< Moment Of Inertia - Iyy (measurment unit is [kg.m^2]. valid range is between 0 kg.m^2 and 10 kg.m^2)
    float izz; ///< Moment Of Inertia - Izz (measurment unit is [kg.m^2]. valid range is between 0 kg.m^2 and 10 kg.m^2)
    float ixy; ///< Moment Of Inertia - Ixy (measurment unit is [kg.m^2]. valid range is between -10 kg.m^2 and 10 kg.m^2)
    float ixz; ///< Moment Of Inertia - Ixz (measurment unit is [kg.m^2]. valid range is between -10 kg.m^2 and 10 kg.m^2)
    float iyz; ///< Moment Of Inertia - Iyz (measurment unit is [kg.m^2]. valid range is between -10 kg.m^2 and 10 kg.m^2)
    float magRateNoise; ///< Magnetometer Rate Filter System Noise (valid range is between 0  and 100 )
    float ekfSysNoise; ///< EKF System Noise (valid range is between 0  and 100 )
    float cssNoise; ///< CSS Measurement Noise (valid range is between 0  and 100 )
    float sunNoise; ///< Sun Sensor Measurement Noise (valid range is between 0  and 100 )
    float nadirNoise; ///< Nadir Sensor Measurement Noise (valid range is between 0  and 100 )
    float magNoise; ///< Magnetometer Measurement Noise (valid range is between 0  and 100 )
    float starNoise; ///< Star Tracker Measurement Noise (valid range is between 0  and 100 )
    bool useSunEst; ///< Use Sun Sensor measurement in EKF
    bool useNadirEst; ///< Use Nadir Sensor measurement in EKF
    bool useCssEst; ///< Use CSS measurement in EKF
    bool useStarEst; ///< Use Star Tracker measurement in EKF
    CUBEACP_MagModeVal_t magMode; ///< Mode describing which magnetometer is used for estimation and control
    uint8_t cam1Cam2Period; ///< Cam1 and Cam2 sensor sampling period. Lower four bits are Cam1 period and upper four bits the Cam2 period. Setting period to zero for sensor will disable sampling of sensor. (measurment unit is [s])
} CUBEACP_AdcsConfig_t;

/***************************************************************************//**
 * @brief
 *    Adcs Execution Times message structure.
 * @details
 *   Returns information about execution times of ACP functions
 ******************************************************************************/
typedef struct{
    uint16_t timeAdcsUpdate; ///< Time to perform complete ADCS Update function (measurment unit is [ms])
    uint16_t timeSensorActuatorComms; ///< Time to perform Sensor/actuator communications (measurment unit is [ms])
    uint16_t timeSgp4; ///< Time to execute SGP4 propagator (measurment unit is [ms])
    uint16_t timeIgrf; ///< Time to execute IGRF computation (measurment unit is [ms])
} CUBEACP_AdcsExecTimes_t;

/***************************************************************************//**
 * @brief
 *    ADCS Measurements message structure.
 * @details
 *   Calibrated sensor measurements
 ******************************************************************************/
typedef struct{
    double magX; ///< Magnetic Field X (measurment unit is [uT])
    double magY; ///< Magnetic Field Y (measurment unit is [uT])
    double magZ; ///< Magnetic Field Z (measurment unit is [uT])
    double cssX; ///< Coarse Sun X
    double cssY; ///< Coarse Sun Y
    double cssZ; ///< Coarse Sun Z
    double sunX; ///< Sun X
    double sunY; ///< Sun Y
    double sunZ; ///< Sun Z
    double nadirX; ///< Nadir X
    double nadirY; ///< Nadir Y
    double nadirZ; ///< Nadir Z
    double rateX; ///< X Angular Rate (measurment unit is [deg/s])
    double rateY; ///< Y Angular Rate (measurment unit is [deg/s])
    double rateZ; ///< Z Angular Rate (measurment unit is [deg/s])
    int16_t speedX; ///< X Wheel Speed (measurment unit is [rpm])
    int16_t speedY; ///< Y Wheel Speed (measurment unit is [rpm])
    int16_t speedZ; ///< Z Wheel Speed (measurment unit is [rpm])
    double star1BX; ///< Star1 body X-vector
    double star1BY; ///< Star1 body Y-vector
    double star1BZ; ///< Star1 body Z-vector
    double star1OX; ///< Star1 orbit X-vector
    double star1OY; ///< Star1 orbit Y-vector
    double star1OZ; ///< Star1 orbit Z-vector
    double star2BX; ///< Star2 body X-vector
    double star2BY; ///< Star2 body Y-vector
    double star2BZ; ///< Star2 body Z-vector
    double star2OX; ///< Star2 orbit X-vector
    double star2OY; ///< Star2 orbit Y-vector
    double star2OZ; ///< Star2 orbit Z-vector
    double star3BX; ///< Star3 body X-vector
    double star3BY; ///< Star3 body Y-vector
    double star3BZ; ///< Star3 body Z-vector
    double star3OX; ///< Star3 orbit X-vector
    double star3OY; ///< Star3 orbit Y-vector
    double star3OZ; ///< Star3 orbit Z-vector
} CUBEACP_AdcsMeasure_t;

/***************************************************************************//**
 * @brief
 *    ADCS Power Control message structure.
 * @details
 *   Control power to selected components
 ******************************************************************************/
typedef struct{
    CUBEACP_PowerSelect_t cubeControlSignalPower; ///< Control power to electronics of CubeControl Signal PIC
    CUBEACP_PowerSelect_t cubeControlMotorPower; ///< Control power to electronics of CubeControl Motor PIC
    CUBEACP_PowerSelect_t cubeSensePower; ///< Control power to the CubeSense
    CUBEACP_PowerSelect_t cubeStarPower; ///< Control power to the CubeStar
    CUBEACP_PowerSelect_t cubeWheel1Power; ///< Control power to the CubeWheel1
    CUBEACP_PowerSelect_t cubeWheel2Power; ///< Control power to the CubeWheel2
    CUBEACP_PowerSelect_t cubeWheel3Power; ///< Control power to the CubeWheel3
    CUBEACP_PowerSelect_t motorPower; ///< Control power to Motor electronics
    CUBEACP_PowerSelect_t gpsLnaPower; ///< Control power to GPS LNA
} CUBEACP_AdcsPower_t;

/***************************************************************************//**
 * @brief
 *    Power and Temperature Measurements message structure.
 * @details
 *   Power and temperature measurements
 ******************************************************************************/
typedef struct{
    double cubeSense3V3Current; ///< CubeSense 3V3 Current (measurment unit is [mA])
    double cubeSenseCam2Current; ///< CubeSense Cam2 SRAM Current (measurment unit is [mA])
    double cubeSenseCam1Current; ///< CubeSense Cam1 SRAM Current (measurment unit is [mA])
    double cubeControl3V3Current; ///< CubeControl 3V3 Current (measurment unit is [mA])
    double cubeControl5VCurrent; ///< CubeControl 5V Current (measurment unit is [mA])
    double cubeControlBatCurrent; ///< CubeControl Vbat Current (measurment unit is [mA])
    double wheel1Current; ///< Wheel1 Current (measurment unit is [mA])
    double wheel2Current; ///< Wheel2 Current (measurment unit is [mA])
    double wheel3Current; ///< Wheel3 Current (measurment unit is [mA])
    double cubeStarCurrent; ///< CubeStar Current (measurment unit is [mA])
    double magtorqCurrent; ///< Magnetorquer Current (measurment unit is [mA])
    int16_t mCUTemp; ///< MCU Temperature (measurment unit is [C])
    double magnetometerTemp; ///< Magnetometer Temperature (measurment unit is [C])
    double redundentMagnetometerTemp; ///< Redundant Magnetometer Temperature (measurment unit is [C])
    int16_t xRateTemp; ///< X-Rate sensor Temperature (measurment unit is [C])
    int16_t yRateTemp; ///< Y-Rate sensor Temperature (measurment unit is [C])
    int16_t zRateTemp; ///< Z-Rate sensor Temperature (measurment unit is [C])
} CUBEACP_AdcsPowerMeasure_t;

/***************************************************************************//**
 * @brief
 *    ADCS State message structure.
 * @details
 *   Current ADCS state
 ******************************************************************************/
typedef struct{
    CUBEACP_EstimModeSelect_t estimMode; ///< Current attitude estimation mode
    CUBEACP_ConModeSelect_t controlMode; ///< Current attitude control mode
    CUBEACP_AdcsRunMode_t adcsRunMode; ///< Current ADCS Running mode
    bool cubeControlSignalPower; ///< CubeControl Signal electronics enabled status
    bool cubeControlMotorPower; ///< CubeControl Motor electronics enabled status
    bool cubeSensePower; ///< CubeSense enabled status
    bool cubeWheel1Power; ///< CubeWheel1 enabled status
    bool cubeWheel2Power; ///< CubeWheel2 enabled status
    bool cubeWheel3Power; ///< CubeWheel3 enabled status
    bool cubeStarPower; ///< CubeStar enabled status
    bool gpsReceiverPower; ///< GPS Receiver enabled status
    bool gpsLnaPower; ///< GPS Antenna LNA enabled status
    bool motorDriverPower; ///< Motor Driver Electronics enabled status
    bool sunAboveHorizon; ///< Sun is above the local horizon (elevation > 0)
    bool cubeSenseCommsError; ///< Communication error occurred with the CubeSense
    bool cubeControlSignalCommsError; ///< Communication error occurred with the CubeControl Signal MCU
    bool cubeControlMotorCommsError; ///< Communication error occurred with the CubeControl Motor MCU
    bool cubeWheel1CommsError; ///< Communication error occurred with the CubeWheel1
    bool cubeWheel2CommsError; ///< Communication error occurred with the CubeWheel2
    bool cubeWheel3CommsError; ///< Communication error occurred with the CubeWheel3
    bool cubeStarCommsError; ///< Communication error occurred with the CubeStar
    bool magRangeError; ///< Magnetometer measured magnetic field with size < 100 nT or >100,000nT
    bool cam1SensOvercurrent; ///< Cam1 sensor overcurrent detected
    bool cam1SensNotIdle; ///< Cam1 sensor was not idle at the start of ADCS loop
    bool cam1SensDetectError; ///< Cam1 sensor was unable to compute angles (could be not in FOV)
    bool sunSensRangeError; ///< Detected sun angles were outside of +/- 90 deg
    bool cam2SensOvercurrent; ///< Cam2 sensor overcurrent detected
    bool cam2SensNotIdle; ///< Cam2 sensor was not idle at the start of ADCS loop
    bool cam2SensDetectError; ///< Cam2 sensor was unable to compute angles (could be not in FOV)
    bool nadirSensRangeError; ///< Detected nadir angles were outside of +/- 60 deg
    bool rateSensRangeError; ///< Measured XYZ-body rate is outside of the range +/-20 deg/s
    bool wheelSpeedRangeError; ///< Wheel XYZ speed measurement was outside the range +/-8500 rpm
    bool cssError; ///< Unable to compute Coarse Sun vector (could be not in FOV)
    bool starMatchError; ///< Unable to obtain enough matched stars
    bool starTrackOvercurrent; ///< Star tracker overcurrent detected
    bool orbitParamsInvalidError; ///< Orbit Parameters are not in allowed bounds (angle exceeding limits etc.). Failed to initialize SGP4 propagator using supplied parameters
    bool configInvalidError; ///< Magnetorquer Configuration or CSS in invalid. Each principle axis should have a torquer output (1,2, or 3) assigned. At least one CSS per principle axis needed
    bool controlModeNotAllowed; ///< Attempt was made to select control mode without appropriate estimator, or command to set Y-momentum mode while not in steady-state Y-Thomson
    bool estimatorNotAllowed; ///< Attempt was made to change to an estimation mode that would be inapropriate for the current control mode
    bool magfieldModelError; ///< Modelled and measured magnetic field differs in size by more than 5000 nT
    bool nodeRecoveryError; ///< Failed to Recover an ADCS Node by successive resets
    double roll; ///< Estimated roll angle (measurment unit is [deg])
    double pitch; ///< Estimated pitch angle (measurment unit is [deg])
    double yaw; ///< Estimated yaw angle (measurment unit is [deg])
    int16_t q1; ///< Estimated q1
    int16_t q2; ///< Estimated q2
    int16_t q3; ///< Estimated q3
    double rateX; ///< Estimated X angular rate (measurment unit is [deg/s])
    double rateY; ///< Estimated Y angular rate (measurment unit is [deg/s])
    double rateZ; ///< Estimated Z angular rate (measurment unit is [deg/s])
    double positionX; ///< ECI referenced X coordinate  (measurment unit is [km])
    double positionY; ///< ECI referenced Y coordinate  (measurment unit is [km])
    double positionZ; ///< ECI referenced Z coordinate  (measurment unit is [km])
    double velocityX; ///< ECI referenced X velocity  (measurment unit is [m/s])
    double velocityY; ///< ECI referenced Y velocity  (measurment unit is [m/s])
    double velocityZ; ///< ECI referenced Z velocity  (measurment unit is [m/s])
    double latitude; ///< WGS-84 Latitude angle  (measurment unit is [deg])
    double longitude; ///< Longitude angle (measurment unit is [deg])
    double altitude; ///< WGS-84 altitude (measurment unit is [km])
    int16_t posEcefX; ///< ECEF Position X (measurment unit is [m])
    int16_t posEcefY; ///< ECEF Position Y (measurment unit is [m])
    int16_t posEcefZ; ///< ECEF Position Z (measurment unit is [m])
} CUBEACP_AdcsState_t;

/***************************************************************************//**
 * @brief
 *    Boot Index and Status message structure.
 * @details
 *   Current selected boot index and status of last boot
 ******************************************************************************/
typedef struct{
    CUBEACP_BootProgramsList_t programIndex; ///< Program Index
    CUBEACP_BootStatus_t bootStatus; ///< Boot Status
} CUBEACP_BootIndexStatus_t;

/***************************************************************************//**
 * @brief
 *    Clear Errors message structure.
 * @details
 *   Clear Latched Error Flags
 ******************************************************************************/
typedef struct{
    bool aDCSErrors; ///< Clear ADCS error flags
    bool hKErrors; ///< Clear HK Error flags
} CUBEACP_ClearErrors_t;

/***************************************************************************//**
 * @brief
 *    Commanded Attitude Angles message structure.
 * @details
 *   Commanded attitude angles
 ******************************************************************************/
typedef struct{
    double roll; ///< Commanded roll angle (measurment unit is [deg]. valid range is between -9000 deg and 9000 deg)
    double pitch; ///< Commanded pitch angle (measurment unit is [deg]. valid range is between -18000 deg and 18000 deg)
    double yaw; ///< Commanded yaw angle (measurment unit is [deg]. valid range is between -18000 deg and 18000 deg)
} CUBEACP_CmdAttitude_t;

/***************************************************************************//**
 * @brief
 *    Tracking Controller Target Reference message structure.
 * @details
 *   Target reference for tracking control mode
 ******************************************************************************/
typedef struct{
    float longRef; ///< Geocentric longitude of target (measurment unit is [deg]. valid range is between 0 deg and 360 deg)
    float latRef; ///< Geocentric latitude of target (measurment unit is [deg]. valid range is between -90 deg and 90 deg)
    float altRef; ///< Geocentric altitude of target (measurment unit is [meter]. valid range is between -20000 meter and 20000 meter)
} CUBEACP_CmdTrackingTarget_t;

/***************************************************************************//**
 * @brief
 *    Communication Status message structure.
 * @details
 *   Communication status - includes command and telemetry counters and error flags
 ******************************************************************************/
typedef struct{
    uint16_t tcCounter; ///< No. of telecommands received
    uint16_t tlmCounter; ///< No. of telemetry requests received
    bool uartBufferOverrun; ///< TC buffer was overrun while receiving a telecommand
    bool uartProtocolError; ///< UART protocol error occurred
    bool uartMsgIncomplete; ///< UART start-of-message identifier was received without a preceding end-of-message
    bool i2CTelemetryError; ///< Number of data clocked out was more than telemetry package
    bool i2CBufferError; ///< Telecommand sent exceeds buffer size
    bool cANBufferError; ///< Telecommand sent exceeds buffer size
} CUBEACP_CommsStatus_t;

/***************************************************************************//**
 * @brief
 *    Set Attitude Control Mode message structure.
 * @details
 *   Set attitude control mode
 ******************************************************************************/
typedef struct{
    CUBEACP_ConModeSelect_t controlModeSelection; ///< Attitude control mode
    bool overrideErrors; ///< Ignore current state and force control mode (if this flag is not set, certain control transitions will not be allowed)
    uint16_t timeout; ///< Control timeout duration. Control will revert to None when timer reaches zero. 0xFFFF for infinite timeout (measurment unit is [s])
} CUBEACP_ControlMode_t;

/***************************************************************************//**
 * @brief
 *    JPG Conversion Progress message structure.
 * @details
 *   Conversion progress
 ******************************************************************************/
typedef struct{
    uint8_t progress; ///< Progress %
    CUBEACP_JpgConvertResult_t conversionResult; ///< JPG Conversion Result
    uint8_t outFileCounter; ///< Output File Counter
} CUBEACP_ConversionProgress_t;

/***************************************************************************//**
 * @brief
 *    Convert to JPG file message structure.
 * @details
 *   Convert raw or bmp files to JPG
 ******************************************************************************/
typedef struct{
    uint8_t srcFileCtr; ///< Source File Counter
    uint8_t qualityFactor; ///< Quality Factor
    uint8_t whiteBalance; ///< White Balance
} CUBEACP_Convert_t;

/***************************************************************************//**
 * @brief
 *    CubeACP State message structure.
 * @details
 *   Contains flags regarding the state of the ACP
 ******************************************************************************/
typedef struct{
    bool adcsConfigLoadError; ///< Flag to indicate that the ADCS configuartion was not read successfully out of flash
    bool orbitParamsLoadError; ///< Flag to indicate that the Orbit parameters were not read successfully out of flash
} CUBEACP_CubeACPState_t;

/***************************************************************************//**
 * @brief
 *    Download Block Ready message structure.
 * @details
 *   Status about download block preparation
 ******************************************************************************/
typedef struct{
    bool ready; ///< Ready
    bool parameterError; ///< The combination of message length and hole map resulted in invalid array lengths
    uint16_t checksum; ///< Block CRC16 Checksum
    uint16_t length; ///< Block length
} CUBEACP_DownloadBlockReady_t;

/***************************************************************************//**
 * @brief
 *    Initiate Download Burst message structure.
 * @details
 *   Initiate Download Burst
 ******************************************************************************/
typedef struct{
    uint8_t messageLength; ///< Message Length
    bool ignoreHoleMap; ///< Ignore Hole Map
} CUBEACP_DownloadBurst_t;

/***************************************************************************//**
 * @brief
 *    EDAC Error Counters message structure.
 * @details
 *   EDAC Error Counters
 ******************************************************************************/
typedef struct{
    uint16_t singleSRAMSEUs; ///< The number of single SRAM upsets (per byte) detected
    uint16_t doubleSRAMSEUs; ///< The number of double SRAM upsets (per byte) detected
    uint16_t multiSRAMSEUs; ///< The number of multiple SRAM upsets (per byte) deteced
} CUBEACP_EdacErrors_t;

/***************************************************************************//**
 * @brief
 *    Erase File message structure.
 * @details
 *   Erase File
 ******************************************************************************/
typedef struct{
    CUBEACP_FileType_t fileType; ///< File Type
    uint8_t fileCtr; ///< File Counter
    bool eraseAll; ///< Erase All
} CUBEACP_EraseFile_t;

/***************************************************************************//**
 * @brief
 *    Estimation Data message structure.
 * @details
 *   Estimation meta-data
 ******************************************************************************/
typedef struct{
    double igrfMagX; ///< IGRF Modelled Magnetic Field X (measurment unit is [uT])
    double igrfMagY; ///< IGRF Modelled Magnetic Field Y (measurment unit is [uT])
    double igrfMagZ; ///< IGRF Modelled Magnetic Field Z (measurment unit is [uT])
    double modelSunX; ///< Modelled Sun Vector X
    double modelSunY; ///< Modelled Sun Vector Y
    double modelSunZ; ///< Modelled Sun Vector Z
    double estimGyroBiasX; ///< Estimated X-gyro Bias (measurment unit is [deg/s])
    double estimGyroBiasY; ///< Estimated Y-gyro Bias (measurment unit is [deg/s])
    double estimGyroBiasZ; ///< Estimated Z-gyro Bias (measurment unit is [deg/s])
    double innovX; ///< Innovation Vector X
    double innovY; ///< Innovation Vector Y
    double innovZ; ///< Innovation Vector Z
    double qError1; ///< Quaternion Error - Q1
    double qError2; ///< Quaternion Error - Q2
    double qError3; ///< Quaternion Error - Q3
    double qCovar1; ///< Quaternion Covariance - Q1 RMS
    double qCovar2; ///< Quaternion Covariance - Q2 RMS
    double qCovar3; ///< Quaternion Covariance - Q3 RMS
    double rateCovarX; ///< X Angular Rate Covariance
    double rateCovarY; ///< Y Angular Rate Covariance
    double rateCovarZ; ///< Z Angular Rate Covariance
} CUBEACP_EstimData_t;

/***************************************************************************//**
 * @brief
 *    Boot And Running Program Status message structure.
 * @details
 *   Boot And Running Program Status
 ******************************************************************************/
typedef struct{
    CUBEACP_ResetCause_t mcuResetCause; ///< Cause of MCU reset
    CUBEACP_BootCause_t bootCause; ///< Cause of last reboot
    uint16_t bootCounter; ///< Number of times CubeComputer has booted
    CUBEACP_BootProgramsList_t runningProgramIndex; ///< Index of current running program in flash programs list
    uint8_t firmwareMajorVersion; ///< Firmware version (Major)
    uint8_t firmwareMinorVersion; ///< Firmware version (Minor)
} CUBEACP_ExtendedIdentification_t;

/***************************************************************************//**
 * @brief
 *    File Download Buffer with File Contents message structure.
 * @details
 *   File Download buffer 20-byte packet
 ******************************************************************************/
typedef struct{
    uint16_t packetNo; ///< Packet counter of this file download packet
    uint8_t fileBytes[20]; ///< File 20-byte packet
} CUBEACP_FileDownload_t;

/***************************************************************************//**
 * @brief
 *    File Information message structure.
 * @details
 *   File Information
 ******************************************************************************/
typedef struct{
    CUBEACP_FileType_t fileType; ///< File Type
    bool busyUpdating; ///< 
    uint8_t fileCtr; ///< File Counter
    uint32_t size; ///< File Size
    uint32_t unixTime; ///< File Data and Time (unix) (measurment unit is [s])
    uint16_t checksum; ///< File CRC16 Checksum
} CUBEACP_FileInfo_t;

/***************************************************************************//**
 * @brief
 *    File Upload Packet message structure.
 * @details
 *   File Upload Packet
 ******************************************************************************/
typedef struct{
    uint16_t packetNo; ///< Packet Number
    uint8_t fileBytes[20]; ///< File Bytes
} CUBEACP_FileUpload_t;

/***************************************************************************//**
 * @brief
 *    Finalize Upload Block message structure.
 * @details
 *   Finalize Uploaded File Block
 ******************************************************************************/
typedef struct{
    CUBEACP_FileUploadDestination_t destination; ///< Destination
    uint32_t offset; ///< Offset into file
    uint16_t blockLen; ///< Length of block 
} CUBEACP_FinalizeUploadBlock_t;

/***************************************************************************//**
 * @brief
 *    Identification message structure.
 * @details
 *   Identification information for this node
 ******************************************************************************/
typedef struct{
    uint8_t nodeType; ///< Node type identifier.
    uint8_t interfaceVersion; ///< Interface version. This field should have a value of 1
    uint8_t firmwareMajorVersion; ///< Firmware version (Major)
    uint8_t firmwareMinorVersion; ///< Firmware version (Minor)
    uint16_t runtimeSeconds; ///< Number of seconds since processor start-up
    uint16_t runtimeMilliseconds; ///< Number of milliseconds (after the integer second) since processor start-up
} CUBEACP_Identification_t;

/***************************************************************************//**
 * @brief
 *    Status of Image Capture and Save Operation message structure.
 * @details
 *   Status of Image Capture and Save Operation
 ******************************************************************************/
typedef struct{
    uint8_t percentageComplete; ///< Current progress of operation (measurment unit is [%])
    CUBEACP_ImSaveStatus_t status; ///< Current status of operation
} CUBEACP_ImageSaveStatus_t;

/***************************************************************************//**
 * @brief
 *    Initiate File Upload message structure.
 * @details
 *   Initiate File Upload
 ******************************************************************************/
typedef struct{
    CUBEACP_FileUploadDestination_t destination; ///< Destination
    uint8_t blockSize; ///< Block Size
} CUBEACP_InitiateFileUpload_t;

/***************************************************************************//**
 * @brief
 *    Last Logged Event message structure.
 * @details
 *   Last Logged Event (relative to pointer - adjusted via Advance and Reset TCs (3 & 4)
 ******************************************************************************/
typedef struct{
    uint32_t unixTime; ///< 
    uint8_t eventId; ///< Event ID
    uint8_t eventParam; ///< Event Parameter
} CUBEACP_LastLogEvent_t;

/***************************************************************************//**
 * @brief
 *    SRAM Latchup counters message structure.
 * @details
 *   SRAM Latchup counters
 ******************************************************************************/
typedef struct{
    uint16_t sRAM1SELs; ///< The number of SRAM1 latchups detected
    uint16_t sRAM2SELs; ///< The number of SRAM2 latchups detected
} CUBEACP_LatchupErrors_t;

/***************************************************************************//**
 * @brief
 *    Load File Download Block message structure.
 * @details
 *   Fill download buffer with file contents
 ******************************************************************************/
typedef struct{
    CUBEACP_FileType_t fileType; ///< File Type
    uint8_t counter; ///< Counter
    uint32_t offset; ///< Offset
    uint16_t length; ///< Block Length
} CUBEACP_LoadDownloadBlock_t;

/***************************************************************************//**
 * @brief
 *    SD Log1 Configuration message structure.
 * @details
 *   Log selection and period for LOG1
 ******************************************************************************/
typedef struct{
    uint8_t logSelection[10]; ///< Log Selection - up to 80 flags indicating which telemetry frames should be logged
    uint16_t period; ///< Log period. Set to 0 to disable logging
    CUBEACP_SdLogSelect_t destination; ///< Which SD card to use to store log file
} CUBEACP_LogSdConfig1_t;

/***************************************************************************//**
 * @brief
 *    SD Log2 Configuration message structure.
 * @details
 *   Log selection and period for LOG2
 ******************************************************************************/
typedef struct{
    uint8_t logSelection[10]; ///< Log Selection - up to 80 flags indicating which telemetry frames should be logged
    uint16_t period; ///< Log period. Set to 0 to disable logging
    CUBEACP_SdLogSelect_t destination; ///< Which SD card to use to store log file
} CUBEACP_LogSdConfig2_t;

/***************************************************************************//**
 * @brief
 *    UART Log Configuration message structure.
 * @details
 *   Log selection and period for UART (unsolicited TLM)
 ******************************************************************************/
typedef struct{
    uint8_t selection[10]; ///< Log Selection - up to 80 flags indicating which telemetry frames should be logged
    uint16_t period; ///< Log period. Set to 0 to disable logging
} CUBEACP_LogUartConfig_t;

/***************************************************************************//**
 * @brief
 *    SGP4 Orbit Parameters message structure.
 * @details
 *   SGP4 Orbit Parameters
 ******************************************************************************/
typedef struct{
    double inclination; ///< Inclination (measurment unit is [deg]. valid range is between 0 deg and 180 deg)
    double eccentricity; ///< Eccentricity (valid range is between 0  and 1 )
    double raan; ///< Right-ascension of the Ascending Node (measurment unit is [deg]. valid range is between 0 deg and 360 deg)
    double argPerigee; ///< Argument of Perigee (measurment unit is [deg]. valid range is between 0 deg and 360 deg)
    double bstar; ///< B-Star drag term (valid range is between 0  and 1 )
    double meanMotion; ///< Mean Motion (measurment unit is [orbits/day]. valid range is between 0 orbits/day and 20 orbits/day)
    double meanAnomaly; ///< Mean Anomaly (measurment unit is [deg]. valid range is between 0 deg and 360 deg)
    double epoch; ///< Epoch (year.day) (measurment unit is [year.day]. valid range is between 0 year.day and 100000 year.day)
} CUBEACP_OrbitParameters_t;

/***************************************************************************//**
 * @brief
 *    Raw GPS Measurements message structure.
 * @details
 *   Raw GPS measurements
 ******************************************************************************/
typedef struct{
    CUBEACP_GpsSolutionStatus_t gpsSolutionStatus; ///< GPS Solution Status
    uint8_t gpsNumSatsTracked; ///< Number of tracked GPS satellites
    uint8_t gpsNumSatsSolution; ///< Number of GPS satellites used in solution
    uint8_t gpsXYZLogCtr; ///< Counter for XYZ Lof from GPS
    uint8_t gpsRangeLogCtr; ///< Counter for RANGE log from GPS
    uint8_t gpsResponse; ///< Response Message for GPS log setup - p656 of OEMV615 reference manual
    uint16_t gpsWeek; ///< GPS Reference Week
    uint32_t gpsTimeMs; ///< GPS Time Milliseconds (measurment unit is [ms])
    int32_t posEcefX; ///< ECEF Position X (measurment unit is [m])
    int16_t velEcefX; ///< ECEF Velocity X (measurment unit is [m/s])
    int32_t posEcefY; ///< ECEF Position Y (measurment unit is [m])
    int16_t velEcefY; ///< ECEF Velocity Y (measurment unit is [m/s])
    int32_t posEcefZ; ///< ECEF Position Z (measurment unit is [m])
    int16_t velEcefZ; ///< ECEF Velocity Z (measurment unit is [m/s])
    double stdDevPosX; ///< X-pos Standard Deviation (measurment unit is [m])
    double stdDevPosY; ///< Y-pos Standard Deviation (measurment unit is [m])
    double stdDevPosZ; ///< Z-pos Standard Deviation (measurment unit is [m])
    uint8_t stdDevVelX; ///< X-vel Standard Deviation (measurment unit is [m/s])
    uint8_t stdDevVelY; ///< Y-vel Standard Deviation (measurment unit is [m/s])
    uint8_t stdDevVelZ; ///< Z-vel Standard Deviation (measurment unit is [m/s])
} CUBEACP_RawGPS_t;

/***************************************************************************//**
 * @brief
 *    Raw Sensor Measurements message structure.
 * @details
 *   Raw sensor measurements
 ******************************************************************************/
typedef struct{
    int16_t cam2RawX; ///< Cam2 azimuth angle
    int16_t cam2RawY; ///< Cam2 elevation angle
    CUBEACP_CaptureResult_t cam2Busy; ///< Cam2 capture status
    CUBEACP_DetectResult_t cam2Result; ///< Cam2 detection result
    int16_t cam1RawX; ///< Cam1 azimuth angle
    int16_t cam1RawY; ///< Cam1 elevation angle
    CUBEACP_CaptureResult_t cam1Busy; ///< Cam1 capture status
    CUBEACP_DetectResult_t cam1Result; ///< Cam1 detection result
    uint8_t cssRaw1; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw2; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw3; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw4; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw5; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw6; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw7; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw8; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw9; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw10; ///< sampled A/D value - corresponds to COS(sun_angle)
    int16_t magRawX; ///< sampled A/D value
    int16_t magRawY; ///< sampled A/D value
    int16_t magRawZ; ///< sampled A/D value
} CUBEACP_RawSensor_t;

/***************************************************************************//**
 * @brief
 *    Raw Star Tracker message structure.
 * @details
 *   Raw Star Tracker Measurement
 ******************************************************************************/
typedef struct{
    CUBEACP_Stars_t numStarDetected; ///< Number of stars detected
    CUBEACP_Stars_t numStarIdent; ///< Number of stars identified
    uint8_t starNoise; ///< Noise level of star image
    bool attitudeSuccess; ///< Attitude Success
    bool imageCaptureSuccess; ///< Image Capture Success
    bool detectionSuccess; ///< Detection Success
    bool identificationSuccess; ///< Identification Success
    bool loopTimeError; ///< Loop time Error
    bool maxStarsDetected; ///< Max Stars Detected
    bool lessThanThreeStarsInFoV; ///< Less than three stars in FoV
    bool commsError; ///< Comms error
    uint8_t confStar1; ///< Confidence factor of star 1
    uint8_t confStar2; ///< Confidence factor of star 2
    uint8_t confStar3; ///< Confidence factor of star 3
    uint16_t magStar1; ///< Instrument magnitude of star 1
    uint16_t magStar2; ///< Instrument magnitude of star 2
    uint16_t magStar3; ///< Instrument magnitude of star 3
    uint16_t catStar1; ///< Catalogue number of star 1
    int16_t centXStar1; ///< X centroid of star 1
    int16_t centYStar1; ///< Y centroid of star 1
    uint16_t catStar2; ///< Catalogue number of star 2
    int16_t centXStar2; ///< X centroid of star 2
    int16_t centYStar2; ///< Y centroid of star 2
    uint16_t catStar3; ///< Catalogue number of star 3
    int16_t centXStar3; ///< X centroid of star 3
    int16_t centYStar3; ///< Y centroid of star 3
    uint16_t capture; ///< Capture (measurment unit is [ms])
    uint16_t detection; ///< Detection (measurment unit is [ms])
    uint16_t identification; ///< Identification (measurment unit is [ms])
} CUBEACP_RawStarTracker_t;

/***************************************************************************//**
 * @brief
 *    Redundant Magnetometer Raw Measurements message structure.
 * @details
 *   Redundant Magnetometer raw Measurements, temperature and magnetometer mode
 ******************************************************************************/
typedef struct{
    int16_t magRawX; ///< sampled A/D value
    int16_t magRawY; ///< sampled A/D value
    int16_t magRawZ; ///< sampled A/D value
} CUBEACP_ReduntMagRaw_t;

/***************************************************************************//**
 * @brief
 *    Save Image message structure.
 * @details
 *   Save and capture image from one of CubeSense cameras or CubeStar camera to SD card
 ******************************************************************************/
typedef struct{
    CUBEACP_CamSelect_t cameraSelect; ///< Camera Selection (measurment unit is [s])
    CUBEACP_ImSize_t imageSize; ///< Image size selection (measurment unit is [s])
} CUBEACP_SaveImage_t;

/***************************************************************************//**
 * @brief
 *    Telecommand Acknowledge message structure.
 * @details
 *   Telemetry frame with acknowledge status of the previously sent command
 ******************************************************************************/
typedef struct{
    uint8_t lastTCID; ///< ID of last received TC
    bool processedFlag; ///< Flag to indicate if the last TC has been processed.
    CUBEACP_TcErrorReason_t tCerrorStatus ; ///< Status of last processed telecommand
    uint8_t tCParameterErrorIndex; ///< Index of incorrect TC parameter
} CUBEACP_TelecommandAcknowledge_t;

/***************************************************************************//**
 * @brief
 *    Set Magnetorquer Output message structure.
 * @details
 *   Set magnetorquer output (only valid if Control Mode is None)
 ******************************************************************************/
typedef struct{
    double torquerX; ///< Commanded X-torquer duty cycle (valid range is between -800  and 800 )
    double torquerY; ///< Commanded Y-torquer duty cycle (valid range is between -800  and 800 )
    double torquerZ; ///< Commanded Z-torquer duty cycle (valid range is between -800  and 800 )
} CUBEACP_TorquerCmd_t;

/***************************************************************************//**
 * @brief
 *    Trigger ADCS Loop with Simulated Sensor Data message structure.
 * @details
 *   Trigger ADCS to perform one iteration of the control loop (only valid when ADCS Run Mode is Triggered)
 ******************************************************************************/
typedef struct{
    uint32_t unixTime; ///< Unix time for iteration (measurment unit is [s])
    uint16_t cssRaw1; ///< CSS1 raw measurement
    uint16_t cssRaw2; ///< CSS2 raw measurement
    uint16_t cssRaw3; ///< CSS3 raw measurement
    uint16_t cssRaw4; ///< CSS4 raw measurement
    uint16_t cssRaw5; ///< CSS5 raw measurement
    uint16_t cssRaw6; ///< CSS6 raw measurement
    uint16_t cssRaw7; ///< CSS7 raw measurement
    uint16_t cssRaw8; ///< CSS8 raw measurement
    uint16_t cssRaw9; ///< CSS9 raw measurement
    uint16_t cssRaw10; ///< CSS10 raw measurement
    int16_t cam1RawX; ///< Cam1 sensor raw X angle
    int16_t cam1RawY; ///< Cam1 sensor raw Y angle
    uint8_t cam1Busy; ///< Cam1 sensor capture status
    uint8_t cam1Result; ///< Cam1 sensor detection result
    int16_t cam2RawX; ///< Cam2 sensor raw X angle
    int16_t cam2RawY; ///< Cam2 sensor raw Y angle
    uint8_t cam2Busy; ///< Cam2 sensor capture status
    uint8_t cam2Result; ///< Cam2 sensor detection result
    int16_t magRawX; ///< Raw magnetometer X measurement
    int16_t magRawY; ///< Raw magnetometer Y measurement
    int16_t magRawZ; ///< Raw magnetometer Z measurement
    int16_t rateRawX; ///< Raw X rate sensor measurement
    int16_t rateRawY; ///< Raw Y rate sensor measurement
    int16_t rateRawZ; ///< Raw Z rate sensor measurement
    int16_t wheelRawX; ///< Raw X wheel speed measurement (measurment unit is [rpm])
    int16_t wheelRawY; ///< Raw Y wheel speed measurement (measurment unit is [rpm])
    int16_t wheelRawZ; ///< Raw Z wheel speed measurement (measurment unit is [rpm])
    int16_t star1CameraX; ///< Star1 camera X-vector
    int16_t star1CameraY; ///< Star1 camera Y-vector
    int16_t star1CameraZ; ///< Star1 camera Z-vector
    int16_t star1InertialX; ///< Star1 inertial X-vector
    int16_t star1InertialY; ///< Star1 inertial Y-vector
    int16_t star1InertialZ; ///< Star1 inertial Z-vector
    int16_t star2CameraX; ///< Star2 camera X-vector
    int16_t star2CameraY; ///< Star2 camera Y-vector
    int16_t star2CameraZ; ///< Star2 camera Z-vector
    int16_t star2InertialX; ///< Star2 inertial X-vector
    int16_t star2InertialY; ///< Star2 inertial Y-vector
    int16_t star2InertialZ; ///< Star2 inertial Z-vector
    int16_t star3CameraX; ///< Star3 camera X-vector
    int16_t star3CameraY; ///< Star3 camera Y-vector
    int16_t star3CameraZ; ///< Star3 camera Z-vector
    int16_t star3InertialX; ///< Star3 inertial X-vector
    int16_t star3InertialY; ///< Star3 inertial Y-vector
    int16_t star3InertialZ; ///< Star3 inertial Z-vector
} CUBEACP_TriggerAdcsSensor_t;

/***************************************************************************//**
 * @brief
 *    Current Unix Time message structure.
 * @details
 *   Current Unix Time
 ******************************************************************************/
typedef struct{
    uint32_t time; ///< Time in s since 01/01/1970, 00:00 (measurment unit is [s])
    uint16_t milliSec; ///< Current millisecond count (measurment unit is [ms])
} CUBEACP_UnixTime_t;

/***************************************************************************//**
 * @brief
 *    Unix Time Save to Flash message structure.
 * @details
 *   Configuration settings for unixtime flash memory persistence
 ******************************************************************************/
typedef struct{
    bool saveNow; ///< Save current unixtime to flash memory
    bool saveOnUpdate; ///< Save unixtime to flash memory whenever there is a command to update the unixtime
    bool savePeriodic; ///< Save unixtime to flash memory periodically
    uint8_t period; ///< Interval at which to save unixtime to flash memory (measurment unit is [s])
} CUBEACP_UnixTimeSave_t;

/***************************************************************************//**
 * @brief
 *    Upload Block Complete message structure.
 * @details
 *   Finalize Upload Block Complete
 ******************************************************************************/
typedef struct{
    bool busy; ///< Busy with block finalization
    bool error; ///< Error in block finalization
} CUBEACP_UploadBlockComplete_t;

/***************************************************************************//**
 * @brief
 *    Set Wheel Speed message structure.
 * @details
 *   Set wheel speed (only valid if Control Mode is None)
 ******************************************************************************/
typedef struct{
    int16_t wheelX; ///< Commanded X-wheel speed (measurment unit is [rpm]. valid range is between -8000 rpm and 8000 rpm)
    int16_t wheelY; ///< Commanded Y-wheel speed (measurment unit is [rpm]. valid range is between -8000 rpm and 8000 rpm)
    int16_t wheelZ; ///< Commanded Z-wheel speed (measurment unit is [rpm]. valid range is between -8000 rpm and 8000 rpm)
} CUBEACP_WheelSpeedCmd_t;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

/***************************************************************************//**
Creates the telemetry request packet
 *
 * @param[in] txBuffer
 *   Transmit buffer to be populated
 * @param[in] tlm
 *   Enumeration of specified telemetry request
 * @return
 *   Returns the number bytes of telemetry request
uint16_t CUBEACP_createTelemetryRequest(uint8_t* txBuffer, CUBEACP_Telemetry_t tlm);

/***************************************************************************//**
 * Decode a ACP Execution State telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_AcpLoopState_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_AcpLoopStateTlm(uint8_t* rxBuffer, CUBEACP_AcpLoopState_t* returnVal);

/***************************************************************************//**
 * Decode a Actuator Commands telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_ActuatorCmd_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_ActuatorCmdTlm(uint8_t* rxBuffer, CUBEACP_ActuatorCmd_t* returnVal);

/***************************************************************************//**
 * Decode a ADCS Configuration telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_AdcsConfig_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 *      TlmRangeError if the Star Tracker Centroid X telemetry value was outside of the range -5000  to 5000 
 *      TlmRangeError if the Star Tracker Centroid Y telemetry value was outside of the range -5000  to 5000 
 *      TlmRangeError if the Detumbling Spin Gain telemetry value was outside of the range 0  to 10000 
 *      TlmRangeError if the Detumbling Damping Gain telemetry value was outside of the range 0  to 10000 
 *      TlmRangeError if the Reference spin rate telemetry value was outside of the range -100000 deg/s to 0 deg/s
 *      TlmRangeError if the Fast BDot Detumbling Gain telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Y-Momentum Control Gain telemetry value was outside of the range 0  to 10000 
 *      TlmRangeError if the Y-momentum Nutation Damping Gain telemetry value was outside of the range 0  to 10000 
 *      TlmRangeError if the Y-momentum Proportional Gain telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Y-momentum Derivative Gain telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Reference Wheel Momentum telemetry value was outside of the range -10 Nms to 0 Nms
 *      TlmRangeError if the RWheel Proportional Gain telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the RWheel Derivative Gain telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Tracking Proportional Gain telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Tracking Derivative Gain telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Tracking Integral Gain telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Moment Of Inertia - Ixx telemetry value was outside of the range 0 kg.m^2 to 10 kg.m^2
 *      TlmRangeError if the Moment Of Inertia - Iyy telemetry value was outside of the range 0 kg.m^2 to 10 kg.m^2
 *      TlmRangeError if the Moment Of Inertia - Izz telemetry value was outside of the range 0 kg.m^2 to 10 kg.m^2
 *      TlmRangeError if the Moment Of Inertia - Ixy telemetry value was outside of the range -10 kg.m^2 to 10 kg.m^2
 *      TlmRangeError if the Moment Of Inertia - Ixz telemetry value was outside of the range -10 kg.m^2 to 10 kg.m^2
 *      TlmRangeError if the Moment Of Inertia - Iyz telemetry value was outside of the range -10 kg.m^2 to 10 kg.m^2
 *      TlmRangeError if the Magnetometer Rate Filter System Noise telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the EKF System Noise telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the CSS Measurement Noise telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Sun Sensor Measurement Noise telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Nadir Sensor Measurement Noise telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Magnetometer Measurement Noise telemetry value was outside of the range 0  to 100 
 *      TlmRangeError if the Star Tracker Measurement Noise telemetry value was outside of the range 0  to 100 
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_AdcsConfigTlm(uint8_t* rxBuffer, CUBEACP_AdcsConfig_t* returnVal);

/***************************************************************************//**
 * Decode a Adcs Execution Times telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_AdcsExecTimes_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_AdcsExecTimesTlm(uint8_t* rxBuffer, CUBEACP_AdcsExecTimes_t* returnVal);

/***************************************************************************//**
 * Decode a ADCS Measurements telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_AdcsMeasure_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_AdcsMeasureTlm(uint8_t* rxBuffer, CUBEACP_AdcsMeasure_t* returnVal);

/***************************************************************************//**
 * Decode a ADCS Misc Current Measurements telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_AdcsMiscCurrents_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_AdcsMiscCurrentsTlm(uint8_t* rxBuffer, CUBEACP_AdcsMiscCurrents_t* returnVal);

/***************************************************************************//**
 * Decode a ADCS Power Control telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_AdcsPower_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_AdcsPowerTlm(uint8_t* rxBuffer, CUBEACP_AdcsPower_t* returnVal);

/***************************************************************************//**
 * Decode a Power and Temperature Measurements telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_AdcsPowerMeasure_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_AdcsPowerMeasureTlm(uint8_t* rxBuffer, CUBEACP_AdcsPowerMeasure_t* returnVal);

/***************************************************************************//**
 * Decode a ADCS State telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_AdcsState_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_AdcsStateTlm(uint8_t* rxBuffer, CUBEACP_AdcsState_t* returnVal);

/***************************************************************************//**
 * Decode a ADCS Temperatures telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_AdcsTemperatures1_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_AdcsTemperatures1Tlm(uint8_t* rxBuffer, CUBEACP_AdcsTemperatures1_t* returnVal);

/***************************************************************************//**
 * Decode a Rate sensor temperatures telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_AdcsTemperatures2_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_AdcsTemperatures2Tlm(uint8_t* rxBuffer, CUBEACP_AdcsTemperatures2_t* returnVal);

/***************************************************************************//**
 * Decode a Block  Checksum telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] checksum
 *   Pointer to a uint16_t in which the Checksum will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, checksum, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_BlockChecksumTlm(uint8_t* rxBuffer, uint16_t* checksum);

/***************************************************************************//**
 * Decode a Boot Index and Status telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_BootIndexStatus_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_BootIndexStatusTlm(uint8_t* rxBuffer, CUBEACP_BootIndexStatus_t* returnVal);

/***************************************************************************//**
 * Decode a Cache enabled state telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] enabled
 *   Pointer to a bool in which the Enabled state will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, enabled, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_CacheTlm(uint8_t* rxBuffer, bool* enabled);

/***************************************************************************//**
 * Decode a Commanded Attitude Angles telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_CmdAttitude_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 *      TlmRangeError if the Commanded Roll Angle telemetry value was outside of the range -9000 deg to 9000 deg
 *      TlmRangeError if the Commanded Pitch Angle telemetry value was outside of the range -18000 deg to 18000 deg
 *      TlmRangeError if the Commanded Yaw Angle telemetry value was outside of the range -18000 deg to 18000 deg
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_CmdAttitudeTlm(uint8_t* rxBuffer, CUBEACP_CmdAttitude_t* returnVal);

/***************************************************************************//**
 * Decode a Tracking Controller Target Reference telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_CmdTrackingTarget_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 *      TlmRangeError if the Geocentric longitude of target telemetry value was outside of the range 0 deg to 360 deg
 *      TlmRangeError if the Geocentric latitude of target telemetry value was outside of the range -90 deg to 90 deg
 *      TlmRangeError if the Geocentric altitude of target telemetry value was outside of the range -20000 meter to 20000 meter
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_CmdTrackingTargetTlm(uint8_t* rxBuffer, CUBEACP_CmdTrackingTarget_t* returnVal);

/***************************************************************************//**
 * Decode a Coarse Sun Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_CoarseSunVec_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_CoarseSunVecTlm(uint8_t* rxBuffer, CUBEACP_CoarseSunVec_t* returnVal);

/***************************************************************************//**
 * Decode a Communication Status telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_CommsStatus_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_CommsStatusTlm(uint8_t* rxBuffer, CUBEACP_CommsStatus_t* returnVal);

/***************************************************************************//**
 * Decode a JPG Conversion Progress telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_ConversionProgress_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_ConversionProgressTlm(uint8_t* rxBuffer, CUBEACP_ConversionProgress_t* returnVal);

/***************************************************************************//**
 * Decode a CubeACP State telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_CubeACPState_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_CubeACPStateTlm(uint8_t* rxBuffer, CUBEACP_CubeACPState_t* returnVal);

/***************************************************************************//**
 * Decode a CubeControl Current Measurements telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_CubeControlCurrents_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_CubeControlCurrentsTlm(uint8_t* rxBuffer, CUBEACP_CubeControlCurrents_t* returnVal);

/***************************************************************************//**
 * Decode a CubeSense Current Measurements telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_CubeSenseCurrents_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_CubeSenseCurrentsTlm(uint8_t* rxBuffer, CUBEACP_CubeSenseCurrents_t* returnVal);

/***************************************************************************//**
 * Decode a Current ADCS State telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_CurrentAdcsState_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_CurrentAdcsStateTlm(uint8_t* rxBuffer, CUBEACP_CurrentAdcsState_t* returnVal);

/***************************************************************************//**
 * Decode a Download Block Ready telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_DownloadBlockReady_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_DownloadBlockReadyTlm(uint8_t* rxBuffer, CUBEACP_DownloadBlockReady_t* returnVal);

/***************************************************************************//**
 * Decode a EDAC Error Counters telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_EdacErrors_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_EdacErrorsTlm(uint8_t* rxBuffer, CUBEACP_EdacErrors_t* returnVal);

/***************************************************************************//**
 * Decode a Estimated Attitude Angles telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_EstimAttitude_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_EstimAttitudeTlm(uint8_t* rxBuffer, CUBEACP_EstimAttitude_t* returnVal);

/***************************************************************************//**
 * Decode a Estimation Data telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_EstimData_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_EstimDataTlm(uint8_t* rxBuffer, CUBEACP_EstimData_t* returnVal);

/***************************************************************************//**
 * Decode a Estimated Gyro Bias telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_EstimGyroBias_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_EstimGyroBiasTlm(uint8_t* rxBuffer, CUBEACP_EstimGyroBias_t* returnVal);

/***************************************************************************//**
 * Decode a Estimated Quaternion telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_EstimQuaternion_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_EstimQuaternionTlm(uint8_t* rxBuffer, CUBEACP_EstimQuaternion_t* returnVal);

/***************************************************************************//**
 * Decode a Estimated Angular Rates telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_EstimRates_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_EstimRatesTlm(uint8_t* rxBuffer, CUBEACP_EstimRates_t* returnVal);

/***************************************************************************//**
 * Decode a Boot And Running Program Status telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_ExtendedIdentification_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_ExtendedIdentificationTlm(uint8_t* rxBuffer, CUBEACP_ExtendedIdentification_t* returnVal);

/***************************************************************************//**
 * Decode a File Download Buffer with File Contents telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_FileDownload_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_FileDownloadTlm(uint8_t* rxBuffer, CUBEACP_FileDownload_t* returnVal);

/***************************************************************************//**
 * Decode a File Information telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_FileInfo_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_FileInfoTlm(uint8_t* rxBuffer, CUBEACP_FileInfo_t* returnVal);

/***************************************************************************//**
 * Decode a Fine Sun Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_FineSunVec_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_FineSunVecTlm(uint8_t* rxBuffer, CUBEACP_FineSunVec_t* returnVal);

/***************************************************************************//**
 * Decode a Hole Map 1 telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_HoleMap1Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Decode a Hole Map 2 telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_HoleMap2Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Decode a Hole Map 3 telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_HoleMap3Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Decode a Hole Map 4 telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_HoleMap4Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Decode a Hole Map 5 telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_HoleMap5Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Decode a Hole Map 6 telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_HoleMap6Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Decode a Hole Map 7 telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_HoleMap7Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Decode a Hole Map 8 telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_HoleMap8Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Decode a Identification telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_Identification_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_IdentificationTlm(uint8_t* rxBuffer, CUBEACP_Identification_t* returnVal);

/***************************************************************************//**
 * Decode a Status of Image Capture and Save Operation telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_ImageSaveStatus_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_ImageSaveStatusTlm(uint8_t* rxBuffer, CUBEACP_ImageSaveStatus_t* returnVal);

/***************************************************************************//**
 * Decode a Initialize Upload Complete telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] busy
 *   Pointer to a bool in which the Busy will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, busy, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_InitializeUploadCompleteTlm(uint8_t* rxBuffer, bool* busy);

/***************************************************************************//**
 * Decode a Estimation Innovation Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_InnovationVec_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_InnovationVecTlm(uint8_t* rxBuffer, CUBEACP_InnovationVec_t* returnVal);

/***************************************************************************//**
 * Decode a Last Logged Event telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_LastLogEvent_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_LastLogEventTlm(uint8_t* rxBuffer, CUBEACP_LastLogEvent_t* returnVal);

/***************************************************************************//**
 * Decode a SRAM Latchup counters telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_LatchupErrors_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_LatchupErrorsTlm(uint8_t* rxBuffer, CUBEACP_LatchupErrors_t* returnVal);

/***************************************************************************//**
 * Decode a SD Log1 Configuration telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_LogSdConfig1_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_LogSdConfig1Tlm(uint8_t* rxBuffer, CUBEACP_LogSdConfig1_t* returnVal);

/***************************************************************************//**
 * Decode a SD Log2 Configuration telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_LogSdConfig2_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_LogSdConfig2Tlm(uint8_t* rxBuffer, CUBEACP_LogSdConfig2_t* returnVal);

/***************************************************************************//**
 * Decode a UART Log Configuration telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_LogUartConfig_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_LogUartConfigTlm(uint8_t* rxBuffer, CUBEACP_LogUartConfig_t* returnVal);

/***************************************************************************//**
 * Decode a Magnetic Field Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_MagField_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_MagFieldTlm(uint8_t* rxBuffer, CUBEACP_MagField_t* returnVal);

/***************************************************************************//**
 * Decode a Magnetorquer Command telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_MagTorquerCmd_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_MagTorquerCmdTlm(uint8_t* rxBuffer, CUBEACP_MagTorquerCmd_t* returnVal);

/***************************************************************************//**
 * Decode a IGRF Modelled Magnetic Field Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_ModelMagVec_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_ModelMagVecTlm(uint8_t* rxBuffer, CUBEACP_ModelMagVec_t* returnVal);

/***************************************************************************//**
 * Decode a Modelled Sun Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_ModelSunVec_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_ModelSunVecTlm(uint8_t* rxBuffer, CUBEACP_ModelSunVec_t* returnVal);

/***************************************************************************//**
 * Decode a Nadir Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_NadirVec_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_NadirVecTlm(uint8_t* rxBuffer, CUBEACP_NadirVec_t* returnVal);

/***************************************************************************//**
 * Decode a SGP4 Orbit Parameters telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_OrbitParameters_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 *      TlmRangeError if the Inclination telemetry value was outside of the range 0 deg to 180 deg
 *      TlmRangeError if the Eccentricity telemetry value was outside of the range 0  to 1 
 *      TlmRangeError if the Right-ascension of the Ascending Node telemetry value was outside of the range 0 deg to 360 deg
 *      TlmRangeError if the Argument of Perigee telemetry value was outside of the range 0 deg to 360 deg
 *      TlmRangeError if the B-Star drag term telemetry value was outside of the range 0  to 1 
 *      TlmRangeError if the Mean Motion telemetry value was outside of the range 0 orbits/day to 20 orbits/day
 *      TlmRangeError if the Mean Anomaly telemetry value was outside of the range 0 deg to 360 deg
 *      TlmRangeError if the Epoch telemetry value was outside of the range 0 year.day to 100000 year.day
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_OrbitParametersTlm(uint8_t* rxBuffer, CUBEACP_OrbitParameters_t* returnVal);

/***************************************************************************//**
 * Decode a ECEF Position telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_PositionECEF_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_PositionECEFTlm(uint8_t* rxBuffer, CUBEACP_PositionECEF_t* returnVal);

/***************************************************************************//**
 * Decode a Satellite Position (ECI) telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_PositionECI_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_PositionECITlm(uint8_t* rxBuffer, CUBEACP_PositionECI_t* returnVal);

/***************************************************************************//**
 * Decode a Satellite Position (LLH) telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_PositionLLH_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_PositionLLHTlm(uint8_t* rxBuffer, CUBEACP_PositionLLH_t* returnVal);

/***************************************************************************//**
 * Decode a Quaternion Covariance telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_QuaternionCovar_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_QuaternionCovarTlm(uint8_t* rxBuffer, CUBEACP_QuaternionCovar_t* returnVal);

/***************************************************************************//**
 * Decode a Quaternion Error Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_QuaternionErrVec_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_QuaternionErrVecTlm(uint8_t* rxBuffer, CUBEACP_QuaternionErrVec_t* returnVal);

/***************************************************************************//**
 * Decode a Angular Rate Covariance telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RateCovar_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RateCovarTlm(uint8_t* rxBuffer, CUBEACP_RateCovar_t* returnVal);

/***************************************************************************//**
 * Decode a Rate Sensor Rates telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RateSensor_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RateSensorTlm(uint8_t* rxBuffer, CUBEACP_RateSensor_t* returnVal);

/***************************************************************************//**
 * Decode a Raw Cam1 Sensor telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawCam1Sens_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawCam1SensTlm(uint8_t* rxBuffer, CUBEACP_RawCam1Sens_t* returnVal);

/***************************************************************************//**
 * Decode a Raw Cam2 Sensor telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawCam2Sens_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawCam2SensTlm(uint8_t* rxBuffer, CUBEACP_RawCam2Sens_t* returnVal);

/***************************************************************************//**
 * Decode a Raw CSS 1 to 6 telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawCss1_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawCss1Tlm(uint8_t* rxBuffer, CUBEACP_RawCss1_t* returnVal);

/***************************************************************************//**
 * Decode a Raw CSS 7 to 10 telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawCss2_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawCss2Tlm(uint8_t* rxBuffer, CUBEACP_RawCss2_t* returnVal);

/***************************************************************************//**
 * Decode a Raw GPS Measurements telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawGPS_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawGPSTlm(uint8_t* rxBuffer, CUBEACP_RawGPS_t* returnVal);

/***************************************************************************//**
 * Decode a Raw GPS Status telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawGpsStatus_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawGpsStatusTlm(uint8_t* rxBuffer, CUBEACP_RawGpsStatus_t* returnVal);

/***************************************************************************//**
 * Decode a Raw GPS Time telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawGpsTime_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawGpsTimeTlm(uint8_t* rxBuffer, CUBEACP_RawGpsTime_t* returnVal);

/***************************************************************************//**
 * Decode a Raw GPS X telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawGpsX_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawGpsXTlm(uint8_t* rxBuffer, CUBEACP_RawGpsX_t* returnVal);

/***************************************************************************//**
 * Decode a Raw GPS Y telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawGpsY_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawGpsYTlm(uint8_t* rxBuffer, CUBEACP_RawGpsY_t* returnVal);

/***************************************************************************//**
 * Decode a Raw GPS Z telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawGpsZ_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawGpsZTlm(uint8_t* rxBuffer, CUBEACP_RawGpsZ_t* returnVal);

/***************************************************************************//**
 * Decode a Raw Magnetometer telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawMagnetometer_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawMagnetometerTlm(uint8_t* rxBuffer, CUBEACP_RawMagnetometer_t* returnVal);

/***************************************************************************//**
 * Decode a Raw Sensor Measurements telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawSensor_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawSensorTlm(uint8_t* rxBuffer, CUBEACP_RawSensor_t* returnVal);

/***************************************************************************//**
 * Decode a Raw Star Tracker telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_RawStarTracker_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_RawStarTrackerTlm(uint8_t* rxBuffer, CUBEACP_RawStarTracker_t* returnVal);

/***************************************************************************//**
 * Decode a Redundant Magnetometer Raw Measurements telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_ReduntMagRaw_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_ReduntMagRawTlm(uint8_t* rxBuffer, CUBEACP_ReduntMagRaw_t* returnVal);

/***************************************************************************//**
 * Decode a Wheel Speed Commands telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_SpeedCmd_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_SpeedCmdTlm(uint8_t* rxBuffer, CUBEACP_SpeedCmd_t* returnVal);

/***************************************************************************//**
 * Decode a SRAM Scrub Parameters telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] scrubSize
 *   Pointer to a uint16_t in which the Scrub Size will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, scrubSize, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_SramScrubSettingsTlm(uint8_t* rxBuffer, uint16_t* scrubSize);

/***************************************************************************//**
 * Decode a Star 1 Body Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_Star1Body_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_Star1BodyTlm(uint8_t* rxBuffer, CUBEACP_Star1Body_t* returnVal);

/***************************************************************************//**
 * Decode a Star 1 Orbit Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_Star1Orbit_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_Star1OrbitTlm(uint8_t* rxBuffer, CUBEACP_Star1Orbit_t* returnVal);

/***************************************************************************//**
 * Decode a Star 1 Raw Data telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_Star1Raw_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_Star1RawTlm(uint8_t* rxBuffer, CUBEACP_Star1Raw_t* returnVal);

/***************************************************************************//**
 * Decode a Star 2 Body Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_Star2Body_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_Star2BodyTlm(uint8_t* rxBuffer, CUBEACP_Star2Body_t* returnVal);

/***************************************************************************//**
 * Decode a Star 2 Orbit Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_Star2Orbit_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_Star2OrbitTlm(uint8_t* rxBuffer, CUBEACP_Star2Orbit_t* returnVal);

/***************************************************************************//**
 * Decode a Star 2 Raw Data telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_Star2Raw_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_Star2RawTlm(uint8_t* rxBuffer, CUBEACP_Star2Raw_t* returnVal);

/***************************************************************************//**
 * Decode a Star 3 Body Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_Star3Body_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_Star3BodyTlm(uint8_t* rxBuffer, CUBEACP_Star3Body_t* returnVal);

/***************************************************************************//**
 * Decode a Star 3 Orbit Vector telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_Star3Orbit_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_Star3OrbitTlm(uint8_t* rxBuffer, CUBEACP_Star3Orbit_t* returnVal);

/***************************************************************************//**
 * Decode a Star 3 Raw Data telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_Star3Raw_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_Star3RawTlm(uint8_t* rxBuffer, CUBEACP_Star3Raw_t* returnVal);

/***************************************************************************//**
 * Decode a Star Magnitude telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_StarMagnitude_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_StarMagnitudeTlm(uint8_t* rxBuffer, CUBEACP_StarMagnitude_t* returnVal);

/***************************************************************************//**
 * Decode a Star Performance telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_StarPerformance_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_StarPerformanceTlm(uint8_t* rxBuffer, CUBEACP_StarPerformance_t* returnVal);

/***************************************************************************//**
 * Decode a Star Timing telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_StarTiming_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_StarTimingTlm(uint8_t* rxBuffer, CUBEACP_StarTiming_t* returnVal);

/***************************************************************************//**
 * Decode a Telecommand Acknowledge telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_TelecommandAcknowledge_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_TelecommandAcknowledgeTlm(uint8_t* rxBuffer, CUBEACP_TelecommandAcknowledge_t* returnVal);

/***************************************************************************//**
 * Decode a Current Unix Time telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_UnixTime_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_UnixTimeTlm(uint8_t* rxBuffer, CUBEACP_UnixTime_t* returnVal);

/***************************************************************************//**
 * Decode a Unix Time Save to Flash telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_UnixTimeSave_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_UnixTimeSaveTlm(uint8_t* rxBuffer, CUBEACP_UnixTimeSave_t* returnVal);

/***************************************************************************//**
 * Decode a Upload Block Complete telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_UploadBlockComplete_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_UploadBlockCompleteTlm(uint8_t* rxBuffer, CUBEACP_UploadBlockComplete_t* returnVal);

/***************************************************************************//**
 * Decode a Satellite Velocity (ECI) telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_VelocityECI_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_VelocityECITlm(uint8_t* rxBuffer, CUBEACP_VelocityECI_t* returnVal);

/***************************************************************************//**
 * Decode a Wheel Currents telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_WheelCurrents_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_WheelCurrentsTlm(uint8_t* rxBuffer, CUBEACP_WheelCurrents_t* returnVal);

/***************************************************************************//**
 * Decode a Wheel Speed telemetry frame from the CubeAcp
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEACP_WheelSpeed_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEACP_WheelSpeedTlm(uint8_t* rxBuffer, CUBEACP_WheelSpeed_t* returnVal);

/***************************************************************************//**
 * Send a ADCS Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] magtorq1
 *   Magnetorquer 1 Configuration
 * @param[in] magtorq2
 *   Magnetorquer 2 Configuration
 * @param[in] magtorq3
 *   Magnetorquer 3 Configuration
 * @param[in] rW1Conf
 *   RW1 Configuration
 * @param[in] rW2Conf
 *   RW2 Configuration
 * @param[in] rW3Conf
 *   RW3 Configuration
 * @param[in] rW4Conf
 *   RW4 or Momentum wheel Configuration
 * @param[in] gyro1Conf
 *   Gyro1 Configuration
 * @param[in] gyro2Conf
 *   Gyro2 Configuration
 * @param[in] gyro3Conf
 *   Gyro3 Configuration
 * @param[in] css1Conf
 *   CSS1 Configuration
 * @param[in] css2Conf
 *   CSS2 Configuration
 * @param[in] css3Conf
 *   CSS3 Configuration
 * @param[in] css4Conf
 *   CSS4 Configuration
 * @param[in] css5Conf
 *   CSS5 Configuration
 * @param[in] css6Conf
 *   CSS6 Configuration
 * @param[in] css7Conf
 *   CSS7 Configuration
 * @param[in] css8Conf
 *   CSS8 Configuration
 * @param[in] css9Conf
 *   CSS9 Configuration
 * @param[in] css10Conf
 *   CSS10 Configuration
 * @param[in] css1Scale
 *   CSS1 Relative Scaling Factor
 * @param[in] css2Scale
 *   CSS2 Relative Scaling Factor
 * @param[in] css3Scale
 *   CSS3 Relative Scaling Factor
 * @param[in] css4Scale
 *   CSS4 Relative Scaling Factor
 * @param[in] css5Scale
 *   CSS5 Relative Scaling Factor
 * @param[in] css6Scale
 *   CSS6 Relative Scaling Factor
 * @param[in] css7Scale
 *   CSS7 Relative Scaling Factor
 * @param[in] css8Scale
 *   CSS8 Relative Scaling Factor
 * @param[in] css9Scale
 *   CSS9 Relative Scaling Factor
 * @param[in] css10Scale
 *   CSS10 Relative Scaling Factor
 * @param[in] cssMinimum
 *   CSS Threshold
 * @param[in] cam1Angle1
 *   Cam1 Sensor Mounting Transform Alpha Angle
 *   (in [deg] units)
 * @param[in] cam1Angle2
 *   Cam1 Sensor Mounting Transform Beta Angle
 *   (in [deg] units)
 * @param[in] cam1Angle3
 *   Cam1 Sensor Mounting Transform Gamma Angle
 *   (in [deg] units)
 * @param[in] cam1Threshold
 *   
 * @param[in] cam1AutoAdj
 *   0 = disabled and 1 = enabled
 * @param[in] cam1Exposure
 *   exposure time register value
 * @param[in] cam1BoreX
 *   X Pixel location of Cam1 boresight
 *   (in [pixels] units)
 * @param[in] cam1BoreY
 *   Y Pixel location of Cam1 boresight
 *   (in [pixels] units)
 * @param[in] cam1Shift
 *   Use Cam2 processing chain for Cam1 detection
 * @param[in] cam2Angle1
 *   Cam2 Sensor Mounting Transform Alpha Angle
 *   (in [deg] units)
 * @param[in] cam2Angle2
 *   Cam2 Sensor Mounting Transform Beta Angle
 *   (in [deg] units)
 * @param[in] cam2Angle3
 *   Cam2 Sensor Mounting Transform Gamma Angle
 *   (in [deg] units)
 * @param[in] cam2Threshold
 *   Cam2 detection threshold
 * @param[in] cam2AutoAdj
 *   0 = disabled and 1 = enabled
 * @param[in] cam2Exposure
 *   exposure time register value
 * @param[in] cam2BoreX
 *   X Pixel location of Cam2 boresight
 *   (in [pixels] units)
 * @param[in] cam2BoreY
 *   Y Pixel location of Cam2 boresight
 *   (in [pixels] units)
 * @param[in] cam2Shift
 *   Use Sun processing chain for Cam2 detection
 * @param[in] maskArea1Xmin
 *   Minimum X of Area 1
 * @param[in] maskArea1Xmax
 *   Maximum X of Area 1
 * @param[in] maskArea1Ymin
 *   Minimum Y of Area 1
 * @param[in] maskArea1Ymax
 *   Maximum Y of Area 1
 * @param[in] maskArea2Xmin
 *   Minimum X of Area 2
 * @param[in] maskArea2Xmax
 *   Maximum X of Area 2
 * @param[in] maskArea2Ymin
 *   Minimum Y of Area 2
 * @param[in] maskArea2Ymax
 *   Maximum Y of Area 2
 * @param[in] maskArea3Xmin
 *   Minimum X of Area 3
 * @param[in] maskArea3Xmax
 *   Maximum X of Area 3
 * @param[in] maskArea3Ymin
 *   Minimum Y of Area 3
 * @param[in] maskArea3Ymax
 *   Maximum Y of Area 3
 * @param[in] maskArea4Xmin
 *   Minimum X of Area 4
 * @param[in] maskArea4Xmax
 *   Maximum X of Area 4
 * @param[in] maskArea4Ymin
 *   Minimum Y of Area 4
 * @param[in] maskArea4Ymax
 *   Maximum Y of Area 4
 * @param[in] maskArea5Xmin
 *   Minimum X of Area 5
 * @param[in] maskArea5Xmax
 *   Maximum X of Area 5
 * @param[in] maskArea5Ymin
 *   Minimum Y of Area 5
 * @param[in] maskArea5Ymax
 *   Maximum Y of Area 5
 * @param[in] magmAngle1
 *   Magnetometer Mounting Transform Alpha Angle
 *   (in [deg] units)
 * @param[in] magmAngle2
 *   Magnetometer Mounting Transform Beta Angle
 *   (in [deg] units)
 * @param[in] magmAngle3
 *   Magnetometer Mounting Transform Gamma Angle
 *   (in [deg] units)
 * @param[in] magmOffset1
 *   Magnetometer Channel 1 Offset
 * @param[in] magmOffset2
 *   Magnetometer Channel 2 Offset
 * @param[in] magmOffset3
 *   Magnetometer Channel 3 Offset
 * @param[in] magmSens11
 *   Magnetometer Sensitivity Matrix S11
 * @param[in] magmSens22
 *   Magnetometer Sensitivity Matrix S22
 * @param[in] magmSens33
 *   Magnetometer Sensitivity Matrix S33
 * @param[in] magmSens12
 *   Magnetometer Sensitivity Matrix S12
 * @param[in] magmSens13
 *   Magnetometer Sensitivity Matrix S13
 * @param[in] magmSens21
 *   Magnetometer Sensitivity Matrix S21
 * @param[in] magmSens23
 *   Magnetometer Sensitivity Matrix S23
 * @param[in] magmSens31
 *   Magnetometer Sensitivity Matrix S31
 * @param[in] magmSens32
 *   Magnetometer Sensitivity Matrix S32
 * @param[in] xRateOffset
 *   X-Rate Sensor Offset
 *   (in [deg/s] units)
 * @param[in] yRateOffset
 *   Y-Rate Sensor Offset
 *   (in [deg/s] units)
 * @param[in] zRateOffset
 *   Z-Rate Sensor Offset
 *   (in [deg/s] units)
 * @param[in] rateSensorMult
 *   Multiplier of rate sensor measurement
 * @param[in] starAngle1
 *   StarTracker Mounting Transform Alpha Angle
 *   (in [deg] units)
 * @param[in] starAngle2
 *   StarTracker Mounting Transform Beta Angle
 *   (in [deg] units)
 * @param[in] starAngle3
 *   StarTracker Mounting Transform Gamma Angle
 *   (in [deg] units)
 * @param[in] starExposure
 *   exposure time register value
 * @param[in] detectionThreshold
 *   StarTracker detection threshold
 * @param[in] starThreshold
 *   StarTracker star threshold
 * @param[in] maxStarMatched
 *   Maximum of stars that the star tracker will match
 * @param[in] maxStarPixel
 *   Maximum pixels in a star
 * @param[in] maxStarNoise
 *   Maximum star pixel noise
 * @param[in] minStarPixel
 *   Minimum pixels in a star
 * @param[in] starErrorMargin
 *   % Error margin of the star identification
 *   (in [%] units)
 * @param[in] starCentX
 *   Pixel centroid X
 *   (valid range is between -5000  and 5000 )
 * @param[in] starCentY
 *   Pixel centroid Y
 *   (valid range is between -5000  and 5000 )
 * @param[in] starFocal
 *   Star Tracker Focal Length
 *   (in [mm] units)
 * @param[in] syncDelay
 *   Synchronization delay within star Tracker
 * @param[in] ks
 *   Detumbling Spin Gain (Ks)
 *   (valid range is between 0  and 10000 )
 * @param[in] kd
 *   Detumbling Damping Gain (Kd)
 *   (valid range is between 0  and 10000 )
 * @param[in] wy_ref
 *   Reference spin rate (wy-ref). Must always be smaller than 0
 *   (in [deg/s] units)
 *   (valid range is between -100000 deg/s and 0 deg/s)
 * @param[in] kdf
 *   Fast BDot Detumbling Gain
 *   (valid range is between 0  and 100 )
 * @param[in] kh
 *   Y-Momentum Control Gain (Kh)
 *   (valid range is between 0  and 10000 )
 * @param[in] kn
 *   Y-momentum Nutation Damping Gain (Kn)
 *   (valid range is between 0  and 10000 )
 * @param[in] kp1
 *   Y-momentum Proportional Gain (Kp1)
 *   (valid range is between 0  and 100 )
 * @param[in] kd1
 *   Y-momentum Derivative Gain (Kd1)
 *   (valid range is between 0  and 100 )
 * @param[in] h_ref
 *   Reference Wheel Momentum (H-ref). Must always be smaller than 0
 *   (in [Nms] units)
 *   (valid range is between -10 Nms and 0 Nms)
 * @param[in] kp2
 *   RWheel Proportional Gain (Kp2)
 *   (valid range is between 0  and 100 )
 * @param[in] kd2
 *   RWheel Derivative Gain (Kd2)
 *   (valid range is between 0  and 100 )
 * @param[in] kp3
 *   Tracking Proportional Gain (Kp3)
 *   (valid range is between 0  and 100 )
 * @param[in] kd3
 *   Tracking Derivative Gain (Kd3)
 *   (valid range is between 0  and 100 )
 * @param[in] ki3
 *   Tracking Integral Gain (Ki3)
 *   (valid range is between 0  and 100 )
 * @param[in] ixx
 *   Moment Of Inertia - Ixx
 *   (in [kg.m^2] units)
 *   (valid range is between 0 kg.m^2 and 10 kg.m^2)
 * @param[in] iyy
 *   Moment Of Inertia - Iyy
 *   (in [kg.m^2] units)
 *   (valid range is between 0 kg.m^2 and 10 kg.m^2)
 * @param[in] izz
 *   Moment Of Inertia - Izz
 *   (in [kg.m^2] units)
 *   (valid range is between 0 kg.m^2 and 10 kg.m^2)
 * @param[in] ixy
 *   Moment Of Inertia - Ixy
 *   (in [kg.m^2] units)
 *   (valid range is between -10 kg.m^2 and 10 kg.m^2)
 * @param[in] ixz
 *   Moment Of Inertia - Ixz
 *   (in [kg.m^2] units)
 *   (valid range is between -10 kg.m^2 and 10 kg.m^2)
 * @param[in] iyz
 *   Moment Of Inertia - Iyz
 *   (in [kg.m^2] units)
 *   (valid range is between -10 kg.m^2 and 10 kg.m^2)
 * @param[in] magRateNoise
 *   Magnetometer Rate Filter System Noise
 *   (valid range is between 0  and 100 )
 * @param[in] ekfSysNoise
 *   EKF System Noise
 *   (valid range is between 0  and 100 )
 * @param[in] cssNoise
 *   CSS Measurement Noise
 *   (valid range is between 0  and 100 )
 * @param[in] sunNoise
 *   Sun Sensor Measurement Noise
 *   (valid range is between 0  and 100 )
 * @param[in] nadirNoise
 *   Nadir Sensor Measurement Noise
 *   (valid range is between 0  and 100 )
 * @param[in] magNoise
 *   Magnetometer Measurement Noise
 *   (valid range is between 0  and 100 )
 * @param[in] starNoise
 *   Star Tracker Measurement Noise
 *   (valid range is between 0  and 100 )
 * @param[in] useSunEst
 *   Use Sun Sensor measurement in EKF
 * @param[in] useNadirEst
 *   Use Nadir Sensor measurement in EKF
 * @param[in] useCssEst
 *   Use CSS measurement in EKF
 * @param[in] useStarEst
 *   Use Star Tracker measurement in EKF
 * @param[in] magMode
 *   Mode describing which magnetometer is used for estimation and control
 * @param[in] cam1Cam2Period
 *   Cam1 and Cam2 sensor sampling period. Lower four bits are Cam1 period and upper four bits the Cam2 period. Setting period to zero for sensor will disable sampling of sensor.
 *   (in [s] units)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, magtorq1, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, magtorq2, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, magtorq3, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, rW1Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, rW2Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, rW3Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, rW4Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, gyro1Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, gyro2Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, gyro3Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, css1Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, css2Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, css3Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, css4Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, css5Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, css6Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, css7Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, css8Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, css9Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, css10Conf, was not a valid CUBEACP_AxisSelect_t enumeration
 *      TcInvalidParam if the input parameter, starCentX, was outside of the range -5000  to 5000 
 *      TcInvalidParam if the input parameter, starCentY, was outside of the range -5000  to 5000 
 *      TcInvalidParam if the input parameter, ks, was outside of the range 0  to 10000 
 *      TcInvalidParam if the input parameter, kd, was outside of the range 0  to 10000 
 *      TcInvalidParam if the input parameter, wy_ref, was outside of the range -100000 deg/s to 0 deg/s
 *      TcInvalidParam if the input parameter, kdf, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, kh, was outside of the range 0  to 10000 
 *      TcInvalidParam if the input parameter, kn, was outside of the range 0  to 10000 
 *      TcInvalidParam if the input parameter, kp1, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, kd1, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, h_ref, was outside of the range -10 Nms to 0 Nms
 *      TcInvalidParam if the input parameter, kp2, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, kd2, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, kp3, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, kd3, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, ki3, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, ixx, was outside of the range 0 kg.m^2 to 10 kg.m^2
 *      TcInvalidParam if the input parameter, iyy, was outside of the range 0 kg.m^2 to 10 kg.m^2
 *      TcInvalidParam if the input parameter, izz, was outside of the range 0 kg.m^2 to 10 kg.m^2
 *      TcInvalidParam if the input parameter, ixy, was outside of the range -10 kg.m^2 to 10 kg.m^2
 *      TcInvalidParam if the input parameter, ixz, was outside of the range -10 kg.m^2 to 10 kg.m^2
 *      TcInvalidParam if the input parameter, iyz, was outside of the range -10 kg.m^2 to 10 kg.m^2
 *      TcInvalidParam if the input parameter, magRateNoise, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, ekfSysNoise, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, cssNoise, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, sunNoise, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, nadirNoise, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, magNoise, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, starNoise, was outside of the range 0  to 100 
 *      TcInvalidParam if the input parameter, magMode, was not a valid CUBEACP_MagModeVal_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_AdcsConfigCmd(uint8_t* tcBuffer, CUBEACP_AdcsConfig_t* setVal);

/***************************************************************************//**
 * Send a ADCS Run Mode command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] enabled
 *   Set ADCS enabled state. When disabled the CubeACP will not use the ADCS I2C bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, enabled, was not a valid CUBEACP_AdcsRunMode_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_AdcsEnabledCmd(uint8_t* tcBuffer, CUBEACP_AdcsRunMode_t enabled);

/***************************************************************************//**
 * Send a ADCS Power Control command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] cubeControlSignalPower
 *   Control power to electronics of CubeControl Signal PIC
 * @param[in] cubeControlMotorPower
 *   Control power to electronics of CubeControl Motor PIC
 * @param[in] cubeSensePower
 *   Control power to the CubeSense
 * @param[in] cubeStarPower
 *   Control power to the CubeStar
 * @param[in] cubeWheel1Power
 *   Control power to the CubeWheel1
 * @param[in] cubeWheel2Power
 *   Control power to the CubeWheel2
 * @param[in] cubeWheel3Power
 *   Control power to the CubeWheel3
 * @param[in] motorPower
 *   Control power to Motor electronics
 * @param[in] gpsLnaPower
 *   Control power to GPS LNA
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, cubeControlSignalPower, was not a valid CUBEACP_PowerSelect_t enumeration
 *      TcInvalidParam if the input parameter, cubeControlMotorPower, was not a valid CUBEACP_PowerSelect_t enumeration
 *      TcInvalidParam if the input parameter, cubeSensePower, was not a valid CUBEACP_PowerSelect_t enumeration
 *      TcInvalidParam if the input parameter, cubeStarPower, was not a valid CUBEACP_PowerSelect_t enumeration
 *      TcInvalidParam if the input parameter, cubeWheel1Power, was not a valid CUBEACP_PowerSelect_t enumeration
 *      TcInvalidParam if the input parameter, cubeWheel2Power, was not a valid CUBEACP_PowerSelect_t enumeration
 *      TcInvalidParam if the input parameter, cubeWheel3Power, was not a valid CUBEACP_PowerSelect_t enumeration
 *      TcInvalidParam if the input parameter, motorPower, was not a valid CUBEACP_PowerSelect_t enumeration
 *      TcInvalidParam if the input parameter, gpsLnaPower, was not a valid CUBEACP_PowerSelect_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_AdcsPowerCmd(uint8_t* tcBuffer, CUBEACP_AdcsPower_t* setVal);

/***************************************************************************//**
 * Send a Advance File List Read Pointer command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_AdvanceFileListPtrCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Advance Log Pointer command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_AdvanceLogPtrCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Cache enabled state command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] enabled
 *   Enabled state
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_CacheCmd(uint8_t* tcBuffer, bool enabled);

/***************************************************************************//**
 * Send a Set Cam1 Sensor Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_Cam1ConfigCmd(uint8_t* tcBuffer, CUBEACP_Cam1Config_t* setVal);

/***************************************************************************//**
 * Send a Set Cam2 Sensor Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_Cam2ConfigCmd(uint8_t* tcBuffer, CUBEACP_Cam2Config_t* setVal);

/***************************************************************************//**
 * Send a Clear Errors command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] aDCSErrors
 *   Clear ADCS error flags
 * @param[in] hKErrors
 *   Clear HK Error flags
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_ClearErrorsCmd(uint8_t* tcBuffer, CUBEACP_ClearErrors_t* setVal);

/***************************************************************************//**
 * Send a Commanded Attitude Angles command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] roll
 *   Commanded roll angle
 *   (in [deg] units)
 *   (valid range is between -9000 deg and 9000 deg)
 * @param[in] pitch
 *   Commanded pitch angle
 *   (in [deg] units)
 *   (valid range is between -18000 deg and 18000 deg)
 * @param[in] yaw
 *   Commanded yaw angle
 *   (in [deg] units)
 *   (valid range is between -18000 deg and 18000 deg)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, roll, was outside of the range -9000 deg to 9000 deg
 *      TcInvalidParam if the input parameter, pitch, was outside of the range -18000 deg to 18000 deg
 *      TcInvalidParam if the input parameter, yaw, was outside of the range -18000 deg to 18000 deg
 ******************************************************************************/
uint16_t CUBEACP_CmdAttitudeCmd(uint8_t* tcBuffer, CUBEACP_CmdAttitude_t* setVal);

/***************************************************************************//**
 * Send a Tracking Controller Target Reference command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] longRef
 *   Geocentric longitude of target
 *   (in [deg] units)
 *   (valid range is between 0 deg and 360 deg)
 * @param[in] latRef
 *   Geocentric latitude of target
 *   (in [deg] units)
 *   (valid range is between -90 deg and 90 deg)
 * @param[in] altRef
 *   Geocentric altitude of target
 *   (in [meter] units)
 *   (valid range is between -20000 meter and 20000 meter)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, longRef, was outside of the range 0 deg to 360 deg
 *      TcInvalidParam if the input parameter, latRef, was outside of the range -90 deg to 90 deg
 *      TcInvalidParam if the input parameter, altRef, was outside of the range -20000 meter to 20000 meter
 ******************************************************************************/
uint16_t CUBEACP_CmdTrackingTargetCmd(uint8_t* tcBuffer, float longRef, float latRef, float altRef);

/***************************************************************************//**
 * Send a Set Attitude Control Mode command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] controlModeSelection
 *   Attitude control mode
 * @param[in] overrideErrors
 *   Ignore current state and force control mode (if this flag is not set, certain control transitions will not be allowed)
 * @param[in] timeout
 *   Control timeout duration. Control will revert to None when timer reaches zero. 0xFFFF for infinite timeout
 *   (in [s] units)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, controlModeSelection, was not a valid CUBEACP_ConModeSelect_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_ControlModeCmd(uint8_t* tcBuffer, CUBEACP_ControlMode_t* setVal);

/***************************************************************************//**
 * Send a Convert to JPG file command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] srcFileCtr
 *   Source File Counter
 * @param[in] qualityFactor
 *   Quality Factor
 * @param[in] whiteBalance
 *   White Balance
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_ConvertCmd(uint8_t* tcBuffer, uint8_t srcFileCtr, uint8_t qualityFactor, uint8_t whiteBalance);

/***************************************************************************//**
 * Send a Set CSS Alignment Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_CssConfig1Cmd(uint8_t* tcBuffer, CUBEACP_CssConfig1_t* setVal);

/***************************************************************************//**
 * Send a Set CSS Scale Factor Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_CssConfig2Cmd(uint8_t* tcBuffer, CUBEACP_CssConfig2_t* setVal);

/***************************************************************************//**
 * Send a Default Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_DefaultConfigCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Deploy Magnetometer Boom command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] timeout
 *   Deployment actuation timeout value
 *   (in [s] units)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_DeployMagnetometerCmd(uint8_t* tcBuffer, uint8_t timeout);

/***************************************************************************//**
 * Send a Set Detumbling Control Parameters command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_DetumbleParamsCmd(uint8_t* tcBuffer, CUBEACP_DetumbleParams_t* setVal);

/***************************************************************************//**
 * Send a Initiate Download Burst command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] messageLength
 *   Message Length
 * @param[in] ignoreHoleMap
 *   Ignore Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_DownloadBurstCmd(uint8_t* tcBuffer, uint8_t messageLength, bool ignoreHoleMap);

/***************************************************************************//**
 * Send a Erase File command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] fileType
 *   File Type
 * @param[in] fileCtr
 *   File Counter
 * @param[in] eraseAll
 *   Erase All
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, fileType, was not a valid CUBEACP_FileType_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_EraseFileCmd(uint8_t* tcBuffer, CUBEACP_FileType_t fileType, uint8_t fileCtr, bool eraseAll);

/***************************************************************************//**
 * Send a Set Attitude Estimation Mode command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] estimModeSelection
 *   Attitude estimation mode
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, estimModeSelection, was not a valid CUBEACP_EstimModeSelect_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_EstimModeCmd(uint8_t* tcBuffer, CUBEACP_EstimModeSelect_t estimModeSelection);

/***************************************************************************//**
 * Send a Set Estimation Parameters 1 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_EstimParams1Cmd(uint8_t* tcBuffer, CUBEACP_EstimParams1_t* setVal);

/***************************************************************************//**
 * Send a Set Estimation Parameters 2 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_EstimParams2Cmd(uint8_t* tcBuffer, CUBEACP_EstimParams2_t* setVal);

/***************************************************************************//**
 * Send a File Upload Packet command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] packetNo
 *   Packet Number
 * @param[in] fileBytes
 *   File Bytes
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_FileUploadCmd(uint8_t* tcBuffer, uint16_t packetNo, uint8_t* fileBytes);

/***************************************************************************//**
 * Send a Finalize Upload Block command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] destination
 *   Destination
 * @param[in] offset
 *   Offset into file
 * @param[in] blockLen
 *   Length of block 
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, destination, was not a valid CUBEACP_FileUploadDestination_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_FinalizeUploadBlockCmd(uint8_t* tcBuffer, CUBEACP_FileUploadDestination_t destination, uint32_t offset, uint16_t blockLen);

/***************************************************************************//**
 * Send a Set Rate Gyro Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_GyroConfigCmd(uint8_t* tcBuffer, CUBEACP_GyroConfig_t* setVal);

/***************************************************************************//**
 * Send a Hole Map 1 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_HoleMap1Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 2 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_HoleMap2Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 3 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_HoleMap3Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 4 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_HoleMap4Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 5 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_HoleMap5Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 6 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_HoleMap6Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 7 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_HoleMap7Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 8 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_HoleMap8Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Initiate File Upload command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] destination
 *   Destination
 * @param[in] blockSize
 *   Block Size
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, destination, was not a valid CUBEACP_FileUploadDestination_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_InitiateFileUploadCmd(uint8_t* tcBuffer, CUBEACP_FileUploadDestination_t destination, uint8_t blockSize);

/***************************************************************************//**
 * Send a Load File Download Block command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] fileType
 *   File Type
 * @param[in] counter
 *   Counter
 * @param[in] offset
 *   Offset
 * @param[in] length
 *   Block Length
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, fileType, was not a valid CUBEACP_FileType_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_LoadDownloadBlockCmd(uint8_t* tcBuffer, CUBEACP_FileType_t fileType, uint8_t counter, uint32_t offset, uint16_t length);

/***************************************************************************//**
 * Send a SD Log1 Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] logSelection
 *   Log Selection - up to 80 flags indicating which telemetry frames should be logged
 * @param[in] period
 *   Log period. Set to 0 to disable logging
 * @param[in] destination
 *   Which SD card to use to store log file
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, destination, was not a valid CUBEACP_SdLogSelect_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_LogSdConfig1Cmd(uint8_t* tcBuffer, uint8_t* logSelection, uint16_t period, CUBEACP_SdLogSelect_t destination);

/***************************************************************************//**
 * Send a SD Log2 Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] logSelection
 *   Log Selection - up to 80 flags indicating which telemetry frames should be logged
 * @param[in] period
 *   Log period. Set to 0 to disable logging
 * @param[in] destination
 *   Which SD card to use to store log file
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, destination, was not a valid CUBEACP_SdLogSelect_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_LogSdConfig2Cmd(uint8_t* tcBuffer, uint8_t* logSelection, uint16_t period, CUBEACP_SdLogSelect_t destination);

/***************************************************************************//**
 * Send a UART Log Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] selection
 *   Log Selection - up to 80 flags indicating which telemetry frames should be logged
 * @param[in] period
 *   Log period. Set to 0 to disable logging
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_LogUartConfigCmd(uint8_t* tcBuffer, uint8_t* selection, uint16_t period);

/***************************************************************************//**
 * Send a Set Magnetometer Mounting Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_MagConfig1Cmd(uint8_t* tcBuffer, CUBEACP_MagConfig1_t* setVal);

/***************************************************************************//**
 * Send a Set Magnetometer Offset and Scaling Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_MagConfig2Cmd(uint8_t* tcBuffer, CUBEACP_MagConfig2_t* setVal);

/***************************************************************************//**
 * Send a Set Magnetometer Sensitivity Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_MagConfig3Cmd(uint8_t* tcBuffer, CUBEACP_MagConfig3_t* setVal);

/***************************************************************************//**
 * Send a Set Mode of Magnetometer Operation command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] modeSetting
 *   Mode describing which magnetometer is used for estimation and control
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, modeSetting, was not a valid CUBEACP_MagModeVal_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_MagModeCmd(uint8_t* tcBuffer, CUBEACP_MagModeVal_t modeSetting);

/***************************************************************************//**
 * Send a Set Magnetorquer Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_MagtorqConfigCmd(uint8_t* tcBuffer, CUBEACP_MagtorqConfig_t* setVal);

/***************************************************************************//**
 * Send a Set Moments of Inertia command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_MoICmd(uint8_t* tcBuffer, CUBEACP_MoI_t* setVal);

/***************************************************************************//**
 * Send a Set Nadir Sensor Mask Configuration 1 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_NadirMaskConfig1Cmd(uint8_t* tcBuffer, CUBEACP_NadirMaskConfig1_t* setVal);

/***************************************************************************//**
 * Send a Set Nadir Sensor Mask Configuration 2 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_NadirMaskConfig2Cmd(uint8_t* tcBuffer, CUBEACP_NadirMaskConfig2_t* setVal);

/***************************************************************************//**
 * Send a Set Nadir Sensor Mask Configuration 3 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_NadirMaskConfig3Cmd(uint8_t* tcBuffer, CUBEACP_NadirMaskConfig3_t* setVal);

/***************************************************************************//**
 * Send a Set Nadir Sensor Mask Configuration 4 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_NadirMaskConfig4Cmd(uint8_t* tcBuffer, CUBEACP_NadirMaskConfig4_t* setVal);

/***************************************************************************//**
 * Send a Set Nadir Sensor Mask Configuration 5 command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_NadirMaskConfig5Cmd(uint8_t* tcBuffer, CUBEACP_NadirMaskConfig5_t* setVal);

/***************************************************************************//**
 * Send a Set SGP4 Orbit Argument of Perigee command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_OrbitArgPerCmd(uint8_t* tcBuffer, CUBEACP_OrbitArgPer_t* setVal);

/***************************************************************************//**
 * Send a Set SGP4 Orbit B-Star Drag term command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_OrbitBStarCmd(uint8_t* tcBuffer, CUBEACP_OrbitBStar_t* setVal);

/***************************************************************************//**
 * Send a Set SGP4 Orbit Eccentricity command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_OrbitEccentricityCmd(uint8_t* tcBuffer, CUBEACP_OrbitEccentricity_t* setVal);

/***************************************************************************//**
 * Send a Set SGP4 Orbit Epoch command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_OrbitEpochCmd(uint8_t* tcBuffer, CUBEACP_OrbitEpoch_t* setVal);

/***************************************************************************//**
 * Send a Set SGP4 Orbit Inclination command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_OrbitInclinationCmd(uint8_t* tcBuffer, CUBEACP_OrbitInclination_t* setVal);

/***************************************************************************//**
 * Send a Set SGP4 Orbit Mean Anomaly command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_OrbitMeanAnomCmd(uint8_t* tcBuffer, CUBEACP_OrbitMeanAnom_t* setVal);

/***************************************************************************//**
 * Send a Set SGP4 Orbit Mean Motion command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_OrbitMeanMotCmd(uint8_t* tcBuffer, CUBEACP_OrbitMeanMot_t* setVal);

/***************************************************************************//**
 * Send a SGP4 Orbit Parameters command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] inclination
 *   Inclination
 *   (in [deg] units)
 *   (valid range is between 0 deg and 180 deg)
 * @param[in] eccentricity
 *   Eccentricity
 *   (valid range is between 0  and 1 )
 * @param[in] raan
 *   Right-ascension of the Ascending Node
 *   (in [deg] units)
 *   (valid range is between 0 deg and 360 deg)
 * @param[in] argPerigee
 *   Argument of Perigee
 *   (in [deg] units)
 *   (valid range is between 0 deg and 360 deg)
 * @param[in] bstar
 *   B-Star drag term
 *   (valid range is between 0  and 1 )
 * @param[in] meanMotion
 *   Mean Motion
 *   (in [orbits/day] units)
 *   (valid range is between 0 orbits/day and 20 orbits/day)
 * @param[in] meanAnomaly
 *   Mean Anomaly
 *   (in [deg] units)
 *   (valid range is between 0 deg and 360 deg)
 * @param[in] epoch
 *   Epoch (year.day)
 *   (in [year.day] units)
 *   (valid range is between 0 year.day and 100000 year.day)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, inclination, was outside of the range 0 deg to 180 deg
 *      TcInvalidParam if the input parameter, eccentricity, was outside of the range 0  to 1 
 *      TcInvalidParam if the input parameter, raan, was outside of the range 0 deg to 360 deg
 *      TcInvalidParam if the input parameter, argPerigee, was outside of the range 0 deg to 360 deg
 *      TcInvalidParam if the input parameter, bstar, was outside of the range 0  to 1 
 *      TcInvalidParam if the input parameter, meanMotion, was outside of the range 0 orbits/day to 20 orbits/day
 *      TcInvalidParam if the input parameter, meanAnomaly, was outside of the range 0 deg to 360 deg
 *      TcInvalidParam if the input parameter, epoch, was outside of the range 0 year.day to 100000 year.day
 ******************************************************************************/
uint16_t CUBEACP_OrbitParametersCmd(uint8_t* tcBuffer, CUBEACP_OrbitParameters_t* setVal);

/***************************************************************************//**
 * Send a Set SGP4 Orbit RAAN command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_OrbitRaanCmd(uint8_t* tcBuffer, CUBEACP_OrbitRaan_t* setVal);

/***************************************************************************//**
 * Send a Set Products of Inertia command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_PoICmd(uint8_t* tcBuffer, CUBEACP_PoI_t* setVal);

/***************************************************************************//**
 * Send a Set Rate Sensor Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_RateConfigCmd(uint8_t* tcBuffer, CUBEACP_RateConfig_t* setVal);

/***************************************************************************//**
 * Send a Reset command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] magic
 *   Magic number to make sure it is a valid reset command. Should equal 0x5A
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_ResetCmd(uint8_t* tcBuffer, uint8_t magic);

/***************************************************************************//**
 * Send a Reset Boot Registers command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_ResetBootRegistersCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Reset File List Read Pointer command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_ResetFileListPtrCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Reset Log Pointer command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_ResetLogPtrCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Reset Upload Block command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_ResetUploadBlockCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Set Reaction Wheel Control Parameters command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_RWheelParamsCmd(uint8_t* tcBuffer, CUBEACP_RWheelParams_t* setVal);

/***************************************************************************//**
 * Send a Save Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_SaveConfigCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Save Image command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] cameraSelect
 *   Camera Selection
 *   (in [s] units)
 * @param[in] imageSize
 *   Image size selection
 *   (in [s] units)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, cameraSelect, was not a valid CUBEACP_CamSelect_t enumeration
 *      TcInvalidParam if the input parameter, imageSize, was not a valid CUBEACP_ImSize_t enumeration
 ******************************************************************************/
uint16_t CUBEACP_SaveImageCmd(uint8_t* tcBuffer, CUBEACP_SaveImage_t* setVal);

/***************************************************************************//**
 * Send a Save Orbit Parameters command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_SaveOrbitParamsCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a SRAM Scrub Parameters command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] scrubSize
 *   Scrub Size
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_SramScrubSettingsCmd(uint8_t* tcBuffer, uint16_t scrubSize);

/***************************************************************************//**
 * Send a Set Star Tracker Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_StarConfigCmd(uint8_t* tcBuffer, CUBEACP_StarConfig_t* setVal);

/***************************************************************************//**
 * Send a Set Magnetorquer Output command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] torquerX
 *   Commanded X-torquer duty cycle
 *   (valid range is between -800  and 800 )
 * @param[in] torquerY
 *   Commanded Y-torquer duty cycle
 *   (valid range is between -800  and 800 )
 * @param[in] torquerZ
 *   Commanded Z-torquer duty cycle
 *   (valid range is between -800  and 800 )
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, torquerX, was outside of the range -800  to 800 
 *      TcInvalidParam if the input parameter, torquerY, was outside of the range -800  to 800 
 *      TcInvalidParam if the input parameter, torquerZ, was outside of the range -800  to 800 
 ******************************************************************************/
uint16_t CUBEACP_TorquerCmdCmd(uint8_t* tcBuffer, CUBEACP_TorquerCmd_t* setVal);

/***************************************************************************//**
 * Send a Set Tracking Controller Gain Parameters command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_TrackingParamsCmd(uint8_t* tcBuffer, CUBEACP_TrackingParams_t* setVal);

/***************************************************************************//**
 * Send a Trigger ADCS Loop command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_TriggerAdcsCmd(uint8_t* tcBuffer, CUBEACP_TriggerAdcs_t* setVal);

/***************************************************************************//**
 * Send a Trigger ADCS Loop with Simulated Sensor Data command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] unixTime
 *   Unix time for iteration
 *   (in [s] units)
 * @param[in] cssRaw1
 *   CSS1 raw measurement
 * @param[in] cssRaw2
 *   CSS2 raw measurement
 * @param[in] cssRaw3
 *   CSS3 raw measurement
 * @param[in] cssRaw4
 *   CSS4 raw measurement
 * @param[in] cssRaw5
 *   CSS5 raw measurement
 * @param[in] cssRaw6
 *   CSS6 raw measurement
 * @param[in] cssRaw7
 *   CSS7 raw measurement
 * @param[in] cssRaw8
 *   CSS8 raw measurement
 * @param[in] cssRaw9
 *   CSS9 raw measurement
 * @param[in] cssRaw10
 *   CSS10 raw measurement
 * @param[in] cam1RawX
 *   Cam1 sensor raw X angle
 * @param[in] cam1RawY
 *   Cam1 sensor raw Y angle
 * @param[in] cam1Busy
 *   Cam1 sensor capture status
 * @param[in] cam1Result
 *   Cam1 sensor detection result
 * @param[in] cam2RawX
 *   Cam2 sensor raw X angle
 * @param[in] cam2RawY
 *   Cam2 sensor raw Y angle
 * @param[in] cam2Busy
 *   Cam2 sensor capture status
 * @param[in] cam2Result
 *   Cam2 sensor detection result
 * @param[in] magRawX
 *   Raw magnetometer X measurement
 * @param[in] magRawY
 *   Raw magnetometer Y measurement
 * @param[in] magRawZ
 *   Raw magnetometer Z measurement
 * @param[in] rateRawX
 *   Raw X rate sensor measurement
 * @param[in] rateRawY
 *   Raw Y rate sensor measurement
 * @param[in] rateRawZ
 *   Raw Z rate sensor measurement
 * @param[in] wheelRawX
 *   Raw X wheel speed measurement
 *   (in [rpm] units)
 * @param[in] wheelRawY
 *   Raw Y wheel speed measurement
 *   (in [rpm] units)
 * @param[in] wheelRawZ
 *   Raw Z wheel speed measurement
 *   (in [rpm] units)
 * @param[in] star1CameraX
 *   Star1 camera X-vector
 * @param[in] star1CameraY
 *   Star1 camera Y-vector
 * @param[in] star1CameraZ
 *   Star1 camera Z-vector
 * @param[in] star1InertialX
 *   Star1 inertial X-vector
 * @param[in] star1InertialY
 *   Star1 inertial Y-vector
 * @param[in] star1InertialZ
 *   Star1 inertial Z-vector
 * @param[in] star2CameraX
 *   Star2 camera X-vector
 * @param[in] star2CameraY
 *   Star2 camera Y-vector
 * @param[in] star2CameraZ
 *   Star2 camera Z-vector
 * @param[in] star2InertialX
 *   Star2 inertial X-vector
 * @param[in] star2InertialY
 *   Star2 inertial Y-vector
 * @param[in] star2InertialZ
 *   Star2 inertial Z-vector
 * @param[in] star3CameraX
 *   Star3 camera X-vector
 * @param[in] star3CameraY
 *   Star3 camera Y-vector
 * @param[in] star3CameraZ
 *   Star3 camera Z-vector
 * @param[in] star3InertialX
 *   Star3 inertial X-vector
 * @param[in] star3InertialY
 *   Star3 inertial Y-vector
 * @param[in] star3InertialZ
 *   Star3 inertial Z-vector
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_TriggerAdcsSensorCmd(uint8_t* tcBuffer, CUBEACP_TriggerAdcsSensor_t* setVal);

/***************************************************************************//**
 * Send a Current Unix Time command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] time
 *   Time in s since 01/01/1970, 00:00
 *   (in [s] units)
 * @param[in] milliSec
 *   Current millisecond count
 *   (in [ms] units)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_UnixTimeCmd(uint8_t* tcBuffer, uint32_t time, uint16_t milliSec);

/***************************************************************************//**
 * Send a Unix Time Save to Flash command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] saveNow
 *   Save current unixtime to flash memory
 * @param[in] saveOnUpdate
 *   Save unixtime to flash memory whenever there is a command to update the unixtime
 * @param[in] savePeriodic
 *   Save unixtime to flash memory periodically
 * @param[in] period
 *   Interval at which to save unixtime to flash memory
 *   (in [s] units)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_UnixTimeSaveCmd(uint8_t* tcBuffer, bool saveNow, bool saveOnUpdate, bool savePeriodic, uint8_t period);

/***************************************************************************//**
 * Send a Set Wheel Configuration command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_WheelConfigCmd(uint8_t* tcBuffer, CUBEACP_WheelConfig_t* setVal);

/***************************************************************************//**
 * Send a Set Wheel Speed command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] wheelX
 *   Commanded X-wheel speed
 *   (in [rpm] units)
 *   (valid range is between -8000 rpm and 8000 rpm)
 * @param[in] wheelY
 *   Commanded Y-wheel speed
 *   (in [rpm] units)
 *   (valid range is between -8000 rpm and 8000 rpm)
 * @param[in] wheelZ
 *   Commanded Z-wheel speed
 *   (in [rpm] units)
 *   (valid range is between -8000 rpm and 8000 rpm)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, wheelX, was outside of the range -8000 rpm to 8000 rpm
 *      TcInvalidParam if the input parameter, wheelY, was outside of the range -8000 rpm to 8000 rpm
 *      TcInvalidParam if the input parameter, wheelZ, was outside of the range -8000 rpm to 8000 rpm
 ******************************************************************************/
uint16_t CUBEACP_WheelSpeedCmdCmd(uint8_t* tcBuffer, CUBEACP_WheelSpeedCmd_t* setVal);

/***************************************************************************//**
 * Send a Set Y-Wheel Control Parameters command to the CubeAcp
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEACP_YWheelParamsCmd(uint8_t* tcBuffer, CUBEACP_YWheelParams_t* setVal);


#endif  // define __CUBEACP3_H

/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef __CUBEACP_H
#define __CUBEACP_H

#include <stdint.h>
#include <stdbool.h>
#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/// ExecutionWaypoints enumeration
typedef enum {
    ExecutionWaypointsInit = 0, ///< Busy with initialization
    ExecutionWaypointsIdle = 1, ///< Idle
    ExecutionWaypointsSensorActuatorComms = 2, ///< Sensor/Actuator Communications
    ExecutionWaypointsAdcsUpdate = 3, ///< ADCS Estimation & Control Update
    ExecutionWaypointsPeripheralPowerSet = 4, ///< Perhipheral Power commands (over I2C)
    ExecutionWaypointsSampleTemperature = 5, ///< CPU Temperature Sampling
    ExecutionWaypointsImageDownload = 6, ///< Image Download
    ExecutionWaypointsImageCompression = 7, ///< Image Compression
    ExecutionWaypointsImageSaveToSd = 8, ///< Saving Image to SD Card
    ExecutionWaypointsLogging = 9, ///< Logging
    ExecutionWaypointsLogCompression = 10, ///< Log File Compression
    ExecutionWaypointsLogSaveToSd = 11, ///< Saving Log to SD Card
    ExecutionWaypointsWritingToFlash = 12, ///< Writing to flash memory
} CUBEACP_ExecutionWaypoints_t;

/// AdcsRunMode enumeration
typedef enum {
    AdcsRunModeAdcsOff = 0, ///< ADCS loop is inactive
    AdcsRunModeAdcsEnabled = 1, ///< ADCS 1Hz loop is active
    AdcsRunModeAdcsTriggered = 2, ///< ADCS will execute control loop only when triggered
    AdcsRunModeAdcsSimulation = 3, ///< ADCS is in simulation mode
} CUBEACP_AdcsRunMode_t;

/// PowerSelect enumeration
typedef enum {
    PowerSelectPowOff = 0, ///< Permanently Off
    PowerSelectPowOn = 1, ///< Permanently On
    PowerSelectPowAuto = 2, ///< Power state depends on current control mode
    PowerSelectPowSim = 3, ///< Simulate power control - Nodes are not actually enabled, but the ACP behaves as if they are. This setting is used for HIL simulations
} CUBEACP_PowerSelect_t;

/// EstimModeSelect enumeration
typedef enum {
    EstimModeSelectEstNone = 0, ///< No attitude estimation
    EstimModeSelectEstMemsRate = 1, ///< MEMS rate sensing
    EstimModeSelectEstMagRkf = 2, ///< Magnetometer rate filter
    EstimModeSelectEstPitchRkf = 3, ///< Magnetometer rate filter with pitch estimation
    EstimModeSelectEstTriad = 4, ///< Magnetometer and Fine-sun TRIAD algorithm
    EstimModeSelectEstFullEkf = 5, ///< Full-state EKF
    EstimModeSelectEstGyroEkf = 6, ///< MEMS gyro EKF
} CUBEACP_EstimModeSelect_t;

/// ConModeSelect enumeration
typedef enum {
    ConModeSelectConNone = 0, ///< No control
    ConModeSelectConBdot = 1, ///< Detumbling control
    ConModeSelectConYspin = 2, ///< Y-Thomson spin
    ConModeSelectConYwheelInit = 3, ///< Y-Wheel momentum stabilized - Initial Pitch Acquisition
    ConModeSelectConYwheel = 4, ///< Y-Wheel momentum stabilized - Steady State
    ConModeSelectConXYZwheel = 5, ///< XYZ-Wheel control
    ConModeSelectConRWSunTrack = 6, ///< Rwheel sun tracking control
    ConModeSelectConRWTargetTrack = 7, ///< Rwheel target tracking control
    ConModeSelectConVeryFastDetumbling = 8, ///< 10Hz Detumbling control within CubeControl
    ConModeSelectConFastDetumbling = 9, ///< Fast Detumbling control
    ConModeSelectConUser1 = 10, ///< User defined, or custom control mode 1
    ConModeSelectConUser2 = 11, ///< User defined, or custom control mode 2
    ConModeSelectConStopRW = 12, ///< Stop all R-wheels
    ConModeSelectConUser3 = 13, ///< User defined, or custom control mode 3
} CUBEACP_ConModeSelect_t;

/// AxisSelect enumeration
typedef enum {
    AxisSelectPosX = 0, ///< Positive X
    AxisSelectNegX = 1, ///< Negative X
    AxisSelectPosY = 2, ///< Positive Y
    AxisSelectNegY = 3, ///< Negative Y
    AxisSelectPosZ = 4, ///< Positive Z
    AxisSelectNegZ = 5, ///< Negative Z
    AxisSelectNotUsed = 6, ///< Not Used
} CUBEACP_AxisSelect_t;

/// BusyStatus enumeration
typedef enum {
    BusyStatusIdle = 0, ///< Idle
    BusyStatusWaiting = 1, ///< Waiting to capture
    BusyStatusCapturing = 2, ///< Capturing
    BusyStatusDetecting = 3, ///< Detecting
} CUBEACP_BusyStatus_t;

/// NadirResult enumeration
typedef enum {
    NadirResultNadirNoError = 0, ///< No Error
    NadirResultNadirTimeout = 1, ///< Camera timeout
    NadirResultNadirOvercurrent = 4, ///< Nadir SRAM Overcurrent detected
    NadirResultNadirTooManyEdges = 10, ///< Too many edges
    NadirResultNadirNotEnoughEdges = 11, ///< Not enough edges
    NadirResultNadirMatrixErr = 12, ///< Matrix Inversion Error
    NadirResultNadirBadFit = 13, ///< Bad Horizon Fit
    NadirResultNadirNoDetect = 255, ///< No detection performed
} CUBEACP_NadirResult_t;

/// SunResult enumeration
typedef enum {
    SunResultSunNoError = 0, ///< No Error
    SunResultSunTimeout = 1, ///< Camera timeout
    SunResultSunOvercurrent = 4, ///< Sun SRAM Overcurrent detected
    SunResultSunNotFound = 20, ///< Sun not found
    SunResultSunNoDetect = 255, ///< No detection performed
} CUBEACP_SunResult_t;

/// CamSelect enumeration
typedef enum {
    CamSelectCamCam1 = 0, ///< Cam1 camera
    CamSelectCamCam2 = 1, ///< Cam2 camera
    CamSelectCamStar = 2, ///< Star camera
} CUBEACP_CamSelect_t;

/// ImSize enumeration
typedef enum {
    ImSizeSize0 = 0, ///< 1024 x 1024 pixels
    ImSizeSize1 = 1, ///< 512 x 512 pixels
    ImSizeSize2 = 2, ///< 256 x 256 pixels
    ImSizeSize3 = 3, ///< 128 x 128 pixels
    ImSizeSize4 = 4, ///< 64 x 64 pixels
} CUBEACP_ImSize_t;

/// ImSaveStatus enumeration
typedef enum {
    ImSaveStatusImgSaveNoError = 0, ///< No Error
    ImSaveStatusCameraTimeout = 1, ///< Timeout waiting for sensor to become available
    ImSaveStatusDownloadTimeout = 2, ///< Timeout waiting for next frame to become ready
    ImSaveStatusDownloadChecksum = 3, ///< Checksum mismatch between donwloaded frame and unit frame
    ImSaveStatusSdCardError = 4, ///< Error writing to SD card
} CUBEACP_ImSaveStatus_t;

/// Stars enumeration
typedef enum {
    StarsZero = 0, ///< Zero
    StarsOne = 1, ///< One
    StarsTwo = 2, ///< Two
} CUBEACP_Stars_t;

/// GpsSolutionStatus enumeration
typedef enum {
    GpsSolutionStatusSolutionComputed = 0, ///< Solution computed
    GpsSolutionStatusInsufficientObs = 1, ///< Insufficient observations
    GpsSolutionStatusNoConvergence = 2, ///< No convergence
    GpsSolutionStatusSingularity = 3, ///< Singularity at parameters matrix
    GpsSolutionStatusCovTrace = 4, ///< Covariance trace exceeds maximum
    GpsSolutionStatusColdStart = 5, ///< Not yet converged from cold start
    GpsSolutionStatusVhLimit = 6, ///< Height or velocity limits exceeded
    GpsSolutionStatusVariance = 7, ///< Variance exceeds limits
    GpsSolutionStatusIntegrityWarning = 8, ///< Large residuals make position unreliable
    GpsSolutionStatusPending = 9, ///< Calculating comparison to user provided
    GpsSolutionStatusInvalidFix = 10, ///< The fixed position is invalid
    GpsSolutionStatusUnauthorized = 11, ///< Position type is unauthorized
} CUBEACP_GpsSolutionStatus_t;

/// CaptureResult enumeration
typedef enum {
    CaptureResultCaptureStartup = 0, ///< Start-up
    CaptureResultCapturePending = 1, ///< Capture pending
    CaptureResultCaptureSuccessOwn = 2, ///< Successfully captured (own SRAM)
    CaptureResultCaptureSuccessShift = 3, ///< Successfully captured (Other SRAM)
    CaptureResultCaptureTimout = 4, ///< Camera timout
    CaptureResultCaptureSRAMErr = 5, ///< SRAM overcurrent
} CUBEACP_CaptureResult_t;

/// DetectResult enumeration
typedef enum {
    DetectResultDetectStartup = 0, ///< Start-up
    DetectResultDetectNoDetect = 1, ///< No detection scheduled
    DetectResultDetectPending = 2, ///< Detection pending
    DetectResultDetectTooManyEdges = 3, ///< Nadir error - too many detected edges
    DetectResultDetectTooFewEdges = 4, ///< Nadir error - not enought edges detected
    DetectResultDetectBadFit = 5, ///< Nadir error - bad fit
    DetectResultDetectSunNotFound = 6, ///< Sun error - sun not found
    DetectResultDetectSuccess = 7, ///< Successful detection
} CUBEACP_DetectResult_t;

/// MagModeVal enumeration
typedef enum {
    MagModeValMainMagOnly = 0, ///< Only main magnetometer is sampled and used
    MagModeValRedMagOnly = 1, ///< Only redundant magnetometer is sampled and used
    MagModeValBothMagMainUsed = 2, ///< Both magnetometers are sampled but main is used
    MagModeValBothMagRedUsed = 3, ///< Both magnetometers are sampled but redundant is used
} CUBEACP_MagModeVal_t;

/// FileUploadDestination enumeration
typedef enum {
    FileUploadDestinationUlEeprom = 2, ///< EEPROM
    FileUploadDestinationUlFlash1 = 3, ///< Flash program 1
    FileUploadDestinationUlFlash2 = 4, ///< Flash program 2
    FileUploadDestinationUlFlash3 = 5, ///< Flash program 3
    FileUploadDestinationUlFlash4 = 6, ///< Flash program 4
    FileUploadDestinationUlFlash5 = 7, ///< Flash program 5
    FileUploadDestinationUlFlash6 = 8, ///< Flash program 6
    FileUploadDestinationUlFlash7 = 9, ///< Flash program 7
    FileUploadDestinationUlSdUser1 = 10, ///< SD User file 1
    FileUploadDestinationUlSdUser2 = 11, ///< SD User file 2
    FileUploadDestinationUlSdUser3 = 12, ///< SD User file 3
    FileUploadDestinationUlSdUser4 = 13, ///< SD User file 4
    FileUploadDestinationUlSdUser5 = 14, ///< SD User file 5
    FileUploadDestinationUlSdUser6 = 15, ///< SD User file 6
    FileUploadDestinationUlSdUser7 = 16, ///< SD User file 7
    FileUploadDestinationUlSdUser8 = 17, ///< SD User file 8
} CUBEACP_FileUploadDestination_t;

/// FileType enumeration
typedef enum {
    FileTypeBinary = 0, ///< Binary File
    FileTypeEvtLog = 1, ///< Event Log File
    FileTypeTlmLog = 2, ///< Telemetry Log File
    FileTypeJpgImg = 3, ///< JPG Image File
    FileTypeBmpImg = 4, ///< BMP Image File
    FileTypePayload1 = 5, ///< Payload1 File
    FileTypePayload2 = 6, ///< Payload2 File
    FileTypePayload3 = 7, ///< Payload3 File
    FileTypePayload4 = 8, ///< Payload4 File
    FileTypeIndexFile = 15, ///< Index File
} CUBEACP_FileType_t;

/// JpgConvertResult enumeration
typedef enum {
    JpgConvertResultNoConversion = 0, ///< Nothing Converted Yet
    JpgConvertResultConvertOk = 1, ///< Success
    JpgConvertResultFileLoadError = 2, ///< File Load Error
    JpgConvertResultBusyConverting = 3, ///< Busy
} CUBEACP_JpgConvertResult_t;

/// ResetCause enumeration
typedef enum {
    ResetCausePowerOnReset = 0, ///< Power-On Reset
    ResetCauseBrownOutRegulated = 1, ///< Brown-Out Detected on Regulated Power
    ResetCauseBrownOutUnregulated = 2, ///< Brown-Out Detected on Unregulated Power
    ResetCauseExternalWatchdog = 3, ///< External Watchdog Reset
    ResetCauseExternalReset = 4, ///< External Reset
    ResetCauseWatchdogReset = 5, ///< Watchdog Reset
    ResetCauseLockupSystemReset = 6, ///< Lockup System Reset
    ResetCauseLockupReset = 7, ///< Lockup Reset
    ResetCauseSystemReqReset = 8, ///< System Request Reset
    ResetCauseBackupBrownOut = 9, ///< Backup domain brown-out reset
    ResetCauseBackupModeRst = 10, ///< Backup mode reset
    ResetCauseBackupModeRST_BackupBrownOutVddRegulated = 11, ///< Backup Mode reset and Backup domain brown-out on VDD regulated
    ResetCauseBackupModeRST_BackupBrownOutVddRegulated_BrownOutRegulated = 12, ///< Backup Mode reset and Backup domain brown-out on VDD regulated and brown out on regulated
    ResetCauseBackupModeRST_WatchdogReset = 13, ///< Backup mode reset and Watchdog reset
    ResetCauseBackupBrownOutBuvin_SystemReqReset = 14, ///< Backup Domain brown-out on BUVIN and System request reset.
    ResetCauseUnknown = 15, ///< Unkown Reset Cause
} CUBEACP_ResetCause_t;

/// BootCause enumeration
typedef enum {
    BootCauseUnexpected = 0, ///< Unexpected reset
    BootCauseTrxuvI2cError = 1, ///<
    BootCauseCommsTimeout = 2, ///< Timeout due to lack of communications
    BootCauseCommandedMcuReset = 3, ///< Software commanded MCU reset
    BootCauseCommandedEpsReset = 4, ///<
    BootCauseSramLatchup = 5, ///< Latchup detected in SRAM
} CUBEACP_BootCause_t;

/// TcErrorReason enumeration
typedef enum {
    TcErrorReasonNoError = 0, ///< No error
    TcErrorReasonInvalidTc = 1, ///< Invalid telecommand ID
    TcErrorReasonIncorrectLen = 2, ///< Incorrect TC parameter length
    TcErrorReasonIncorrectParams = 3, ///< Incorrect TC parameter value
} CUBEACP_TcErrorReason_t;

/// BootProgramsList enumeration
typedef enum {
    BootProgramsListRunBootloader = 0, ///< Bootloader
    BootProgramsListRunInternalFlashProgram = 1, ///< Internal Flash Program
    BootProgramsListRunEeprom = 2, ///< EEPROM
    BootProgramsListRunExtFlash1 = 3, ///< External Flash Program 1
    BootProgramsListRunExtFlash2 = 4, ///< External Flash Program 2
    BootProgramsListRunExtFlash3 = 5, ///< External Flash Program 3
    BootProgramsListRunExtFlash4 = 6, ///< External Flash Program 4
    BootProgramsListRunExtFlash5 = 7, ///< External Flash Program 5
    BootProgramsListRunExtFlash6 = 8, ///< External Flash Program 6
    BootProgramsListRunExtFlash7 = 9, ///< External Flash Program 7
} CUBEACP_BootProgramsList_t;

/// SramBank enumeration
typedef enum {
    SramBankSram1 = 1, ///< SRAM bank 1
    SramBankSram2 = 2, ///< SRAM bank 2
} CUBEACP_SramBank_t;

/// BootStatus enumeration
typedef enum {
    BootStatusBootNew = 0, ///< New Selection
    BootStatusBootSuccess = 1, ///< Boot Success
    BootStatusBootTry1 = 2, ///< 1 Failed boot attempt
    BootStatusBootTry2 = 3, ///< 2 Failed boot attempts
    BootStatusBootFail = 4, ///< 3 Failed boot attempts
} CUBEACP_BootStatus_t;

/// SdLogSelect enumeration
typedef enum {
    SdLogSelectSdLogPrimary = 0, ///< Use Primary (on-board) SD card for log file
    SdLogSelectSdLogSecondary = 1, ///< Use Secondary SD card for log file
} CUBEACP_SdLogSelect_t;

/*******************************************************************************
 *******************************   STRUCTS   ***********************************
 ******************************************************************************/

/***************************************************************************//**
 * @brief
 *   CubeAcp ACP Execution State message structure.
 * @details
 *   Returns information about the ACP loop
 ******************************************************************************/
typedef struct{
    uint16_t timeSinceLoopStart; ///< Time since the start of the current loop iteration (measurment unit is [ms])
    CUBEACP_ExecutionWaypoints_t currentExecutionPoint; ///< Indicates which part of the loop is currently executing
} CUBEACP_AcpLoopState_t;

/***************************************************************************//**
 * @brief
 *   CubeAcp Clear Errors message structure.
 * @details
 *   Clear Latched Error Flags
 ******************************************************************************/
typedef struct{
    bool aDCSErrors; ///< Clear ADCS error flags
    bool hKErrors; ///< Clear HK Error flags
} CUBEACP_ClearErrors_t;

/***************************************************************************//**
 * @brief
 *   CubeAcp CubeACP State message structure.
 * @details
 *   Contains flags regarding the state of the ACP
 ******************************************************************************/
typedef struct{
    bool adcsConfigLoadError; ///< Flag to indicate that the ADCS configuartion was not read successfully out of flash
    bool orbitParamsLoadError; ///< Flag to indicate that the Orbit parameters were not read successfully out of flash
} CUBEACP_CubeACPState_t;


/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Actuator Commands message structure.
 * @details
 *   Actuator commands
 ******************************************************************************/
typedef struct{
    int16_t torquerCmdX; ///< X Magnetorquer Commanded on-time (measurment unit is [10ms units])
    int16_t torquerCmdY; ///< Y Magnetorquer Commanded on-time (measurment unit is [10ms units])
    int16_t torquerCmdZ; ///< Z Magnetorquer Commanded on-time (measurment unit is [10ms units])
    int16_t speedCmdX; ///< X Wheel Speed (measurment unit is [rpm])
    int16_t speedCmdY; ///< Y Wheel Speed (measurment unit is [rpm])
    int16_t speedCmdZ; ///< Z Wheel Speed (measurment unit is [rpm])
} CUBEACP_ActuatorCmd_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis ADCS Configuration message structure.
 * @details
 *   Current configuration
 ******************************************************************************/
typedef struct{
    ADCS_AxisSelect_t magtorq1; ///< Magnetorquer 1 Configuration
    ADCS_AxisSelect_t magtorq2; ///< Magnetorquer 2 Configuration
    ADCS_AxisSelect_t magtorq3; ///< Magnetorquer 3 Configuration
    ADCS_AxisSelect_t rW1Conf; ///< RW1 Configuration
    ADCS_AxisSelect_t rW2Conf; ///< RW2 Configuration
    ADCS_AxisSelect_t rW3Conf; ///< RW3 Configuration
    ADCS_AxisSelect_t rW4Conf; ///< RW4 or Momentum wheel Configuration
    ADCS_AxisSelect_t gyro1Conf; ///< Gyro1 Configuration
    ADCS_AxisSelect_t gyro2Conf; ///< Gyro2 Configuration
    ADCS_AxisSelect_t gyro3Conf; ///< Gyro3 Configuration
    ADCS_AxisSelect_t css1Conf; ///< CSS1 Configuration
    ADCS_AxisSelect_t css2Conf; ///< CSS2 Configuration
    ADCS_AxisSelect_t css3Conf; ///< CSS3 Configuration
    ADCS_AxisSelect_t css4Conf; ///< CSS4 Configuration
    ADCS_AxisSelect_t css5Conf; ///< CSS5 Configuration
    ADCS_AxisSelect_t css6Conf; ///< CSS6 Configuration
    ADCS_AxisSelect_t css7Conf; ///< CSS7 Configuration
    ADCS_AxisSelect_t css8Conf; ///< CSS8 Configuration
    ADCS_AxisSelect_t css9Conf; ///< CSS9 Configuration
    ADCS_AxisSelect_t css10Conf; ///< CSS10 Configuration
    double css1Scale; ///< CSS1 Relative Scaling Factor
    double css2Scale; ///< CSS2 Relative Scaling Factor
    double css3Scale; ///< CSS3 Relative Scaling Factor
    double css4Scale; ///< CSS4 Relative Scaling Factor
    double css5Scale; ///< CSS5 Relative Scaling Factor
    double css6Scale; ///< CSS6 Relative Scaling Factor
    double css7Scale; ///< CSS7 Relative Scaling Factor
    double css8Scale; ///< CSS8 Relative Scaling Factor
    double css9Scale; ///< CSS9 Relative Scaling Factor
    double css10Scale; ///< CSS10 Relative Scaling Factor
    uint8_t cssMinimum; ///< CSS Threshold
    double cam1Angle1; ///< Cam1 Sensor Mounting Transform Alpha Angle (measurment unit is [deg])
    double cam1Angle2; ///< Cam1 Sensor Mounting Transform Beta Angle (measurment unit is [deg])
    double cam1Angle3; ///< Cam1 Sensor Mounting Transform Gamma Angle (measurment unit is [deg])
    uint8_t cam1Threshold; ///<
    bool cam1AutoAdj; ///< 0 = disabled and 1 = enabled
    uint16_t cam1Exposure; ///< exposure time register value
    double cam1BoreX; ///< X Pixel location of Cam1 boresight (measurment unit is [pixels])
    double cam1BoreY; ///< Y Pixel location of Cam1 boresight (measurment unit is [pixels])
    bool cam1Shift; ///< Use Cam2 processing chain for Cam1 detection
    double cam2Angle1; ///< Cam2 Sensor Mounting Transform Alpha Angle (measurment unit is [deg])
    double cam2Angle2; ///< Cam2 Sensor Mounting Transform Beta Angle (measurment unit is [deg])
    double cam2Angle3; ///< Cam2 Sensor Mounting Transform Gamma Angle (measurment unit is [deg])
    uint8_t cam2Threshold; ///< Cam2 detection threshold
    bool cam2AutoAdj; ///< 0 = disabled and 1 = enabled
    uint16_t cam2Exposure; ///< exposure time register value
    double cam2BoreX; ///< X Pixel location of Cam2 boresight (measurment unit is [pixels])
    double cam2BoreY; ///< Y Pixel location of Cam2 boresight (measurment unit is [pixels])
    bool cam2Shift; ///< Use Sun processing chain for Cam2 detection
    uint16_t maskArea1Xmin; ///< Minimum X of Area 1
    uint16_t maskArea1Xmax; ///< Maximum X of Area 1
    uint16_t maskArea1Ymin; ///< Minimum Y of Area 1
    uint16_t maskArea1Ymax; ///< Maximum Y of Area 1
    uint16_t maskArea2Xmin; ///< Minimum X of Area 2
    uint16_t maskArea2Xmax; ///< Maximum X of Area 2
    uint16_t maskArea2Ymin; ///< Minimum Y of Area 2
    uint16_t maskArea2Ymax; ///< Maximum Y of Area 2
    uint16_t maskArea3Xmin; ///< Minimum X of Area 3
    uint16_t maskArea3Xmax; ///< Maximum X of Area 3
    uint16_t maskArea3Ymin; ///< Minimum Y of Area 3
    uint16_t maskArea3Ymax; ///< Maximum Y of Area 3
    uint16_t maskArea4Xmin; ///< Minimum X of Area 4
    uint16_t maskArea4Xmax; ///< Maximum X of Area 4
    uint16_t maskArea4Ymin; ///< Minimum Y of Area 4
    uint16_t maskArea4Ymax; ///< Maximum Y of Area 4
    uint16_t maskArea5Xmin; ///< Minimum X of Area 5
    uint16_t maskArea5Xmax; ///< Maximum X of Area 5
    uint16_t maskArea5Ymin; ///< Minimum Y of Area 5
    uint16_t maskArea5Ymax; ///< Maximum Y of Area 5
    double magmAngle1; ///< Magnetometer Mounting Transform Alpha Angle (measurment unit is [deg])
    double magmAngle2; ///< Magnetometer Mounting Transform Beta Angle (measurment unit is [deg])
    double magmAngle3; ///< Magnetometer Mounting Transform Gamma Angle (measurment unit is [deg])
    double magmOffset1; ///< Magnetometer Channel 1 Offset
    double magmOffset2; ///< Magnetometer Channel 2 Offset
    double magmOffset3; ///< Magnetometer Channel 3 Offset
    double magmSens11; ///< Magnetometer Sensitivity Matrix S11
    double magmSens22; ///< Magnetometer Sensitivity Matrix S22
    double magmSens33; ///< Magnetometer Sensitivity Matrix S33
    double magmSens12; ///< Magnetometer Sensitivity Matrix S12
    double magmSens13; ///< Magnetometer Sensitivity Matrix S13
    double magmSens21; ///< Magnetometer Sensitivity Matrix S21
    double magmSens23; ///< Magnetometer Sensitivity Matrix S23
    double magmSens31; ///< Magnetometer Sensitivity Matrix S31
    double magmSens32; ///< Magnetometer Sensitivity Matrix S32
    double xRateOffset; ///< X-Rate Sensor Offset (measurment unit is [deg/s])
    double yRateOffset; ///< Y-Rate Sensor Offset (measurment unit is [deg/s])
    double zRateOffset; ///< Z-Rate Sensor Offset (measurment unit is [deg/s])
    uint8_t rateSensorMult; ///< Multiplier of rate sensor measurement
    double starAngle1; ///< StarTracker Mounting Transform Alpha Angle (measurment unit is [deg])
    double starAngle2; ///< StarTracker Mounting Transform Beta Angle (measurment unit is [deg])
    double starAngle3; ///< StarTracker Mounting Transform Gamma Angle (measurment unit is [deg])
    uint16_t starExposure; ///< exposure time register value
    uint8_t detectionThreshold; ///< StarTracker detection threshold
    uint8_t starThreshold; ///< StarTracker star threshold
    uint8_t maxStarMatched; ///< Maximum of stars that the star tracker will match
    uint8_t maxStarPixel; ///< Maximum pixels in a star
    uint8_t maxStarNoise; ///< Maximum star pixel noise
    uint8_t minStarPixel; ///< Minimum pixels in a star
    double starErrorMargin; ///< % Error margin of the star identification (measurment unit is [%])
    float starCentX; ///< Pixel centroid X (valid range is between -5000  and 5000 )
    float starCentY; ///< Pixel centroid Y (valid range is between -5000  and 5000 )
    double starFocal; ///< Star Tracker Focal Length (measurment unit is [mm])
    uint8_t syncDelay; ///< Synchronization delay within star Tracker
    float ks; ///< Detumbling Spin Gain (Ks) (valid range is between 0  and 10000 )
    float kd; ///< Detumbling Damping Gain (Kd) (valid range is between 0  and 10000 )
    double wy_ref; ///< Reference spin rate (wy-ref). Must always be smaller than 0 (measurment unit is [deg/s]. valid range is between -100000 deg/s and 0 deg/s)
    float kdf; ///< Fast BDot Detumbling Gain (valid range is between 0  and 100 )
    float kh; ///< Y-Momentum Control Gain (Kh) (valid range is between 0  and 10000 )
    float kn; ///< Y-momentum Nutation Damping Gain (Kn) (valid range is between 0  and 10000 )
    float kp1; ///< Y-momentum Proportional Gain (Kp1) (valid range is between 0  and 100 )
    float kd1; ///< Y-momentum Derivative Gain (Kd1) (valid range is between 0  and 100 )
    float h_ref; ///< Reference Wheel Momentum (H-ref). Must always be smaller than 0 (measurment unit is [Nms]. valid range is between -10 Nms and 0 Nms)
    float kp2; ///< RWheel Proportional Gain (Kp2) (valid range is between 0  and 100 )
    float kd2; ///< RWheel Derivative Gain (Kd2) (valid range is between 0  and 100 )
    float kp3; ///< Tracking Proportional Gain (Kp3) (valid range is between 0  and 100 )
    float kd3; ///< Tracking Derivative Gain (Kd3) (valid range is between 0  and 100 )
    float ki3; ///< Tracking Integral Gain (Ki3) (valid range is between 0  and 100 )
    float ixx; ///< Moment Of Inertia - Ixx (measurment unit is [kg.m^2]. valid range is between 0 kg.m^2 and 10 kg.m^2)
    float iyy; ///< Moment Of Inertia - Iyy (measurment unit is [kg.m^2]. valid range is between 0 kg.m^2 and 10 kg.m^2)
    float izz; ///< Moment Of Inertia - Izz (measurment unit is [kg.m^2]. valid range is between 0 kg.m^2 and 10 kg.m^2)
    float ixy; ///< Moment Of Inertia - Ixy (measurment unit is [kg.m^2]. valid range is between -10 kg.m^2 and 10 kg.m^2)
    float ixz; ///< Moment Of Inertia - Ixz (measurment unit is [kg.m^2]. valid range is between -10 kg.m^2 and 10 kg.m^2)
    float iyz; ///< Moment Of Inertia - Iyz (measurment unit is [kg.m^2]. valid range is between -10 kg.m^2 and 10 kg.m^2)
    float magRateNoise; ///< Magnetometer Rate Filter System Noise (valid range is between 0  and 100 )
    float ekfSysNoise; ///< EKF System Noise (valid range is between 0  and 100 )
    float cssNoise; ///< CSS Measurement Noise (valid range is between 0  and 100 )
    float sunNoise; ///< Sun Sensor Measurement Noise (valid range is between 0  and 100 )
    float nadirNoise; ///< Nadir Sensor Measurement Noise (valid range is between 0  and 100 )
    float magNoise; ///< Magnetometer Measurement Noise (valid range is between 0  and 100 )
    float starNoise; ///< Star Tracker Measurement Noise (valid range is between 0  and 100 )
    bool useSunEst; ///< Use Sun Sensor measurement in EKF
    bool useNadirEst; ///< Use Nadir Sensor measurement in EKF
    bool useCssEst; ///< Use CSS measurement in EKF
    bool useStarEst; ///< Use Star Tracker measurement in EKF
    ADCS_MagModeVal_t magMode; ///< Mode describing which magnetometer is used for estimation and control
    uint8_t cam1Cam2Period; ///< Cam1 and Cam2 sensor sampling period. Lower four bits are Cam1 period and upper four bits the Cam2 period. Setting period to zero for sensor will disable sampling of sensor. (measurment unit is [s])
} CUBEACP_AdcsConfig_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Adcs Execution Times message structure.
 * @details
 *   Returns information about execution times of ACP functions
 ******************************************************************************/
typedef struct{
    uint16_t timeAdcsUpdate; ///< Time to perform complete ADCS Update function (measurment unit is [ms])
    uint16_t timeSensorActuatorComms; ///< Time to perform Sensor/actuator communications (measurment unit is [ms])
    uint16_t timeSgp4; ///< Time to execute SGP4 propagator (measurment unit is [ms])
    uint16_t timeIgrf; ///< Time to execute IGRF computation (measurment unit is [ms])
} CUBEACP_AdcsExecTimes_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis ADCS Measurements message structure.
 * @details
 *   Calibrated sensor measurements
 ******************************************************************************/
typedef struct{
    double magX; ///< Magnetic Field X (measurment unit is [uT])
    double magY; ///< Magnetic Field Y (measurment unit is [uT])
    double magZ; ///< Magnetic Field Z (measurment unit is [uT])
    double cssX; ///< Coarse Sun X
    double cssY; ///< Coarse Sun Y
    double cssZ; ///< Coarse Sun Z
    double sunX; ///< Sun X
    double sunY; ///< Sun Y
    double sunZ; ///< Sun Z
    double nadirX; ///< Nadir X
    double nadirY; ///< Nadir Y
    double nadirZ; ///< Nadir Z
    double rateX; ///< X Angular Rate (measurment unit is [deg/s])
    double rateY; ///< Y Angular Rate (measurment unit is [deg/s])
    double rateZ; ///< Z Angular Rate (measurment unit is [deg/s])
    int16_t speedX; ///< X Wheel Speed (measurment unit is [rpm])
    int16_t speedY; ///< Y Wheel Speed (measurment unit is [rpm])
    int16_t speedZ; ///< Z Wheel Speed (measurment unit is [rpm])
    double star1BX; ///< Star1 body X-vector
    double star1BY; ///< Star1 body Y-vector
    double star1BZ; ///< Star1 body Z-vector
    double star1OX; ///< Star1 orbit X-vector
    double star1OY; ///< Star1 orbit Y-vector
    double star1OZ; ///< Star1 orbit Z-vector
    double star2BX; ///< Star2 body X-vector
    double star2BY; ///< Star2 body Y-vector
    double star2BZ; ///< Star2 body Z-vector
    double star2OX; ///< Star2 orbit X-vector
    double star2OY; ///< Star2 orbit Y-vector
    double star2OZ; ///< Star2 orbit Z-vector
    double star3BX; ///< Star3 body X-vector
    double star3BY; ///< Star3 body Y-vector
    double star3BZ; ///< Star3 body Z-vector
    double star3OX; ///< Star3 orbit X-vector
    double star3OY; ///< Star3 orbit Y-vector
    double star3OZ; ///< Star3 orbit Z-vector
} CUBEACP_AdcsMeasure_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis ADCS Power Control message structure.
 * @details
 *   Control power to selected components
 ******************************************************************************/
typedef struct{
    ADCS_PowerSelect_t cubeControlSignalPower; ///< Control power to electronics of CubeControl Signal PIC
    ADCS_PowerSelect_t cubeControlMotorPower; ///< Control power to electronics of CubeControl Motor PIC
    ADCS_PowerSelect_t cubeSensePower; ///< Control power to the CubeSense
    ADCS_PowerSelect_t cubeStarPower; ///< Control power to the CubeStar
    ADCS_PowerSelect_t cubeWheel1Power; ///< Control power to the CubeWheel1
    ADCS_PowerSelect_t cubeWheel2Power; ///< Control power to the CubeWheel2
    ADCS_PowerSelect_t cubeWheel3Power; ///< Control power to the CubeWheel3
    ADCS_PowerSelect_t motorPower; ///< Control power to Motor electronics
    ADCS_PowerSelect_t gpsLnaPower; ///< Control power to GPS LNA
} CUBEACP_AdcsPower_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Power and Temperature Measurements message structure.
 * @details
 *   Power and temperature measurements
 ******************************************************************************/
typedef struct{
    double cubeSense3V3Current; ///< CubeSense 3V3 Current (measurment unit is [mA])
    double cubeSenseCam2Current; ///< CubeSense Cam2 SRAM Current (measurment unit is [mA])
    double cubeSenseCam1Current; ///< CubeSense Cam1 SRAM Current (measurment unit is [mA])
    double cubeControl3V3Current; ///< CubeControl 3V3 Current (measurment unit is [mA])
    double cubeControl5VCurrent; ///< CubeControl 5V Current (measurment unit is [mA])
    double cubeControlBatCurrent; ///< CubeControl Vbat Current (measurment unit is [mA])
    double wheel1Current; ///< Wheel1 Current (measurment unit is [mA])
    double wheel2Current; ///< Wheel2 Current (measurment unit is [mA])
    double wheel3Current; ///< Wheel3 Current (measurment unit is [mA])
    double cubeStarCurrent; ///< CubeStar Current (measurment unit is [mA])
    double magtorqCurrent; ///< Magnetorquer Current (measurment unit is [mA])
    int16_t mCUTemp; ///< MCU Temperature (measurment unit is [C])
    double magnetometerTemp; ///< Magnetometer Temperature (measurment unit is [C])
    double redundentMagnetometerTemp; ///< Redundant Magnetometer Temperature (measurment unit is [C])
    int16_t xRateTemp; ///< X-Rate sensor Temperature (measurment unit is [C])
    int16_t yRateTemp; ///< Y-Rate sensor Temperature (measurment unit is [C])
    int16_t zRateTemp; ///< Z-Rate sensor Temperature (measurment unit is [C])
} CUBEACP_AdcsPowerMeasure_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis ADCS State message structure.
 * @details
 *   Current ADCS state
 ******************************************************************************/
typedef struct{
    ADCS_EstimModeSelect_t estimMode; ///< Current attitude estimation mode
    ADCS_ConModeSelect_t controlMode; ///< Current attitude control mode
    ADCS_AdcsRunMode_t adcsRunMode; ///< Current ADCS Running mode
    bool cubeControlSignalPower; ///< CubeControl Signal electronics enabled status
    bool cubeControlMotorPower; ///< CubeControl Motor electronics enabled status
    bool cubeSensePower; ///< CubeSense enabled status
    bool cubeWheel1Power; ///< CubeWheel1 enabled status
    bool cubeWheel2Power; ///< CubeWheel2 enabled status
    bool cubeWheel3Power; ///< CubeWheel3 enabled status
    bool cubeStarPower; ///< CubeStar enabled status
    bool gpsReceiverPower; ///< GPS Receiver enabled status
    bool gpsLnaPower; ///< GPS Antenna LNA enabled status
    bool motorDriverPower; ///< Motor Driver Electronics enabled status
    bool sunAboveHorizon; ///< Sun is above the local horizon (elevation > 0)
    bool cubeSenseCommsError; ///< Communication error occurred with the CubeSense
    bool cubeControlSignalCommsError; ///< Communication error occurred with the CubeControl Signal MCU
    bool cubeControlMotorCommsError; ///< Communication error occurred with the CubeControl Motor MCU
    bool cubeWheel1CommsError; ///< Communication error occurred with the CubeWheel1
    bool cubeWheel2CommsError; ///< Communication error occurred with the CubeWheel2
    bool cubeWheel3CommsError; ///< Communication error occurred with the CubeWheel3
    bool cubeStarCommsError; ///< Communication error occurred with the CubeStar
    bool magRangeError; ///< Magnetometer measured magnetic field with size < 100 nT or >100,000nT
    bool cam1SensOvercurrent; ///< Cam1 sensor overcurrent detected
    bool cam1SensNotIdle; ///< Cam1 sensor was not idle at the start of ADCS loop
    bool cam1SensDetectError; ///< Cam1 sensor was unable to compute angles (could be not in FOV)
    bool sunSensRangeError; ///< Detected sun angles were outside of +/- 90 deg
    bool cam2SensOvercurrent; ///< Cam2 sensor overcurrent detected
    bool cam2SensNotIdle; ///< Cam2 sensor was not idle at the start of ADCS loop
    bool cam2SensDetectError; ///< Cam2 sensor was unable to compute angles (could be not in FOV)
    bool nadirSensRangeError; ///< Detected nadir angles were outside of +/- 60 deg
    bool rateSensRangeError; ///< Measured XYZ-body rate is outside of the range +/-20 deg/s
    bool wheelSpeedRangeError; ///< Wheel XYZ speed measurement was outside the range +/-8500 rpm
    bool cssError; ///< Unable to compute Coarse Sun vector (could be not in FOV)
    bool starMatchError; ///< Unable to obtain enough matched stars
    bool starTrackOvercurrent; ///< Star tracker overcurrent detected
    bool orbitParamsInvalidError; ///< Orbit Parameters are not in allowed bounds (angle exceeding limits etc.). Failed to initialize SGP4 propagator using supplied parameters
    bool configInvalidError; ///< Magnetorquer Configuration or CSS in invalid. Each principle axis should have a torquer output (1,2, or 3) assigned. At least one CSS per principle axis needed
    bool controlModeNotAllowed; ///< Attempt was made to select control mode without appropriate estimator, or command to set Y-momentum mode while not in steady-state Y-Thomson
    bool estimatorNotAllowed; ///< Attempt was made to change to an estimation mode that would be inapropriate for the current control mode
    bool magfieldModelError; ///< Modelled and measured magnetic field differs in size by more than 5000 nT
    bool nodeRecoveryError; ///< Failed to Recover an ADCS Node by successive resets
    double roll; ///< Estimated roll angle (measurment unit is [deg])
    double pitch; ///< Estimated pitch angle (measurment unit is [deg])
    double yaw; ///< Estimated yaw angle (measurment unit is [deg])
    int16_t q1; ///< Estimated q1
    int16_t q2; ///< Estimated q2
    int16_t q3; ///< Estimated q3
    double rateX; ///< Estimated X angular rate (measurment unit is [deg/s])
    double rateY; ///< Estimated Y angular rate (measurment unit is [deg/s])
    double rateZ; ///< Estimated Z angular rate (measurment unit is [deg/s])
    double positionX; ///< ECI referenced X coordinate  (measurment unit is [km])
    double positionY; ///< ECI referenced Y coordinate  (measurment unit is [km])
    double positionZ; ///< ECI referenced Z coordinate  (measurment unit is [km])
    double velocityX; ///< ECI referenced X velocity  (measurment unit is [m/s])
    double velocityY; ///< ECI referenced Y velocity  (measurment unit is [m/s])
    double velocityZ; ///< ECI referenced Z velocity  (measurment unit is [m/s])
    double latitude; ///< WGS-84 Latitude angle  (measurment unit is [deg])
    double longitude; ///< Longitude angle (measurment unit is [deg])
    double altitude; ///< WGS-84 altitude (measurment unit is [km])
    int16_t posEcefX; ///< ECEF Position X (measurment unit is [m])
    int16_t posEcefY; ///< ECEF Position Y (measurment unit is [m])
    int16_t posEcefZ; ///< ECEF Position Z (measurment unit is [m])
} CUBEACP_AdcsState_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Commanded Attitude Angles message structure.
 * @details
 *   Commanded attitude angles
 ******************************************************************************/
typedef struct{
    double roll; ///< Commanded roll angle (measurment unit is [deg]. valid range is between -9000 deg and 9000 deg)
    double pitch; ///< Commanded pitch angle (measurment unit is [deg]. valid range is between -18000 deg and 18000 deg)
    double yaw; ///< Commanded yaw angle (measurment unit is [deg]. valid range is between -18000 deg and 18000 deg)
} CUBEACP_CmdAttitude_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Tracking Controller Target Reference message structure.
 * @details
 *   Target reference for tracking control mode
 ******************************************************************************/
typedef struct{
    float longRef; ///< Geocentric longitude of target (measurment unit is [deg]. valid range is between 0 deg and 360 deg)
    float latRef; ///< Geocentric latitude of target (measurment unit is [deg]. valid range is between -90 deg and 90 deg)
    float altRef; ///< Geocentric altitude of target (measurment unit is [meter]. valid range is between -20000 meter and 20000 meter)
} CUBEACP_CmdTrackingTarget_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Set Attitude Control Mode message structure.
 * @details
 *   Set attitude control mode
 ******************************************************************************/
typedef struct{
    ADCS_ConModeSelect_t controlModeSelection; ///< Attitude control mode
    bool overrideErrors; ///< Ignore current state and force control mode (if this flag is not set, certain control transitions will not be allowed)
    uint16_t timeout; ///< Control timeout duration. Control will revert to None when timer reaches zero. 0xFFFF for infinite timeout (measurment unit is [s])
} CUBEACP_ControlMode_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Estimation Data message structure.
 * @details
 *   Estimation meta-data
 ******************************************************************************/
typedef struct{
    double igrfMagX; ///< IGRF Modelled Magnetic Field X (measurment unit is [uT])
    double igrfMagY; ///< IGRF Modelled Magnetic Field Y (measurment unit is [uT])
    double igrfMagZ; ///< IGRF Modelled Magnetic Field Z (measurment unit is [uT])
    double modelSunX; ///< Modelled Sun Vector X
    double modelSunY; ///< Modelled Sun Vector Y
    double modelSunZ; ///< Modelled Sun Vector Z
    double estimGyroBiasX; ///< Estimated X-gyro Bias (measurment unit is [deg/s])
    double estimGyroBiasY; ///< Estimated Y-gyro Bias (measurment unit is [deg/s])
    double estimGyroBiasZ; ///< Estimated Z-gyro Bias (measurment unit is [deg/s])
    double innovX; ///< Innovation Vector X
    double innovY; ///< Innovation Vector Y
    double innovZ; ///< Innovation Vector Z
    double qError1; ///< Quaternion Error - Q1
    double qError2; ///< Quaternion Error - Q2
    double qError3; ///< Quaternion Error - Q3
    double qCovar1; ///< Quaternion Covariance - Q1 RMS
    double qCovar2; ///< Quaternion Covariance - Q2 RMS
    double qCovar3; ///< Quaternion Covariance - Q3 RMS
    double rateCovarX; ///< X Angular Rate Covariance
    double rateCovarY; ///< Y Angular Rate Covariance
    double rateCovarZ; ///< Z Angular Rate Covariance
} CUBEACP_EstimData_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Status of Image Capture and Save Operation message structure.
 * @details
 *   Status of Image Capture and Save Operation
 ******************************************************************************/
typedef struct{
    uint8_t percentageComplete; ///< Current progress of operation (measurment unit is [%])
    ADCS_ImSaveStatus_t status; ///< Current status of operation
} CUBEACP_ImageSaveStatus_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis SGP4 Orbit Parameters message structure.
 * @details
 *   SGP4 Orbit Parameters
 ******************************************************************************/
typedef struct{
    double inclination; ///< Inclination (measurment unit is [deg]. valid range is between 0 deg and 180 deg)
    double eccentricity; ///< Eccentricity (valid range is between 0  and 1 )
    double raan; ///< Right-ascension of the Ascending Node (measurment unit is [deg]. valid range is between 0 deg and 360 deg)
    double argPerigee; ///< Argument of Perigee (measurment unit is [deg]. valid range is between 0 deg and 360 deg)
    double bstar; ///< B-Star drag term (valid range is between 0  and 1 )
    double meanMotion; ///< Mean Motion (measurment unit is [orbits/day]. valid range is between 0 orbits/day and 20 orbits/day)
    double meanAnomaly; ///< Mean Anomaly (measurment unit is [deg]. valid range is between 0 deg and 360 deg)
    double epoch; ///< Epoch (year.day) (measurment unit is [year.day]. valid range is between 0 year.day and 100000 year.day)
} CUBEACP_OrbitParameters_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Raw GPS Measurements message structure.
 * @details
 *   Raw GPS measurements
 ******************************************************************************/
typedef struct{
    ADCS_GpsSolutionStatus_t gpsSolutionStatus; ///< GPS Solution Status
    uint8_t gpsNumSatsTracked; ///< Number of tracked GPS satellites
    uint8_t gpsNumSatsSolution; ///< Number of GPS satellites used in solution
    uint8_t gpsXYZLogCtr; ///< Counter for XYZ Lof from GPS
    uint8_t gpsRangeLogCtr; ///< Counter for RANGE log from GPS
    uint8_t gpsResponse; ///< Response Message for GPS log setup - p656 of OEMV615 reference manual
    uint16_t gpsWeek; ///< GPS Reference Week
    uint32_t gpsTimeMs; ///< GPS Time Milliseconds (measurment unit is [ms])
    int32_t posEcefX; ///< ECEF Position X (measurment unit is [m])
    int16_t velEcefX; ///< ECEF Velocity X (measurment unit is [m/s])
    int32_t posEcefY; ///< ECEF Position Y (measurment unit is [m])
    int16_t velEcefY; ///< ECEF Velocity Y (measurment unit is [m/s])
    int32_t posEcefZ; ///< ECEF Position Z (measurment unit is [m])
    int16_t velEcefZ; ///< ECEF Velocity Z (measurment unit is [m/s])
    double stdDevPosX; ///< X-pos Standard Deviation (measurment unit is [m])
    double stdDevPosY; ///< Y-pos Standard Deviation (measurment unit is [m])
    double stdDevPosZ; ///< Z-pos Standard Deviation (measurment unit is [m])
    uint8_t stdDevVelX; ///< X-vel Standard Deviation (measurment unit is [m/s])
    uint8_t stdDevVelY; ///< Y-vel Standard Deviation (measurment unit is [m/s])
    uint8_t stdDevVelZ; ///< Z-vel Standard Deviation (measurment unit is [m/s])
} CUBEACP_RawGPS_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Raw Sensor Measurements message structure.
 * @details
 *   Raw sensor measurements
 ******************************************************************************/
typedef struct{
    int16_t cam2RawX; ///< Cam2 azimuth angle
    int16_t cam2RawY; ///< Cam2 elevation angle
    ADCS_CaptureResult_t cam2Busy; ///< Cam2 capture status
    ADCS_DetectResult_t cam2Result; ///< Cam2 detection result
    int16_t cam1RawX; ///< Cam1 azimuth angle
    int16_t cam1RawY; ///< Cam1 elevation angle
    ADCS_CaptureResult_t cam1Busy; ///< Cam1 capture status
    ADCS_DetectResult_t cam1Result; ///< Cam1 detection result
    uint8_t cssRaw1; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw2; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw3; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw4; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw5; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw6; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw7; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw8; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw9; ///< sampled A/D value - corresponds to COS(sun_angle)
    uint8_t cssRaw10; ///< sampled A/D value - corresponds to COS(sun_angle)
    int16_t magRawX; ///< sampled A/D value
    int16_t magRawY; ///< sampled A/D value
    int16_t magRawZ; ///< sampled A/D value
} CUBEACP_RawSensor_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Raw Star Tracker message structure.
 * @details
 *   Raw Star Tracker Measurement
 ******************************************************************************/
typedef struct{
    ADCS_Stars_t numStarDetected; ///< Number of stars detected
    ADCS_Stars_t numStarIdent; ///< Number of stars identified
    uint8_t starNoise; ///< Noise level of star image
    bool attitudeSuccess; ///< Attitude Success
    bool imageCaptureSuccess; ///< Image Capture Success
    bool detectionSuccess; ///< Detection Success
    bool identificationSuccess; ///< Identification Success
    bool loopTimeError; ///< Loop time Error
    bool maxStarsDetected; ///< Max Stars Detected
    bool lessThanThreeStarsInFoV; ///< Less than three stars in FoV
    bool commsError; ///< Comms error
    uint8_t confStar1; ///< Confidence factor of star 1
    uint8_t confStar2; ///< Confidence factor of star 2
    uint8_t confStar3; ///< Confidence factor of star 3
    uint16_t magStar1; ///< Instrument magnitude of star 1
    uint16_t magStar2; ///< Instrument magnitude of star 2
    uint16_t magStar3; ///< Instrument magnitude of star 3
    uint16_t catStar1; ///< Catalogue number of star 1
    int16_t centXStar1; ///< X centroid of star 1
    int16_t centYStar1; ///< Y centroid of star 1
    uint16_t catStar2; ///< Catalogue number of star 2
    int16_t centXStar2; ///< X centroid of star 2
    int16_t centYStar2; ///< Y centroid of star 2
    uint16_t catStar3; ///< Catalogue number of star 3
    int16_t centXStar3; ///< X centroid of star 3
    int16_t centYStar3; ///< Y centroid of star 3
    uint16_t capture; ///< Capture (measurment unit is [ms])
    uint16_t detection; ///< Detection (measurment unit is [ms])
    uint16_t identification; ///< Identification (measurment unit is [ms])
} CUBEACP_RawStarTracker_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Redundant Magnetometer Raw Measurements message structure.
 * @details
 *   Redundant Magnetometer raw Measurements, temperature and magnetometer mode
 ******************************************************************************/
typedef struct{
    int16_t magRawX; ///< sampled A/D value
    int16_t magRawY; ///< sampled A/D value
    int16_t magRawZ; ///< sampled A/D value
} CUBEACP_ReduntMagRaw_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Save Image message structure.
 * @details
 *   Save and capture image from one of CubeSense cameras or CubeStar camera to SD card
 ******************************************************************************/
typedef struct{
    ADCS_CamSelect_t cameraSelect; ///< Camera Selection (measurment unit is [s])
    ADCS_ImSize_t imageSize; ///< Image size selection (measurment unit is [s])
} CUBEACP_SaveImage_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Set Magnetorquer Output message structure.
 * @details
 *   Set magnetorquer output (only valid if Control Mode is None)
 ******************************************************************************/
typedef struct{
    double torquerX; ///< Commanded X-torquer duty cycle (valid range is between -800  and 800 )
    double torquerY; ///< Commanded Y-torquer duty cycle (valid range is between -800  and 800 )
    double torquerZ; ///< Commanded Z-torquer duty cycle (valid range is between -800  and 800 )
} CUBEACP_TorquerCmd_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Trigger ADCS Loop with Simulated Sensor Data message structure.
 * @details
 *   Trigger ADCS to perform one iteration of the control loop (only valid when ADCS Run Mode is Triggered)
 ******************************************************************************/
typedef struct{
    uint32_t unixTime; ///< Unix time for iteration (measurment unit is [s])
    uint16_t cssRaw1; ///< CSS1 raw measurement
    uint16_t cssRaw2; ///< CSS2 raw measurement
    uint16_t cssRaw3; ///< CSS3 raw measurement
    uint16_t cssRaw4; ///< CSS4 raw measurement
    uint16_t cssRaw5; ///< CSS5 raw measurement
    uint16_t cssRaw6; ///< CSS6 raw measurement
    uint16_t cssRaw7; ///< CSS7 raw measurement
    uint16_t cssRaw8; ///< CSS8 raw measurement
    uint16_t cssRaw9; ///< CSS9 raw measurement
    uint16_t cssRaw10; ///< CSS10 raw measurement
    int16_t cam1RawX; ///< Cam1 sensor raw X angle
    int16_t cam1RawY; ///< Cam1 sensor raw Y angle
    uint8_t cam1Busy; ///< Cam1 sensor capture status
    uint8_t cam1Result; ///< Cam1 sensor detection result
    int16_t cam2RawX; ///< Cam2 sensor raw X angle
    int16_t cam2RawY; ///< Cam2 sensor raw Y angle
    uint8_t cam2Busy; ///< Cam2 sensor capture status
    uint8_t cam2Result; ///< Cam2 sensor detection result
    int16_t magRawX; ///< Raw magnetometer X measurement
    int16_t magRawY; ///< Raw magnetometer Y measurement
    int16_t magRawZ; ///< Raw magnetometer Z measurement
    int16_t rateRawX; ///< Raw X rate sensor measurement
    int16_t rateRawY; ///< Raw Y rate sensor measurement
    int16_t rateRawZ; ///< Raw Z rate sensor measurement
    int16_t wheelRawX; ///< Raw X wheel speed measurement (measurment unit is [rpm])
    int16_t wheelRawY; ///< Raw Y wheel speed measurement (measurment unit is [rpm])
    int16_t wheelRawZ; ///< Raw Z wheel speed measurement (measurment unit is [rpm])
    int16_t star1CameraX; ///< Star1 camera X-vector
    int16_t star1CameraY; ///< Star1 camera Y-vector
    int16_t star1CameraZ; ///< Star1 camera Z-vector
    int16_t star1InertialX; ///< Star1 inertial X-vector
    int16_t star1InertialY; ///< Star1 inertial Y-vector
    int16_t star1InertialZ; ///< Star1 inertial Z-vector
    int16_t star2CameraX; ///< Star2 camera X-vector
    int16_t star2CameraY; ///< Star2 camera Y-vector
    int16_t star2CameraZ; ///< Star2 camera Z-vector
    int16_t star2InertialX; ///< Star2 inertial X-vector
    int16_t star2InertialY; ///< Star2 inertial Y-vector
    int16_t star2InertialZ; ///< Star2 inertial Z-vector
    int16_t star3CameraX; ///< Star3 camera X-vector
    int16_t star3CameraY; ///< Star3 camera Y-vector
    int16_t star3CameraZ; ///< Star3 camera Z-vector
    int16_t star3InertialX; ///< Star3 inertial X-vector
    int16_t star3InertialY; ///< Star3 inertial Y-vector
    int16_t star3InertialZ; ///< Star3 inertial Z-vector
} CUBEACP_TriggerAdcsSensor_t;

/***************************************************************************//**
 * @brief
 *   Adcs 3-Axis Set Wheel Speed message structure.
 * @details
 *   Set wheel speed (only valid if Control Mode is None)
 ******************************************************************************/
typedef struct{
    int16_t wheelX; ///< Commanded X-wheel speed (measurment unit is [rpm]. valid range is between -8000 rpm and 8000 rpm)
    int16_t wheelY; ///< Commanded Y-wheel speed (measurment unit is [rpm]. valid range is between -8000 rpm and 8000 rpm)
    int16_t wheelZ; ///< Commanded Z-wheel speed (measurment unit is [rpm]. valid range is between -8000 rpm and 8000 rpm)
} CUBEACP_WheelSpeedCmd_t;


/***************************************************************************//**
 * @brief
 *   Files Download Block Ready message structure.
 * @details
 *   Status about download block preparation
 ******************************************************************************/
typedef struct{
    bool ready; ///< Ready
    bool parameterError; ///< The combination of message length and hole map resulted in invalid array lengths
    uint16_t checksum; ///< Block CRC16 Checksum
    uint16_t length; ///< Block length
} CUBEACP_DownloadBlockReady_t;

/***************************************************************************//**
 * @brief
 *   Files Initiate Download Burst message structure.
 * @details
 *   Initiate Download Burst
 ******************************************************************************/
typedef struct{
    uint8_t messageLength; ///< Message Length
    bool ignoreHoleMap; ///< Ignore Hole Map
} CUBEACP_DownloadBurst_t;

/***************************************************************************//**
 * @brief
 *   Files Erase File message structure.
 * @details
 *   Erase File
 ******************************************************************************/
typedef struct{
    FILES_FileType_t fileType; ///< File Type
    uint8_t fileCtr; ///< File Counter
    bool eraseAll; ///< Erase All
} CUBEACP_EraseFile_t;

/***************************************************************************//**
 * @brief
 *   Files File Information message structure.
 * @details
 *   File Information
 ******************************************************************************/
typedef struct{
    FILES_FileType_t fileType; ///< File Type
    bool busyUpdating; ///<
    uint8_t fileCtr; ///< File Counter
    uint32_t size; ///< File Size
    uint32_t unixTime; ///< File Data and Time (unix) (measurment unit is [s])
    uint16_t checksum; ///< File CRC16 Checksum
} CUBEACP_FileInfo_t;

/***************************************************************************//**
 * @brief
 *   Files File Upload Packet message structure.
 * @details
 *   File Upload Packet
 ******************************************************************************/
typedef struct{
    uint16_t packetNo; ///< Packet Number
    uint8_t fileBytes[20]; ///< File Bytes
} CUBEACP_FileUpload_t;

/***************************************************************************//**
 * @brief
 *   Files File Download Buffer with File Contents message structure.
 * @details
 *   File Download buffer 20-byte packet
 ******************************************************************************/
typedef struct{
    uint16_t packetNo; ///< Packet counter of this file download packet
    uint8_t fileBytes[20]; ///< File 20-byte packet
} CUBEACP_FileDownload_t;

/***************************************************************************//**
 * @brief
 *   Files Finalize Upload Block message structure.
 * @details
 *   Finalize Uploaded File Block
 ******************************************************************************/
typedef struct{
    FILES_FileUploadDestination_t destination; ///< Destination
    uint32_t offset; ///< Offset into file
    uint16_t blockLen; ///< Length of block
} CUBEACP_FinalizeUploadBlock_t;

/***************************************************************************//**
 * @brief
 *   Files Initiate File Upload message structure.
 * @details
 *   Initiate File Upload
 ******************************************************************************/
typedef struct{
    FILES_FileUploadDestination_t destination; ///< Destination
    uint8_t blockSize; ///< Block Size
} CUBEACP_InitiateFileUpload_t;

/***************************************************************************//**
 * @brief
 *   Files Load File Download Block message structure.
 * @details
 *   Fill download buffer with file contents
 ******************************************************************************/
typedef struct{
    FILES_FileType_t fileType; ///< File Type
    uint8_t counter; ///< Counter
    uint32_t offset; ///< Offset
    uint16_t length; ///< Block Length
} CUBEACP_LoadDownloadBlock_t;

/***************************************************************************//**
 * @brief
 *   Files Upload Block Complete message structure.
 * @details
 *   Finalize Upload Block Complete
 ******************************************************************************/
typedef struct{
    bool busy; ///< Busy with block finalization
    bool error; ///< Error in block finalization
} CUBEACP_UploadBlockComplete_t;


/***************************************************************************//**
 * @brief
 *   Jpg JPG Conversion Progress message structure.
 * @details
 *   Conversion progress
 ******************************************************************************/
typedef struct{
    uint8_t progress; ///< Progress %
    JPG_JpgConvertResult_t conversionResult; ///< JPG Conversion Result
    uint8_t outFileCounter; ///< Output File Counter
} CUBEACP_ConversionProgress_t;

/***************************************************************************//**
 * @brief
 *   Jpg Convert to JPG file message structure.
 * @details
 *   Convert raw or bmp files to JPG
 ******************************************************************************/
typedef struct{
    uint8_t srcFileCtr; ///< Source File Counter
    uint8_t qualityFactor; ///< Quality Factor
    uint8_t whiteBalance; ///< White Balance
} CUBEACP_Convert_t;


/***************************************************************************//**
 * @brief
 *   Standard Boot Index and Status message structure.
 * @details
 *   Current selected boot index and status of last boot
 ******************************************************************************/
typedef struct{
    CSSP_BootProgramsList_t programIndex; ///< Program Index
    CSSP_BootStatus_t bootStatus; ///< Boot Status
} CUBEACP_BootIndexStatus_t;

/***************************************************************************//**
 * @brief
 *   Standard Communication Status message structure.
 * @details
 *   Communication status - includes command and telemetry counters and error flags
 ******************************************************************************/
typedef struct{
    uint16_t tcCounter; ///< No. of telecommands received
    uint16_t tlmCounter; ///< No. of telemetry requests received
    bool uartBufferOverrun; ///< TC buffer was overrun while receiving a telecommand
    bool uartProtocolError; ///< UART protocol error occurred
    bool uartMsgIncomplete; ///< UART start-of-message identifier was received without a preceding end-of-message
    bool i2CTelemetryError; ///< Number of data clocked out was more than telemetry package
    bool i2CBufferError; ///< Telecommand sent exceeds buffer size
    bool cANBufferError; ///< Telecommand sent exceeds buffer size
} CUBEACP_CommsStatus_t;

/***************************************************************************//**
 * @brief
 *   Standard Telecommand Acknowledge message structure.
 * @details
 *   Telemetry frame with acknowledge status of the previously sent command
 ******************************************************************************/
typedef struct{
    uint8_t lastTCID; ///< ID of last received TC
    bool processedFlag; ///< Flag to indicate if the last TC has been processed.
    CSSP_TcErrorReason_t tCerrorStatus ; ///< Status of last processed telecommand
    uint8_t tCParameterErrorIndex; ///< Index of incorrect TC parameter
} CUBEACP_TelecommandAcknowledge_t;

/***************************************************************************//**
 * @brief
 *   Standard EDAC Error Counters message structure.
 * @details
 *   EDAC Error Counters
 ******************************************************************************/
typedef struct{
    uint16_t singleSRAMSEUs; ///< The number of single SRAM upsets (per byte) detected
    uint16_t doubleSRAMSEUs; ///< The number of double SRAM upsets (per byte) detected
    uint16_t multiSRAMSEUs; ///< The number of multiple SRAM upsets (per byte) deteced
} CUBEACP_EdacErrors_t;

/***************************************************************************//**
 * @brief
 *   Standard Boot And Running Program Status message structure.
 * @details
 *   Boot And Running Program Status
 ******************************************************************************/
typedef struct{
    CSSP_ResetCause_t mcuResetCause; ///< Cause of MCU reset
    CSSP_BootCause_t bootCause; ///< Cause of last reboot
    uint16_t bootCounter; ///< Number of times CubeComputer has booted
    CSSP_BootProgramsList_t runningProgramIndex; ///< Index of current running program in flash programs list
    uint8_t firmwareMajorVersion; ///< Firmware version (Major)
    uint8_t firmwareMinorVersion; ///< Firmware version (Minor)
} CUBEACP_ExtendedIdentification_t;

/***************************************************************************//**
 * @brief
 *   Standard Identification message structure.
 * @details
 *   Identification information for this node
 ******************************************************************************/
typedef struct{
    uint8_t nodeType; ///< Node type identifier.
    uint8_t interfaceVersion; ///< Interface version. This field should have a value of 1
    uint8_t firmwareMajorVersion; ///< Firmware version (Major)
    uint8_t firmwareMinorVersion; ///< Firmware version (Minor)
    uint16_t runtimeSeconds; ///< Number of seconds since processor start-up
    uint16_t runtimeMilliseconds; ///< Number of milliseconds (after the integer second) since processor start-up
} CUBEACP_Identification_t;

/***************************************************************************//**
 * @brief
 *   Standard Last Logged Event message structure.
 * @details
 *   Last Logged Event (relative to pointer - adjusted via Advance and Reset TCs (3 & 4)
 ******************************************************************************/
typedef struct{
    uint32_t unixTime; ///<
    uint8_t eventId; ///< Event ID
    uint8_t eventParam; ///< Event Parameter
} CUBEACP_LastLogEvent_t;

/***************************************************************************//**
 * @brief
 *   Standard SRAM Latchup counters message structure.
 * @details
 *   SRAM Latchup counters
 ******************************************************************************/
typedef struct{
    uint16_t sRAM1SELs; ///< The number of SRAM1 latchups detected
    uint16_t sRAM2SELs; ///< The number of SRAM2 latchups detected
} CUBEACP_LatchupErrors_t;

/***************************************************************************//**
 * @brief
 *   Standard Unix Time Save to Flash message structure.
 * @details
 *   Configuration settings for unixtime flash memory persistence
 ******************************************************************************/
typedef struct{
    bool saveNow; ///< Save current unixtime to flash memory
    bool saveOnUpdate; ///< Save unixtime to flash memory whenever there is a command to update the unixtime
    bool savePeriodic; ///< Save unixtime to flash memory periodically
    uint8_t period; ///< Interval at which to save unixtime to flash memory (measurment unit is [s])
} CUBEACP_UnixTimeSave_t;

/***************************************************************************//**
 * @brief
 *   Standard Current Unix Time message structure.
 * @details
 *   Current Unix Time
 ******************************************************************************/
typedef struct{
    uint32_t time; ///< Time in s since 01/01/1970, 00:00 (measurment unit is [s])
    uint16_t milliSec; ///< Current millisecond count (measurment unit is [ms])
} CUBEACP_UnixTime_t;


/***************************************************************************//**
 * @brief
 *   TlmLog UART Log Configuration message structure.
 * @details
 *   Log selection and period for UART (unsolicited TLM)
 ******************************************************************************/
typedef struct{
    uint8_t selection[10]; ///< Log Selection - up to 80 flags indicating which telemetry frames should be logged
    uint16_t period; ///< Log period. Set to 0 to disable logging
} CUBEACP_LogUartConfig_t;

/***************************************************************************//**
 * @brief
 *   TlmLog SD Log1 Configuration message structure.
 * @details
 *   Log selection and period for LOG1
 ******************************************************************************/
typedef struct{
    uint8_t logSelection[10]; ///< Log Selection - up to 80 flags indicating which telemetry frames should be logged
    uint16_t period; ///< Log period. Set to 0 to disable logging
    TLMLOG_SdLogSelect_t destination; ///< Which SD card to use to store log file
} CUBEACP_LogSdConfig1_t;

/***************************************************************************//**
 * @brief
 *   TlmLog SD Log2 Configuration message structure.
 * @details
 *   Log selection and period for LOG2
 ******************************************************************************/
typedef struct{
    uint8_t logSelection[10]; ///< Log Selection - up to 80 flags indicating which telemetry frames should be logged
    uint16_t period; ///< Log period. Set to 0 to disable logging
    TLMLOG_SdLogSelect_t destination; ///< Which SD card to use to store log file
} CUBEACP_LogSdConfig2_t;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

// GET function prototypes:
void CUBEACP_GetAcpLoopState(CUBEACP_AcpLoopState_t* returnVal);
void CUBEACP_GetCubeACPState(CUBEACP_CubeACPState_t* returnVal);
void CUBEACP_GetActuatorCmd(CUBEACP_ActuatorCmd_t* returnVal);
void CUBEACP_GetMagTorquerCmd(CUBEACP_ActuatorCmd_t* returnVal);
void CUBEACP_GetSpeedCmd(CUBEACP_ActuatorCmd_t* returnVal);
void CUBEACP_GetAdcsConfig(CUBEACP_AdcsConfig_t* returnVal);
void CUBEACP_GetAdcsExecTimes(CUBEACP_AdcsExecTimes_t* returnVal);
void CUBEACP_GetAdcsMeasure(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetMagField(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetCoarseSunVec(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetFineSunVec(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetNadirVec(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetRateSensor(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetWheelSpeed(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetStar1Body(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetStar1Orbit(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetStar2Body(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetStar2Orbit(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetStar3Body(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetStar3Orbit(CUBEACP_AdcsMeasure_t* returnVal);
void CUBEACP_GetAdcsPower(CUBEACP_AdcsPower_t* returnVal);
void CUBEACP_GetAdcsPowerMeasure(CUBEACP_AdcsPowerMeasure_t* returnVal);
void CUBEACP_GetCubeSenseCurrents(CUBEACP_AdcsPowerMeasure_t* returnVal);
void CUBEACP_GetCubeControlCurrents(CUBEACP_AdcsPowerMeasure_t* returnVal);
void CUBEACP_GetWheelCurrents(CUBEACP_AdcsPowerMeasure_t* returnVal);
void CUBEACP_GetAdcsMiscCurrents(CUBEACP_AdcsPowerMeasure_t* returnVal);
void CUBEACP_GetAdcsTemperatures1(CUBEACP_AdcsPowerMeasure_t* returnVal);
void CUBEACP_GetAdcsTemperatures2(CUBEACP_AdcsPowerMeasure_t* returnVal);
void CUBEACP_GetAdcsState(CUBEACP_AdcsState_t* returnVal);
void CUBEACP_GetCurrentAdcsState(CUBEACP_AdcsState_t* returnVal);
void CUBEACP_GetEstimAttitude(CUBEACP_AdcsState_t* returnVal);
void CUBEACP_GetEstimQuaternion(CUBEACP_AdcsState_t* returnVal);
void CUBEACP_GetEstimRates(CUBEACP_AdcsState_t* returnVal);
void CUBEACP_GetPositionECI(CUBEACP_AdcsState_t* returnVal);
void CUBEACP_GetVelocityECI(CUBEACP_AdcsState_t* returnVal);
void CUBEACP_GetPositionLLH(CUBEACP_AdcsState_t* returnVal);
void CUBEACP_GetPositionECEF(CUBEACP_AdcsState_t* returnVal);
void CUBEACP_GetCmdAttitude(CUBEACP_CmdAttitude_t* returnVal);
void CUBEACP_GetCmdTrackingTarget(CUBEACP_CmdTrackingTarget_t* returnVal);
void CUBEACP_GetEstimData(CUBEACP_EstimData_t* returnVal);
void CUBEACP_GetModelMagVec(CUBEACP_EstimData_t* returnVal);
void CUBEACP_GetModelSunVec(CUBEACP_EstimData_t* returnVal);
void CUBEACP_GetEstimGyroBias(CUBEACP_EstimData_t* returnVal);
void CUBEACP_GetInnovationVec(CUBEACP_EstimData_t* returnVal);
void CUBEACP_GetQuaternionErrVec(CUBEACP_EstimData_t* returnVal);
void CUBEACP_GetQuaternionCovar(CUBEACP_EstimData_t* returnVal);
void CUBEACP_GetRateCovar(CUBEACP_EstimData_t* returnVal);
void CUBEACP_GetImageSaveStatus(CUBEACP_ImageSaveStatus_t* returnVal);
void CUBEACP_GetOrbitParameters(CUBEACP_OrbitParameters_t* returnVal);
void CUBEACP_GetRawGPS(CUBEACP_RawGPS_t* returnVal);
void CUBEACP_GetRawGpsStatus(CUBEACP_RawGPS_t* returnVal);
void CUBEACP_GetRawGpsTime(CUBEACP_RawGPS_t* returnVal);
void CUBEACP_GetRawGpsX(CUBEACP_RawGPS_t* returnVal);
void CUBEACP_GetRawGpsY(CUBEACP_RawGPS_t* returnVal);
void CUBEACP_GetRawGpsZ(CUBEACP_RawGPS_t* returnVal);
void CUBEACP_GetRawSensor(CUBEACP_RawSensor_t* returnVal);
void CUBEACP_GetRawCam2Sens(CUBEACP_RawSensor_t* returnVal);
void CUBEACP_GetRawCam1Sens(CUBEACP_RawSensor_t* returnVal);
void CUBEACP_GetRawCss1(CUBEACP_RawSensor_t* returnVal);
void CUBEACP_GetRawCss2(CUBEACP_RawSensor_t* returnVal);
void CUBEACP_GetRawMagnetometer(CUBEACP_RawSensor_t* returnVal);
void CUBEACP_GetRawStarTracker(CUBEACP_RawStarTracker_t* returnVal);
void CUBEACP_GetStarPerformance(CUBEACP_RawStarTracker_t* returnVal);
void CUBEACP_GetStarMagnitude(CUBEACP_RawStarTracker_t* returnVal);
void CUBEACP_GetStar1Raw(CUBEACP_RawStarTracker_t* returnVal);
void CUBEACP_GetStar2Raw(CUBEACP_RawStarTracker_t* returnVal);
void CUBEACP_GetStar3Raw(CUBEACP_RawStarTracker_t* returnVal);
void CUBEACP_GetStarTiming(CUBEACP_RawStarTracker_t* returnVal);
void CUBEACP_GetReduntMagRaw(CUBEACP_ReduntMagRaw_t* returnVal);
void CUBEACP_GetBlockChecksum(uint16_t* checksum);
void CUBEACP_GetDownloadBlockReady(CUBEACP_DownloadBlockReady_t* returnVal);
void CUBEACP_GetFileInfo(CUBEACP_FileInfo_t* returnVal);
void CUBEACP_GetFileDownload(CUBEACP_FileDownload_t* returnVal);
void CUBEACP_GetHoleMap1(uint8_t* holeMap);
void CUBEACP_GetHoleMap2(uint8_t* holeMap);
void CUBEACP_GetHoleMap3(uint8_t* holeMap);
void CUBEACP_GetHoleMap4(uint8_t* holeMap);
void CUBEACP_GetHoleMap5(uint8_t* holeMap);
void CUBEACP_GetHoleMap6(uint8_t* holeMap);
void CUBEACP_GetHoleMap7(uint8_t* holeMap);
void CUBEACP_GetHoleMap8(uint8_t* holeMap);
void CUBEACP_GetInitializeUploadComplete(bool* busy);
void CUBEACP_GetUploadBlockComplete(CUBEACP_UploadBlockComplete_t* returnVal);
void CUBEACP_GetConversionProgress(CUBEACP_ConversionProgress_t* returnVal);
void CUBEACP_GetBootIndexStatus(CUBEACP_BootIndexStatus_t* returnVal);
void CUBEACP_GetCache(bool* enabled);
void CUBEACP_GetCommsStatus(CUBEACP_CommsStatus_t* returnVal);
void CUBEACP_GetTelecommandAcknowledge(CUBEACP_TelecommandAcknowledge_t* returnVal);
void CUBEACP_GetEdacErrors(CUBEACP_EdacErrors_t* returnVal);
void CUBEACP_GetExtendedIdentification(CUBEACP_ExtendedIdentification_t* returnVal);
void CUBEACP_GetIdentification(CUBEACP_Identification_t* returnVal);
void CUBEACP_GetLastLogEvent(CUBEACP_LastLogEvent_t* returnVal);
void CUBEACP_GetLatchupErrors(CUBEACP_LatchupErrors_t* returnVal);
void CUBEACP_GetUnixTimeSave(CUBEACP_UnixTimeSave_t* returnVal);
void CUBEACP_GetSramScrubSettings(uint16_t* scrubSize);
void CUBEACP_GetUnixTime(CUBEACP_UnixTime_t* returnVal);
void CUBEACP_GetLogUartConfig(CUBEACP_LogUartConfig_t* returnVal);
void CUBEACP_GetLogSdConfig1(CUBEACP_LogSdConfig1_t* returnVal);
void CUBEACP_GetLogSdConfig2(CUBEACP_LogSdConfig2_t* returnVal);

 // SET function prototypes:
void CUBEACP_SetClearErrors(CUBEACP_ClearErrors_t* setVal);
void CUBEACP_SetDefaultConfig();
void CUBEACP_SetSaveConfig();
void CUBEACP_SetSaveOrbitParams();
void CUBEACP_SetAdcsConfig(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetMagtorqConfig(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetWheelConfig(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetGyroConfig(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetCssConfig1(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetCssConfig2(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetCam1Config(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetCam2Config(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetNadirMaskConfig1(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetNadirMaskConfig2(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetNadirMaskConfig3(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetNadirMaskConfig4(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetNadirMaskConfig5(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetMagConfig1(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetMagConfig2(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetMagConfig3(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetRateConfig(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetStarConfig(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetDetumbleParams(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetYWheelParams(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetRWheelParams(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetTrackingParams()CUBEACP_AdcsConfig_t* setVal;
void CUBEACP_SetMoI(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetPoI(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetEstimParams1(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetEstimParams2(CUBEACP_AdcsConfig_t* setVal);
void CUBEACP_SetAdcsEnabled(CUBEACP_AdcsRunMode_t enabled);
void CUBEACP_SetAdcsPower(CUBEACP_AdcsPower_t* setVal);
void CUBEACP_SetCmdAttitude(CUBEACP_CmdAttitude_t* setVal);
void CUBEACP_SetCmdTrackingTarget(CUBEACP_CmdTrackingTarget_t* setVal);
void CUBEACP_SetControlMode(CUBEACP_ControlMode_t* setVal);
void CUBEACP_SetDeployMagnetometer(uint8_t timeout);
void CUBEACP_SetEstimMode(CUBEACP_EstimModeSelect_t estimModeSelection);
void CUBEACP_SetMagMode(CUBEACP_MagModeVal_t modeSetting);
void CUBEACP_SetOrbitParameters(CUBEACP_OrbitParameters_t* setVal);
void CUBEACP_SetOrbitInclination(CUBEACP_OrbitParameters_t* setVal);
void CUBEACP_SetOrbitEccentricity(CUBEACP_OrbitParameters_t* setVal);
void CUBEACP_SetOrbitRaan(CUBEACP_OrbitParameters_t* setVal);
void CUBEACP_SetOrbitArgPer(CUBEACP_OrbitParameters_t* setVal);
void CUBEACP_SetOrbitBStar(CUBEACP_OrbitParameters_t* setVal);
void CUBEACP_SetOrbitMeanMot(CUBEACP_OrbitParameters_t* setVal);
void CUBEACP_SetOrbitMeanAnom(CUBEACP_OrbitParameters_t* setVal);
void CUBEACP_SetOrbitEpoch(CUBEACP_OrbitParameters_t* setVal);
void CUBEACP_SetSaveImage(CUBEACP_SaveImage_t* setVal);
void CUBEACP_SetTorquerCmd(CUBEACP_ActuatorCmd_t* setVal);
void CUBEACP_SetTriggerAdcs();
void CUBEACP_SetTriggerAdcsSensor(CUBEACP_TriggerAdcsSensor_t* setVal);
void CUBEACP_SetWheelSpeedCmd(CUBEACP_ActuatorCmd_t* setVal);
void CUBEACP_SetAdvanceFileListPtr();
void CUBEACP_SetDownloadBurst(CUBEACP_DownloadBurst_t* setVal);
void CUBEACP_SetEraseFile(CUBEACP_EraseFile_t* setVal);
void CUBEACP_SetFileUpload(CUBEACP_FileUpload_t* setVal);
void CUBEACP_SetFinalizeUploadBlock(CUBEACP_FinalizeUploadBlock_t* setVal);
void CUBEACP_SetHoleMap1(uint8_t* holeMap);
void CUBEACP_SetHoleMap2(uint8_t* holeMap);
void CUBEACP_SetHoleMap3(uint8_t* holeMap);
void CUBEACP_SetHoleMap4(uint8_t* holeMap);
void CUBEACP_SetHoleMap5(uint8_t* holeMap);
void CUBEACP_SetHoleMap6(uint8_t* holeMap);
void CUBEACP_SetHoleMap7(uint8_t* holeMap);
void CUBEACP_SetHoleMap8(uint8_t* holeMap);
void CUBEACP_SetInitiateFileUpload(CUBEACP_InitiateFileUpload_t* setVal);
void CUBEACP_SetLoadDownloadBlock(CUBEACP_LoadDownloadBlock_t* setVal);
void CUBEACP_SetResetFileListPtr();
void CUBEACP_SetResetUploadBlock();
void CUBEACP_SetConvert(CUBEACP_Convert_t* setVal);
void CUBEACP_SetAdvanceLogPtr();
void CUBEACP_SetCache(bool enabled);
void CUBEACP_SetReset(uint8_t magic);
void CUBEACP_SetUnixTimeSave(CUBEACP_UnixTimeSave_t* setVal);
void CUBEACP_SetResetBootRegisters();
void CUBEACP_SetResetLogPtr();
void CUBEACP_SetSramScrubSettings(uint16_t scrubSize);
void CUBEACP_SetUnixTime(CUBEACP_UnixTime_t* setVal);
void CUBEACP_SetLogUartConfig(CUBEACP_LogUartConfig_t* setVal);
void CUBEACP_SetLogSdConfig1(CUBEACP_LogSdConfig1_t* setVal);
void CUBEACP_SetLogSdConfig2(CUBEACP_LogSdConfig2_t* setVal);


 // event log functions:

#ifdef __cplusplus
}
#endif

#endif // __CUBEACP_H

/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef __BOOTLOADER2_H
#define __BOOTLOADER2_H

#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>

#include "cubelib.h"

#ifdef __cplusplus
extern "C" {
#endif

/***************************************************************************//**
* @addtogroup CubeComponents
* @{
******************************************************************************/

/***************************************************************************//**
* @addtogroup BootLoader
* @brief BootLoader Interface API
* @{
******************************************************************************/

/// BootLoader Telemetry enumeration
typedef enum {
    BootLoader_BlockChecksum = 246, ///< File upload Block CRC16 Checksum
    BootLoader_BootIndexStatus = 130, ///< Current selected boot index and status of last boot
    BootLoader_Cache = 131, ///< Cache enabled state
    BootLoader_CommsStatus = 144, ///< Communication status - includes command and telemetry counters and error flags
    BootLoader_CopyToIntFlashProgress = 233, ///< Progress of copy to internal flash operation
    BootLoader_DownloadBlockReady = 242, ///< Status about download block preparation
    BootLoader_EdacErrors = 143, ///< EDAC Error Counters
    BootLoader_ExtendedIdentification = 129, ///< Boot And Running Program Status
    BootLoader_FileDownload = 241, ///< File Download buffer 20-byte packet
    BootLoader_FileInfo = 243, ///< File Information
    BootLoader_HoleMap1 = 247, ///< File Upload Hole Map 1
    BootLoader_HoleMap2 = 248, ///< File Upload Hole Map 2
    BootLoader_HoleMap3 = 249, ///< File Upload Hole Map 3
    BootLoader_HoleMap4 = 250, ///< File Upload Hole Map 4
    BootLoader_HoleMap5 = 251, ///< File Upload Hole Map 5
    BootLoader_HoleMap6 = 252, ///< File Upload Hole Map 6
    BootLoader_HoleMap7 = 253, ///< File Upload Hole Map 7
    BootLoader_HoleMap8 = 254, ///< File Upload Hole Map 8
    BootLoader_Identification = 128, ///< Identification information for this node
    BootLoader_InitializeUploadComplete = 244, ///< Initialize Upload Complete
    BootLoader_LastLogEvent = 141, ///< Last Logged Event (relative to pointer - adjusted via Advance and Reset TCs (3 & 4)
    BootLoader_LatchupErrors = 142, ///< SRAM Latchup counters
    BootLoader_ProgramInfo = 232, ///< Program information including file size and CRC
    BootLoader_SramScrubSettings = 134, ///< SRAM scrubbing size
    BootLoader_State = 132, ///< Status flags for bootloader
    BootLoader_TelecommandAcknowledge = 240, ///< Telemetry frame with acknowledge status of the previously sent command
    BootLoader_UnixTime = 140, ///< Current Unix Time
    BootLoader_UnixTimeSave = 145, ///< Configuration settings for unixtime flash memory persistence
    BootLoader_UploadBlockComplete = 245, ///< Finalize Upload Block Complete
} BOOTLOADER_Telemetry_t; 

/// BootCause enumeration
typedef enum {
    BootCause_Unexpected = 0, ///< Unexpected reset
    BootCause_TrxuvI2cError = 1, ///< 
    BootCause_CommsTimeout = 2, ///< Timeout due to lack of communications
    BootCause_CommandedMcuReset = 3, ///< Software commanded MCU reset
    BootCause_CommandedEpsReset = 4, ///< 
    BootCause_SramLatchup = 5, ///< Latchup detected in SRAM
} BOOTLOADER_BootCause_t;

/// BootProgramsList enumeration
typedef enum {
    BootProgramsList_RunBootloader = 0, ///< Bootloader
    BootProgramsList_RunInternalFlashProgram = 1, ///< Internal Flash Program
    BootProgramsList_RunEeprom = 2, ///< EEPROM
    BootProgramsList_RunExtFlash1 = 3, ///< External Flash Program 1
    BootProgramsList_RunExtFlash2 = 4, ///< External Flash Program 2
    BootProgramsList_RunExtFlash3 = 5, ///< External Flash Program 3
    BootProgramsList_RunExtFlash4 = 6, ///< External Flash Program 4
    BootProgramsList_RunExtFlash5 = 7, ///< External Flash Program 5
    BootProgramsList_RunExtFlash6 = 8, ///< External Flash Program 6
    BootProgramsList_RunExtFlash7 = 9, ///< External Flash Program 7
} BOOTLOADER_BootProgramsList_t;

/// BootSetProgramsList enumeration
typedef enum {
    BootSetProgramsList_RunBootloader = 0, ///< Bootloader
    BootSetProgramsList_RunInternalFlashProgram = 1, ///< Internal Flash Program
    BootSetProgramsList_RunEeprom = 2, ///< EEPROM
    BootSetProgramsList_RunExtFlash1 = 3, ///< External Flash Program 1
    BootSetProgramsList_RunExtFlash2 = 4, ///< External Flash Program 2
    BootSetProgramsList_RunExtFlash3 = 5, ///< External Flash Program 3
    BootSetProgramsList_RunExtFlash4 = 6, ///< External Flash Program 4
    BootSetProgramsList_RunExtFlash5 = 7, ///< External Flash Program 5
    BootSetProgramsList_RunExtFlash6 = 8, ///< External Flash Program 6
    BootSetProgramsList_RunExtFlash7 = 9, ///< External Flash Program 7
} BOOTLOADER_BootSetProgramsList_t;

/// BootStatus enumeration
typedef enum {
    BootStatus_BootNew = 0, ///< New Selection
    BootStatus_BootSuccess = 1, ///< Boot Success
    BootStatus_BootTry1 = 2, ///< 1 Failed boot attempt
    BootStatus_BootTry2 = 3, ///< 2 Failed boot attempts
    BootStatus_BootFail = 4, ///< 3 Failed boot attempts
} BOOTLOADER_BootStatus_t;

/// FileType enumeration
typedef enum {
    FileType_Binary = 0, ///< Binary File
    FileType_EvtLog = 1, ///< Event Log File
    FileType_TlmLog = 2, ///< Telemetry Log File
    FileType_JpgImg = 3, ///< JPG Image File
    FileType_BmpImg = 4, ///< BMP Image File
    FileType_Payload1 = 5, ///< Payload1 File
    FileType_Payload2 = 6, ///< Payload2 File
    FileType_Payload3 = 7, ///< Payload3 File
    FileType_Payload4 = 8, ///< Payload4 File
    FileType_IndexFile = 15, ///< Index File
} BOOTLOADER_FileType_t;

/// FileUploadDestination enumeration
typedef enum {
    FileUploadDestination_UlEeprom = 2, ///< EEPROM
    FileUploadDestination_UlFlash1 = 3, ///< Flash program 1
    FileUploadDestination_UlFlash2 = 4, ///< Flash program 2
    FileUploadDestination_UlFlash3 = 5, ///< Flash program 3
    FileUploadDestination_UlFlash4 = 6, ///< Flash program 4
    FileUploadDestination_UlFlash5 = 7, ///< Flash program 5
    FileUploadDestination_UlFlash6 = 8, ///< Flash program 6
    FileUploadDestination_UlFlash7 = 9, ///< Flash program 7
    FileUploadDestination_UlSdUser1 = 10, ///< SD User file 1
    FileUploadDestination_UlSdUser2 = 11, ///< SD User file 2
    FileUploadDestination_UlSdUser3 = 12, ///< SD User file 3
    FileUploadDestination_UlSdUser4 = 13, ///< SD User file 4
    FileUploadDestination_UlSdUser5 = 14, ///< SD User file 5
    FileUploadDestination_UlSdUser6 = 15, ///< SD User file 6
    FileUploadDestination_UlSdUser7 = 16, ///< SD User file 7
    FileUploadDestination_UlSdUser8 = 17, ///< SD User file 8
} BOOTLOADER_FileUploadDestination_t;

/// IntFlashCopyState enumeration
typedef enum {
    IntFlashCopyState_WaitingDma = 0, ///< Waiting for DMA
    IntFlashCopyState_WaitingMcuStatus = 1, ///< Waiting for MCU Status
} BOOTLOADER_IntFlashCopyState_t;

/// ProgramsList enumeration
typedef enum {
    ProgramsList_Bootloader = 0, ///< Bootloader
    ProgramsList_InternalFlash = 1, ///< Internal Flash Program
    ProgramsList_Eeprom = 2, ///< EEPROM
    ProgramsList_ExtFlash1 = 3, ///< External Flash Program 1
    ProgramsList_ExtFlash2 = 4, ///< External Flash Program 2
    ProgramsList_ExtFlash3 = 5, ///< External Flash Program 3
    ProgramsList_ExtFlash4 = 6, ///< External Flash Program 4
    ProgramsList_ExtFlash5 = 7, ///< External Flash Program 5
    ProgramsList_ExtFlash6 = 8, ///< External Flash Program 6
    ProgramsList_ExtFlash7 = 9, ///< External Flash Program 7
    ProgramsList_SdUser1 = 10, ///< SD User file 1
    ProgramsList_SdUser2 = 11, ///< SD User file 2
    ProgramsList_SdUser3 = 12, ///< SD User file 3
    ProgramsList_SdUser4 = 13, ///< SD User file 4
    ProgramsList_SdUser5 = 14, ///< SD User file 5
    ProgramsList_SdUser6 = 15, ///< SD User file 6
    ProgramsList_SdUser7 = 16, ///< SD User file 7
    ProgramsList_SdUser8 = 17, ///< SD User file 8
} BOOTLOADER_ProgramsList_t;

/// ResetCause enumeration
typedef enum {
    ResetCause_PowerOnReset = 0, ///< Power-On Reset
    ResetCause_BrownOutRegulated = 1, ///< Brown-Out Detected on Regulated Power
    ResetCause_BrownOutUnregulated = 2, ///< Brown-Out Detected on Unregulated Power
    ResetCause_ExternalWatchdog = 3, ///< External Watchdog Reset
    ResetCause_ExternalReset = 4, ///< External Reset
    ResetCause_WatchdogReset = 5, ///< Watchdog Reset
    ResetCause_LockupSystemReset = 6, ///< Lockup System Reset
    ResetCause_LockupReset = 7, ///< Lockup Reset
    ResetCause_SystemReqReset = 8, ///< System Request Reset
    ResetCause_BackupBrownOut = 9, ///< Backup domain brown-out reset
    ResetCause_BackupModeRst = 10, ///< Backup mode reset
    ResetCause_BackupModeRST_BackupBrownOutVddRegulated = 11, ///< Backup Mode reset and Backup domain brown-out on VDD regulated
    ResetCause_BackupModeRST_BackupBrownOutVddRegulated_BrownOutRegulated = 12, ///< Backup Mode reset and Backup domain brown-out on VDD regulated and brown out on regulated
    ResetCause_BackupModeRST_WatchdogReset = 13, ///< Backup mode reset and Watchdog reset
    ResetCause_BackupBrownOutBuvin_SystemReqReset = 14, ///< Backup Domain brown-out on BUVIN and System request reset.
    ResetCause_Unknown = 15, ///< Unkown Reset Cause
} BOOTLOADER_ResetCause_t;

/// SramBank enumeration
typedef enum {
    SramBank_Sram1 = 1, ///< SRAM bank 1
    SramBank_Sram2 = 2, ///< SRAM bank 2
} BOOTLOADER_SramBank_t;

/// TcErrorReason enumeration
typedef enum {
    TcErrorReason_NoError = 0, ///< No error
    TcErrorReason_InvalidTc = 1, ///< Invalid telecommand ID
    TcErrorReason_IncorrectLen = 2, ///< Incorrect TC parameter length
    TcErrorReason_IncorrectParams = 3, ///< Incorrect TC parameter value
} BOOTLOADER_TcErrorReason_t;

/*******************************************************************************
 *******************************   STRUCTS   ***********************************
 ******************************************************************************/

/***************************************************************************//**
 * @brief
 *    Boot Index and Status message structure.
 * @details
 *   Current selected boot index and status of last boot
 ******************************************************************************/
typedef struct{
    BOOTLOADER_BootProgramsList_t programIndex; ///< Program Index
    BOOTLOADER_BootStatus_t bootStatus; ///< Boot Status
} CUBEBOOT_BootIndexStatus_t;

/***************************************************************************//**
 * @brief
 *    Communication Status message structure.
 * @details
 *   Communication status - includes command and telemetry counters and error flags
 ******************************************************************************/
typedef struct{
    uint16_t tcCounter; ///< No. of telecommands received
    uint16_t tlmCounter; ///< No. of telemetry requests received
    bool uartBufferOverrun; ///< TC buffer was overrun while receiving a telecommand
    bool uartProtocolError; ///< UART protocol error occurred
    bool uartMsgIncomplete; ///< UART start-of-message identifier was received without a preceding end-of-message
    bool i2CTelemetryError; ///< Number of data clocked out was more than telemetry package
    bool i2CBufferError; ///< Telecommand sent exceeds buffer size
    bool cANBufferError; ///< Telecommand sent exceeds buffer size
} CUBEBOOT_CommsStatus_t;

/***************************************************************************//**
 * @brief
 *    Copy Program to Internal Flash message structure.
 * @details
 *   Copy Program to Internal Flash
 ******************************************************************************/
typedef struct{
    BOOTLOADER_ProgramsList_t srcIndex; ///< Source Program Index
    uint8_t bootloaderOverwrite; ///< Bootloader overwrite flag. Set to 0x5A to overwrite the boot segment. USE WITH CAUTION!
} CUBEBOOT_CopyToInternalFlash_t;

/***************************************************************************//**
 * @brief
 *    Copy To Internal Flash Progress message structure.
 * @details
 *   Progress of copy to internal flash operation
 ******************************************************************************/
typedef struct{
    bool busy; ///< Busy
    bool error; ///< Error
} CUBEBOOT_CopyToIntFlashProgress_t;

/***************************************************************************//**
 * @brief
 *    Download Block Ready message structure.
 * @details
 *   Status about download block preparation
 ******************************************************************************/
typedef struct{
    bool ready; ///< Ready
    bool parameterError; ///< The combination of message length and hole map resulted in invalid array lengths
    uint16_t checksum; ///< Block CRC16 Checksum
    uint16_t length; ///< Block length
} CUBEBOOT_DownloadBlockReady_t;

/***************************************************************************//**
 * @brief
 *    Initiate Download Burst message structure.
 * @details
 *   Initiate Download Burst
 ******************************************************************************/
typedef struct{
    uint8_t messageLength; ///< Message Length
    bool ignoreHoleMap; ///< Ignore Hole Map
} CUBEBOOT_DownloadBurst_t;

/***************************************************************************//**
 * @brief
 *    EDAC Error Counters message structure.
 * @details
 *   EDAC Error Counters
 ******************************************************************************/
typedef struct{
    uint16_t singleSRAMSEUs; ///< The number of single SRAM upsets (per byte) detected
    uint16_t doubleSRAMSEUs; ///< The number of double SRAM upsets (per byte) detected
    uint16_t multiSRAMSEUs; ///< The number of multiple SRAM upsets (per byte) deteced
} CUBEBOOT_EdacErrors_t;

/***************************************************************************//**
 * @brief
 *    Erase File message structure.
 * @details
 *   Erase File
 ******************************************************************************/
typedef struct{
    BOOTLOADER_FileType_t fileType; ///< File Type
    uint8_t fileCtr; ///< File Counter
    bool eraseAll; ///< Erase All
} CUBEBOOT_EraseFile_t;

/***************************************************************************//**
 * @brief
 *    Boot And Running Program Status message structure.
 * @details
 *   Boot And Running Program Status
 ******************************************************************************/
typedef struct{
    BOOTLOADER_ResetCause_t mcuResetCause; ///< Cause of MCU reset
    BOOTLOADER_BootCause_t bootCause; ///< Cause of last reboot
    uint16_t bootCounter; ///< Number of times CubeComputer has booted
    BOOTLOADER_BootProgramsList_t runningProgramIndex; ///< Index of current running program in flash programs list
    uint8_t firmwareMajorVersion; ///< Firmware version (Major)
    uint8_t firmwareMinorVersion; ///< Firmware version (Minor)
} CUBEBOOT_ExtendedIdentification_t;

/***************************************************************************//**
 * @brief
 *    File Download Buffer with File Contents message structure.
 * @details
 *   File Download buffer 20-byte packet
 ******************************************************************************/
typedef struct{
    uint16_t packetNo; ///< Packet counter of this file download packet
    uint8_t fileBytes[20]; ///< File 20-byte packet
} CUBEBOOT_FileDownload_t;

/***************************************************************************//**
 * @brief
 *    File Information message structure.
 * @details
 *   File Information
 ******************************************************************************/
typedef struct{
    BOOTLOADER_FileType_t fileType; ///< File Type
    bool busyUpdating; ///< 
    uint8_t fileCtr; ///< File Counter
    uint32_t size; ///< File Size
    uint32_t unixTime; ///< File Data and Time (unix) (measurment unit is [s])
    uint16_t checksum; ///< File CRC16 Checksum
} CUBEBOOT_FileInfo_t;

/***************************************************************************//**
 * @brief
 *    File Upload Packet message structure.
 * @details
 *   File Upload Packet
 ******************************************************************************/
typedef struct{
    uint16_t packetNo; ///< Packet Number
    uint8_t fileBytes[20]; ///< File Bytes
} CUBEBOOT_FileUpload_t;

/***************************************************************************//**
 * @brief
 *    Finalize Upload Block message structure.
 * @details
 *   Finalize Uploaded File Block
 ******************************************************************************/
typedef struct{
    BOOTLOADER_FileUploadDestination_t destination; ///< Destination
    uint32_t offset; ///< Offset into file
    uint16_t blockLen; ///< Length of block 
} CUBEBOOT_FinalizeUploadBlock_t;

/***************************************************************************//**
 * @brief
 *    Identification message structure.
 * @details
 *   Identification information for this node
 ******************************************************************************/
typedef struct{
    uint8_t nodeType; ///< Node type identifier.
    uint8_t interfaceVersion; ///< Interface version. This field should have a value of 1
    uint8_t firmwareMajorVersion; ///< Firmware version (Major)
    uint8_t firmwareMinorVersion; ///< Firmware version (Minor)
    uint16_t runtimeSeconds; ///< Number of seconds since processor start-up
    uint16_t runtimeMilliseconds; ///< Number of milliseconds (after the integer second) since processor start-up
} CUBEBOOT_Identification_t;

/***************************************************************************//**
 * @brief
 *    Initiate File Upload message structure.
 * @details
 *   Initiate File Upload
 ******************************************************************************/
typedef struct{
    BOOTLOADER_FileUploadDestination_t destination; ///< Destination
    uint8_t blockSize; ///< Block Size
} CUBEBOOT_InitiateFileUpload_t;

/***************************************************************************//**
 * @brief
 *    Last Logged Event message structure.
 * @details
 *   Last Logged Event (relative to pointer - adjusted via Advance and Reset TCs (3 & 4)
 ******************************************************************************/
typedef struct{
    uint32_t unixTime; ///< 
    uint8_t eventId; ///< Event ID
    uint8_t eventParam; ///< Event Parameter
} CUBEBOOT_LastLogEvent_t;

/***************************************************************************//**
 * @brief
 *    SRAM Latchup counters message structure.
 * @details
 *   SRAM Latchup counters
 ******************************************************************************/
typedef struct{
    uint16_t sRAM1SELs; ///< The number of SRAM1 latchups detected
    uint16_t sRAM2SELs; ///< The number of SRAM2 latchups detected
} CUBEBOOT_LatchupErrors_t;

/***************************************************************************//**
 * @brief
 *    Load File Download Block message structure.
 * @details
 *   Fill download buffer with file contents
 ******************************************************************************/
typedef struct{
    BOOTLOADER_FileType_t fileType; ///< File Type
    uint8_t counter; ///< Counter
    uint32_t offset; ///< Offset
    uint16_t length; ///< Block Length
} CUBEBOOT_LoadDownloadBlock_t;

/***************************************************************************//**
 * @brief
 *    Program Information message structure.
 * @details
 *   Program information including file size and CRC
 ******************************************************************************/
typedef struct{
    BOOTLOADER_ProgramsList_t programIndex; ///< Program Index
    bool busy; ///< Busy reading
    uint32_t fileSize; ///< File Size (bytes)
    uint16_t crc16; ///< CRC16 Checksum
} CUBEBOOT_ProgramInfo_t;

/***************************************************************************//**
 * @brief
 *    Bootloader State message structure.
 * @details
 *   Status flags for bootloader
 ******************************************************************************/
typedef struct{
    uint16_t runtime; ///< Uptime (measurment unit is [s])
    bool sram1Enabled; ///< SRAM1 is enabled
    bool sram2Enabled; ///< SRAM2 is enabled
    bool sramLatchup; ///< SRAM Latch-up Error occurred and could not be recovered
    bool sramLatchupRecovered; ///< SRAM Latch-up Occurred but recovered after power cycle
    bool sDError; ///< SD Card Error
    bool extFlashError; ///< External Flash Erase/write error occurred
    bool intFlashError; ///< Internal Flash Erase/write error occurred
    bool eepromError; ///< EEPROM Write error occurred
    bool bootRegCorrupt; ///< Boot Register contained invalid data
    bool radioCommsError; ///< Communications Error with Radio
} CUBEBOOT_State_t;

/***************************************************************************//**
 * @brief
 *    Telecommand Acknowledge message structure.
 * @details
 *   Telemetry frame with acknowledge status of the previously sent command
 ******************************************************************************/
typedef struct{
    uint8_t lastTCID; ///< ID of last received TC
    bool processedFlag; ///< Flag to indicate if the last TC has been processed.
    BOOTLOADER_TcErrorReason_t tCerrorStatus ; ///< Status of last processed telecommand
    uint8_t tCParameterErrorIndex; ///< Index of incorrect TC parameter
} CUBEBOOT_TelecommandAcknowledge_t;

/***************************************************************************//**
 * @brief
 *    Current Unix Time message structure.
 * @details
 *   Current Unix Time
 ******************************************************************************/
typedef struct{
    uint32_t time; ///< Time in s since 01/01/1970, 00:00 (measurment unit is [s])
    uint16_t milliSec; ///< Current millisecond count (measurment unit is [ms])
} CUBEBOOT_UnixTime_t;

/***************************************************************************//**
 * @brief
 *    Unix Time Save to Flash message structure.
 * @details
 *   Configuration settings for unixtime flash memory persistence
 ******************************************************************************/
typedef struct{
    bool saveNow; ///< Save current unixtime to flash memory
    bool saveOnUpdate; ///< Save unixtime to flash memory whenever there is a command to update the unixtime
    bool savePeriodic; ///< Save unixtime to flash memory periodically
    uint8_t period; ///< Interval at which to save unixtime to flash memory (measurment unit is [s])
} CUBEBOOT_UnixTimeSave_t;

/***************************************************************************//**
 * @brief
 *    Upload Block Complete message structure.
 * @details
 *   Finalize Upload Block Complete
 ******************************************************************************/
typedef struct{
    bool busy; ///< Busy with block finalization
    bool error; ///< Error in block finalization
} CUBEBOOT_UploadBlockComplete_t;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

/***************************************************************************//**
Creates the telemetry request packet
 *
 * @param[in] txBuffer
 *   Transmit buffer to be populated
 * @param[in] tlm
 *   Enumeration of specified telemetry request
 * @return
 *   Returns the number bytes of telemetry request
uint16_t BOOTLOADER_createTelemetryRequest(uint8_t* txBuffer, BOOTLOADER_Telemetry_t tlm);

/*****************************************************************************
 * Decode a Block  Checksum telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] checksum
 *   Pointer to a uint16_t in which the Checksum will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, checksum, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_BlockChecksumTlm(uint8_t* rxBuffer, uint16_t* checksum);

/*****************************************************************************
 * Decode a Boot Index and Status telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_BootIndexStatus_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_BootIndexStatusTlm(uint8_t* rxBuffer, CUBEBOOT_BootIndexStatus_t* returnVal);

/*****************************************************************************
 * Decode a Cache enabled state telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] enabled
 *   Pointer to a bool in which the Enabled state will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, enabled, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_CacheTlm(uint8_t* rxBuffer, bool* enabled);

/*****************************************************************************
 * Decode a Communication Status telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_CommsStatus_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_CommsStatusTlm(uint8_t* rxBuffer, CUBEBOOT_CommsStatus_t* returnVal);

/*****************************************************************************
 * Decode a Copy To Internal Flash Progress telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_CopyToIntFlashProgress_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_CopyToIntFlashProgressTlm(uint8_t* rxBuffer, CUBEBOOT_CopyToIntFlashProgress_t* returnVal);

/*****************************************************************************
 * Decode a Download Block Ready telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_DownloadBlockReady_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_DownloadBlockReadyTlm(uint8_t* rxBuffer, CUBEBOOT_DownloadBlockReady_t* returnVal);

/*****************************************************************************
 * Decode a EDAC Error Counters telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_EdacErrors_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_EdacErrorsTlm(uint8_t* rxBuffer, CUBEBOOT_EdacErrors_t* returnVal);

/*****************************************************************************
 * Decode a Boot And Running Program Status telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_ExtendedIdentification_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_ExtendedIdentificationTlm(uint8_t* rxBuffer, CUBEBOOT_ExtendedIdentification_t* returnVal);

/*****************************************************************************
 * Decode a File Download Buffer with File Contents telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_FileDownload_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_FileDownloadTlm(uint8_t* rxBuffer, CUBEBOOT_FileDownload_t* returnVal);

/*****************************************************************************
 * Decode a File Information telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_FileInfo_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_FileInfoTlm(uint8_t* rxBuffer, CUBEBOOT_FileInfo_t* returnVal);

/*****************************************************************************
 * Decode a Hole Map 1 telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_HoleMap1Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/*****************************************************************************
 * Decode a Hole Map 2 telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_HoleMap2Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/*****************************************************************************
 * Decode a Hole Map 3 telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_HoleMap3Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/*****************************************************************************
 * Decode a Hole Map 4 telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_HoleMap4Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/*****************************************************************************
 * Decode a Hole Map 5 telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_HoleMap5Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/*****************************************************************************
 * Decode a Hole Map 6 telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_HoleMap6Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/*****************************************************************************
 * Decode a Hole Map 7 telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_HoleMap7Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/*****************************************************************************
 * Decode a Hole Map 8 telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] holeMap
 *   Pointer to a byte array in which the Hole Map will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, holeMap, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_HoleMap8Tlm(uint8_t* rxBuffer, uint8_t* holeMap);

/*****************************************************************************
 * Decode a Identification telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_Identification_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_IdentificationTlm(uint8_t* rxBuffer, CUBEBOOT_Identification_t* returnVal);

/*****************************************************************************
 * Decode a Initialize Upload Complete telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] busy
 *   Pointer to a bool in which the Busy will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, busy, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_InitializeUploadCompleteTlm(uint8_t* rxBuffer, bool* busy);

/*****************************************************************************
 * Decode a Last Logged Event telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_LastLogEvent_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_LastLogEventTlm(uint8_t* rxBuffer, CUBEBOOT_LastLogEvent_t* returnVal);

/*****************************************************************************
 * Decode a SRAM Latchup counters telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_LatchupErrors_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_LatchupErrorsTlm(uint8_t* rxBuffer, CUBEBOOT_LatchupErrors_t* returnVal);

/*****************************************************************************
 * Decode a Program Information telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_ProgramInfo_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_ProgramInfoTlm(uint8_t* rxBuffer, CUBEBOOT_ProgramInfo_t* returnVal);

/*****************************************************************************
 * Decode a SRAM Scrub Parameters telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] scrubSize
 *   Pointer to a uint16_t in which the Scrub Size will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, scrubSize, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_SramScrubSettingsTlm(uint8_t* rxBuffer, uint16_t* scrubSize);

/*****************************************************************************
 * Decode a Bootloader State telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_State_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_StateTlm(uint8_t* rxBuffer, CUBEBOOT_State_t* returnVal);

/*****************************************************************************
 * Decode a Telecommand Acknowledge telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_TelecommandAcknowledge_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_TelecommandAcknowledgeTlm(uint8_t* rxBuffer, CUBEBOOT_TelecommandAcknowledge_t* returnVal);

/*****************************************************************************
 * Decode a Current Unix Time telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_UnixTime_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_UnixTimeTlm(uint8_t* rxBuffer, CUBEBOOT_UnixTime_t* returnVal);

/*****************************************************************************
 * Decode a Unix Time Save to Flash telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_UnixTimeSave_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_UnixTimeSaveTlm(uint8_t* rxBuffer, CUBEBOOT_UnixTimeSave_t* returnVal);

/*****************************************************************************
 * Decode a Upload Block Complete telemetry frame from the BootLoader
 *
 * @param[in] rxBuffer
 *   Buffer containing raw bytes
 * @param[in] returnVal
 *   Pointer to a CUBEBOOT_UploadBlockComplete_t struct in which the telemetry will be returned.
 * @return
 *   Returns a value from the CUBELIB_Result_t enumeration:
 *      CubeLibOk if the telemetry was decoded without error
 *      PointerIsNull if the input parameter, returnVal, was NULL
 ******************************************************************************/
CUBELIB_Result_t CUBEBOOT_UploadBlockCompleteTlm(uint8_t* rxBuffer, CUBEBOOT_UploadBlockComplete_t* returnVal);

/***************************************************************************//**
 * Send a Advance File List Read Pointer command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_AdvanceFileListPtrCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Advance Log Pointer command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_AdvanceLogPtrCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Set Boot Index command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] programIndex
 *   Program Index
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, programIndex, was not a valid BOOTLOADER_BootSetProgramsList_t enumeration
 ******************************************************************************/
uint16_t CUBEBOOT_BootIndexCmd(uint8_t* tcBuffer, BOOTLOADER_BootSetProgramsList_t programIndex);

/***************************************************************************//**
 * Send a Cache enabled state command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] enabled
 *   Enabled state
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_CacheCmd(uint8_t* tcBuffer, bool enabled);

/***************************************************************************//**
 * Send a Clear Error Flags command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_ClearErrorsCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Copy Program to Internal Flash command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] srcIndex
 *   Source Program Index
 * @param[in] bootloaderOverwrite
 *   Bootloader overwrite flag. Set to 0x5A to overwrite the boot segment. USE WITH CAUTION!
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, srcIndex, was not a valid BOOTLOADER_ProgramsList_t enumeration
 ******************************************************************************/
uint16_t CUBEBOOT_CopyToInternalFlashCmd(uint8_t* tcBuffer, CUBEBOOT_CopyToInternalFlash_t* setVal);

/***************************************************************************//**
 * Send a Initiate Download Burst command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] messageLength
 *   Message Length
 * @param[in] ignoreHoleMap
 *   Ignore Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_DownloadBurstCmd(uint8_t* tcBuffer, CUBEBOOT_DownloadBurst_t* setVal);

/***************************************************************************//**
 * Send a Erase File command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] fileType
 *   File Type
 * @param[in] fileCtr
 *   File Counter
 * @param[in] eraseAll
 *   Erase All
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, fileType, was not a valid BOOTLOADER_FileType_t enumeration
 ******************************************************************************/
uint16_t CUBEBOOT_EraseFileCmd(uint8_t* tcBuffer, CUBEBOOT_EraseFile_t* setVal);

/***************************************************************************//**
 * Send a File Upload Packet command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] packetNo
 *   Packet Number
 * @param[in] fileBytes
 *   File Bytes
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_FileUploadCmd(uint8_t* tcBuffer, CUBEBOOT_FileUpload_t* setVal);

/***************************************************************************//**
 * Send a Finalize Upload Block command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] destination
 *   Destination
 * @param[in] offset
 *   Offset into file
 * @param[in] blockLen
 *   Length of block 
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, destination, was not a valid BOOTLOADER_FileUploadDestination_t enumeration
 ******************************************************************************/
uint16_t CUBEBOOT_FinalizeUploadBlockCmd(uint8_t* tcBuffer, CUBEBOOT_FinalizeUploadBlock_t* setVal);

/***************************************************************************//**
 * Send a Hole Map 1 command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_HoleMap1Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 2 command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_HoleMap2Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 3 command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_HoleMap3Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 4 command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_HoleMap4Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 5 command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_HoleMap5Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 6 command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_HoleMap6Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 7 command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_HoleMap7Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Hole Map 8 command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] holeMap
 *   Hole Map
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_HoleMap8Cmd(uint8_t* tcBuffer, uint8_t* holeMap);

/***************************************************************************//**
 * Send a Initiate File Upload command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] destination
 *   Destination
 * @param[in] blockSize
 *   Block Size
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, destination, was not a valid BOOTLOADER_FileUploadDestination_t enumeration
 ******************************************************************************/
uint16_t CUBEBOOT_InitiateFileUploadCmd(uint8_t* tcBuffer, CUBEBOOT_InitiateFileUpload_t* setVal);

/***************************************************************************//**
 * Send a Load File Download Block command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] fileType
 *   File Type
 * @param[in] counter
 *   Counter
 * @param[in] offset
 *   Offset
 * @param[in] length
 *   Block Length
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, fileType, was not a valid BOOTLOADER_FileType_t enumeration
 ******************************************************************************/
uint16_t CUBEBOOT_LoadDownloadBlockCmd(uint8_t* tcBuffer, BOOTLOADER_FileType_t fileType, uint8_t counter, uint32_t offset, uint16_t length);

/***************************************************************************//**
 * Send a Read Program Information command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] programIndex
 *   Program Index
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 *      TcInvalidParam if the input parameter, programIndex, was not a valid BOOTLOADER_ProgramsList_t enumeration
 ******************************************************************************/
uint16_t CUBEBOOT_ReadProgramInfoCmd(uint8_t* tcBuffer, BOOTLOADER_ProgramsList_t programIndex);

/***************************************************************************//**
 * Send a Reset command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] magic
 *   Magic number to make sure it is a valid reset command. Should equal 0x5A
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_ResetCmd(uint8_t* tcBuffer, uint8_t magic);

/***************************************************************************//**
 * Send a Reset Boot Registers command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_ResetBootRegistersCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Reset File List Read Pointer command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_ResetFileListPtrCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Reset Log Pointer command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_ResetLogPtrCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Reset Upload Block command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_ResetUploadBlockCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a Run Selected Program command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_RunSelectedProgramCmd(uint8_t* tcBuffer);

/***************************************************************************//**
 * Send a SRAM Scrub Parameters command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] scrubSize
 *   Scrub Size
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_SramScrubSettingsCmd(uint8_t* tcBuffer, uint16_t scrubSize);

/***************************************************************************//**
 * Send a Current Unix Time command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] time
 *   Time in s since 01/01/1970, 00:00
 *   (in [s] units)
 * @param[in] milliSec
 *   Current millisecond count
 *   (in [ms] units)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_UnixTimeCmd(uint8_t* tcBuffer, CUBEBOOT_UnixTime_t* setVal);

/***************************************************************************//**
 * Send a Unix Time Save to Flash command to the BootLoader
 *
 * @param[in] nodeid
 *   identifier of the node on the communications bus
 * @param[in] saveNow
 *   Save current unixtime to flash memory
 * @param[in] saveOnUpdate
 *   Save unixtime to flash memory whenever there is a command to update the unixtime
 * @param[in] savePeriodic
 *   Save unixtime to flash memory periodically
 * @param[in] period
 *   Interval at which to save unixtime to flash memory
 *   (in [s] units)
 * @return
 *   Returns a value from the uint16_t enumeration:
 *      CubeLibOk if the command was sent without error
 *      One of the I2C enumeration values in case of I2C communications error
 ******************************************************************************/
uint16_t CUBEBOOT_UnixTimeSaveCmd(uint8_t* tcBuffer, CUBEBOOT_UnixTimeSave_t* setVal);


#endif  // define __BOOTLOADER2_H
